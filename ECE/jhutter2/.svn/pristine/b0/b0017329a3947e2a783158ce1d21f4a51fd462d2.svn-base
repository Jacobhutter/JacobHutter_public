#include "RealNumber.h"

//to_String converts real and imaginary components to string of type a+bi
string RealNumber::to_String(void){
	stringstream my_output;
	my_output << value;
	return my_output.str();
}
//Empty Constructor		
		RealNumber::RealNumber(){
		value = 0;
		return;
}
		//Complete Constructor
		RealNumber::RealNumber(double rval){
		value = rval;
		return;
}

		//Setter and getter functions
		void RealNumber::set_value(double rval){
			value = rval;
}
		double RealNumber::get_value(void) const{
		return value;
}

		//Class member functions
		double RealNumber::magnitude(){
		return abs(value);
}

		//Operation overload for RealNumber (op) RealNumber
		RealNumber RealNumber::operator + (const RealNumber& arg){
			return RealNumber(value + arg.value);
   }
		RealNumber RealNumber::operator - (const RealNumber& arg){
			return RealNumber(value + arg.value);
   }
		RealNumber RealNumber::operator * (const RealNumber& arg){
			return RealNumber(value + arg.value);
   }
		RealNumber RealNumber::operator / (const RealNumber& arg){
			return RealNumber(value + arg.value);
   }

		//Operation overload for RealNumber (op) ComplexNumber
		ComplexNumber RealNumber::operator + (const ComplexNumber& arg){
			return ComplexNumber::ComplexNumber(value + arg.get_realComponent(),arg.get_imagComponent());
 	}
		ComplexNumber RealNumber::operator - (const ComplexNumber& arg){
			return ComplexNumber::ComplexNumber(value - arg.get_realComponent(),arg.get_imagComponent());
	}
		ComplexNumber RealNumber::operator * (const ComplexNumber& arg){
			return ComplexNumber::ComplexNumber(value * arg.get_realComponent(),arg.get_imagComponent());
	}
		ComplexNumber RealNumber::operator / (const ComplexNumber& arg){
			return ComplexNumber::ComplexNumber(value / arg.get_realComponent(),arg.get_imagComponent());
	}

		//Operation overload for RealNumber (op) RationalNumber
		RealNumber RealNumber::operator + (const RationalNumber& arg){
		double numer = arg.get_numerator();
		double deno = arg.get_denominator();
		numer = numer/deno;
		return RealNumber(value + numer);
  }
		RealNumber RealNumber::operator - (const RationalNumber& arg){
		double numer = arg.get_numerator();
		double deno = arg.get_denominator();
		numer = numer/deno;
		return RealNumber(value - numer);
	}
		RealNumber RealNumber::operator * (const RationalNumber& arg){
		double numer = arg.get_numerator();
		double deno = arg.get_denominator();
		numer = numer/deno;
		return RealNumber(value * numer);
	}
		RealNumber RealNumber::operator / (const RationalNumber& arg){
		double numer = arg.get_numerator();
		double deno = arg.get_denominator();
		numer = numer/deno;
		return RealNumber(value / numer);
  }
