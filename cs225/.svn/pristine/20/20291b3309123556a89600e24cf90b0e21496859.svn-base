/**
 * @file anagram_dict.cpp
 * Implementation of the AnagramDict class.
 *
 * @author Matt Joras
 * @date Winter 2013
 */

#include "anagram_dict.h"

#include <algorithm> /* I wonder why this is included... */
#include <fstream>
#include <iostream>

using std::string;
using std::vector;
using std::ifstream;

/**
 * Constructs an AnagramDict from a filename with newline-separated
 * words.
 * @param filename The name of the word list file.
 */
AnagramDict::AnagramDict(const string& filename)
{ vector <string> increasing;
  string word2;
  ifstream wordsFile(filename);
  string word;
  if (wordsFile.is_open()) {
    while(getline(wordsFile,word)){ // read in word
      word2 = word;
      std::sort(word2.begin(),word2.begin());
      increasing.push_back(word2); // sort to alphabetical
      dict.emplace(word,increasing); // push into the map with empty string vector, unravel at end
      increasing.clear();
    }
  }
}

/**
 * Constructs an AnagramDict from a vector of words.
 * @param words The vector of strings to be used as source words.
 */
AnagramDict::AnagramDict(const vector<string>& words)
{   vector<string> increasing;
    string word2;
    for(size_t i = 0; i < words.size(); i++){ // for every word in words
      word2 = words[i]; // get word
      std::sort(word2.begin(),word2.end());
      increasing.push_back(word2); // get sorted
      dict.emplace(words[i],increasing);
      increasing.clear();

    }
}

/**
 * @param word The word to find anagrams of.
 * @return A vector of strings of anagrams of the given word. Empty
 * vector returned if no anagrams are found or the word is not in the
 * word list.
 */
vector<string> AnagramDict::get_anagrams(const string& word) const
{   string word2 = word;
    vector<string> permutations;
    auto lookup = dict.find(word);
    if(lookup == dict.end())
      return vector<string>();
    string alphabetical = lookup->second[0]; // get alphabetical string
    permutations.push_back(word);
    for(auto & word_itr : dict){
      if(word_itr.second[0] == alphabetical && word_itr.first != word) // not same word spelling
        permutations.push_back(word_itr.first);
    };
    return permutations;
  }

/**
 * @return A vector of vectors of strings. Each inner vector contains
 * the "anagram siblings", i.e. words that are anagrams of one another.
 * NOTE: It is impossible to have one of these vectors have less than
 * two elements, i.e. words with no anagrams are ommitted.
 */
vector<vector<string>> AnagramDict::get_all_anagrams() const
{
    /* Your code goes here! */
    bool flag = true;
    vector<vector<string>> dictionary;
    vector<string> words;
    vector<string> available;
    for(auto & item : dict){
      available.push_back(item.first); // get every key in the dict
    }
    for(auto & word : dict ) // for every word in dictionary
    { flag = false;
      for(auto & element : available){
        if(element == word.first)
          flag = true;
      }
      //auto lookup = available.find(word->first); // if word is available
      if(flag){
          words = get_anagrams(word.first); // words is the anagrams
          for(auto & eraser : words){
            available.erase(eraser); // erase every word in the available word category
          }
      if(words.length() > 1 )
        dictionary.push_back(words); // get vector of all words in dictionary
      }
    }
    return dictionary;
}
