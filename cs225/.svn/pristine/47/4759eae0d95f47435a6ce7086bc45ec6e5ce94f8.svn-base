/**
 * @file avltree.cpp
 * Definitions of the binary tree functions you'll be writing for this lab.
 * You'll need to modify this file.
 */

template <class K, class V>
V AVLTree<K, V>::find(const K& key) const
{
    return find(root, key);
}

template <class K, class V>
V AVLTree<K, V>::find(Node* subtree, const K& key) const
{
    if (subtree == NULL)
        return V();
    else if (key == subtree->key)
        return subtree->value;
    else {
        if (key < subtree->key)
            return find(subtree->left, key);
        else
            return find(subtree->right, key);
    }
}


template <class K, class V>
void AVLTree<K, V>::rotateLeft(Node*& t)
{
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    bool flag = false;
    Node * right_node;
  //  while(t->left->height + 2 <= t->right->height){
     if(t == root)
       flag = true;;
     right_node = t->right;
     right_node->left = t;
     t->right = NULL;
     if(flag){
      root = right_node;
      flag = false;
    }
    t->height--;
    right_node->height++;
    t = right_node;
 //}

    // your code here
}

template <class K, class V>
void AVLTree<K, V>::rotateLeftRight(Node*& t)
{   node * temp = t;
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    // Implemented for you:
    rotateLeft(t->left);
    rotateRight(temp);
}

template <class K, class V>
void AVLTree<K, V>::rotateRight(Node*& t)
{
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    bool flag = false;
    Node * left_node;
  //  while(height(t->right) + 2 <= height(t->left)){
     if(t == root)
       flag = true;
     left_node = t->left;
     left_node->right = t;
     t->left = NULL;
     if(flag){
      root = left_node;
      flag = false;
    }
    t->height--;
    left_node->height++;
    t = left_node;
 //}
}
template <class K, class V>
void AVLTree<K, V>::rotateRightLeft(Node*& t)
{   node * temp = t;
    *_out << __func__ << endl; // Outputs the rotation name (don't remove this)
    rotateRight(t->right);
    rotateRight(temp);
}

template <class K, class V>
void AVLTree<K, V>::rebalance(Node*& subtree)
{
      // your code here
}

template <class K, class V>
void AVLTree<K, V>::insert(const K & key, const V & value)
{
    insert(root, key, value);
    rebalance(root);
}

template <class K, class V>
void AVLTree<K, V>::insert(Node*& subtree, const K& key, const V& value)
{
    if(!subtree){
      root = new Node(key,value);
    }
    if(key < subtree->key){
      if(!subtree->left){
        subtree->left = new Node(key,value);
        return;
      }
      subtree->height++;
      insert(subtree->left, key, value);
    }
    else{
      if(!subtree->right){
        subtree->right = new Node(key,value);
        return;
      }
      subtree->height++;
      insert(subtree->right,key,value);
    }

}

template <class K, class V>
void AVLTree<K, V>::remove(const K& key)
{
    remove(root, key);
}


template <class K, class V>
void AVLTree<K, V>::rightMostChild(Node*& subtree){
  if(subtree->right)
    return rightMostChild(subtree->right);
  else
    return subtree;
}

template <class K, class V>
void AVLTree<K, V>::remove(Node*& subtree, const K& key)
{
    if (subtree == NULL)
        return;

    if (key < subtree->key) {
        remove(subtree->left,key);
    } else if (key > subtree->key) {
        remove(subtree->right,key);
    } else {
        if (subtree->left == NULL && subtree->right == NULL) {
            Node * temp = subtree;
            subtree = NULL;
            delete temp;
            // your code here
        } else if (subtree->left != NULL && subtree->right != NULL) {
            /* two-child remove */
            Node * iop = rightMostChild(croot->left);
            K search = subtree->key;
            subtree->key = iop->key;
            iop->key = search;
            remove(iop,search);
        } else {
            /* one-child remove */
            Node * temp = subtree;
            if(subtree->left == NULL) subtree = subtree->right;
            else subtree = subtree->left;
            delete temp;
        }
        return;
        // your code here
    }
}
