/**
 * @file cartalk_puzzle.cpp
 * Holds the function which solves a CarTalk puzzler.
 *
 * @author Matt Joras
 * @date Winter 2013
 */

#include <fstream>

#include "cartalk_puzzle.h"

using namespace std;

/**
 * Solves the CarTalk puzzler described here:
 * http://www.cartalk.com/content/wordplay-anyone.
 * @return A vector of "StringTriples" (a typedef'd std::tuple, see top of
 * cartalk_puzzle.h). Returns an empty vector if no solutions are found.
 * @param d The PronounceDict to be used to solve the puzzle.
 * @param word_list_fname The filename of the word list to be used.
 */
vector<StringTriple> cartalk_puzzle(PronounceDict d,
                                    const string& word_list_fname)
{
    vector<StringTriple> retval;
    vector<StringTriple> five;
    string current_word;
    ifstream wordsFile(word_list_fname);
    if(wordsFile.is_open()){  // get every five letter word
      while(getline(wordsFile,current_word) != feof){ // read into current word;
       if(current_word.length() != 5)
          current_word.clear() // clear string
        else
          five.push_back(current_word);
        }
    }
    for(auto & five_word : five){
      string missing_first = five_word.substr(1)// miss the first char;
      char first = five_word[0]; // store initial character;
      string missing_seccond = first + five_word.substr(2); // get word with second char missing
      if(d.homophones(missing_first, missing_second) && d.homophones(missing_first, five_word) && d.homophones(five_word, missing_second) && missing_first != missing_second){
        stringTriple push(five_word,missing_first,missing_second);
        retval.push_back(push);
      }
    }
    /* Your code goes here! */
    return retval;
}
