/**
 * @file anagram_dict.cpp
 * Implementation of the AnagramDict class.
 *
 * @author Matt Joras
 * @date Winter 2013
 */

#include "anagram_dict.h"

#include <algorithm> /* I wonder why this is included... */
#include <fstream>

using std::string;
using std::vector;
using std::ifstream;

/**
 * Constructs an AnagramDict from a filename with newline-separated
 * words.
 * @param filename The name of the word list file.
 */
AnagramDict::AnagramDict(const string& filename)
{
  ifstream wordsFile(filename);
  string word;
  if (wordsFile.is_open()) {
    while(getline(wordsFile,word)){ // read in word
    do{
      dict[word].push_back(word); // push initial word
    }while(std::next_permutation(word.begin(),word.end()));

    }
  }
}

/**
 * Constructs an AnagramDict from a vector of words.
 * @param words The vector of strings to be used as source words.
 */
AnagramDict::AnagramDict(const vector<string>& words)
{
    for(auto & word : words ){ // for every word in words
      do{
        dict[word].push_back(word); // push initial word
      }while(std::next_permutation(word.begin(),word.end()));

    }
}

/**
 * @param word The word to find anagrams of.
 * @return A vector of strings of anagrams of the given word. Empty
 * vector returned if no anagrams are found or the word is not in the
 * word list.
 */
vector<string> AnagramDict::get_anagrams(const string& word) const
{
    vector <string> retval; // empty string
    auto lookup = dict.find(word);
    if(lookup == dict.end()) // word doesnt exist
      return retval;

    return lookup->second; // return vector of that iterator
}

/**
 * @return A vector of vectors of strings. Each inner vector contains
 * the "anagram siblings", i.e. words that are anagrams of one another.
 * NOTE: It is impossible to have one of these vectors have less than
 * two elements, i.e. words with no anagrams are ommitted.
 */
vector<vector<string>> AnagramDict::get_all_anagrams() const
{
    /* Your code goes here! */
    vector<vector<string>> dictionary;
    for(auto & word : dict ) // for every word in dictionary
    {
      if(!dict[word.first].isempty()) // if vector has no anagrams then do not push
        dictionary.push_back(dict[word]);
    }
    return dictionary;
}
