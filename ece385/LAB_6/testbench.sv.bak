module testbench();

timeunit 10ns;	// Half clock cycle at 50 MHz
			// This is the amount of time represented by #1
timeprecision 1ns;

// These signals are internal because the processor will be
// instantiated as a submodule in testbench.
logic Clk = 0;
logic Reset, Continue, Run;
logic [15:0] S;

logic [6:0] Ahex1,
		 Ahex0,
		 Bhex1,
		 Bhex0;
logic [15:0] PC_Data;
logic [15:0] MDR;
logic [15:0] MAR;
logic [15:0] IR;
logic LD_IR;
logic [15:0] BUS;
logic [15:0] MDR_In;
	 logic [11:0] LED;
	 logic [6:0] HEX0, HEX1, HEX2, HEX3;
	 logic CE, UB, LB, OE, WE;
	 logic [19:0] ADDR;
	 wire [15:0] Data; //tristate buffers need to be of type wire

// To store expected results

// A counter to count the instances where simulation results
// do no match with expected results

// Instantiating the DUT
// Make sure the module and signal names match with those in your design

slc3 lc(.*);

// Toggle the clock
// #1 means wait for a delay of 1 timeunit
always begin : CLOCK_GENERATION
#1 Clk = ~Clk;
end

initial begin: CLOCK_INITIALIZATION
    Clk = 0;
end

// Testing begins here
// The initial block is not synthesizable
// Everything happens sequentially inside an initial block
// as in a software program
initial begin: TEST_VECTORS
#0 S = 16'h0000;
#0 Run = 1;
#0 Reset = 1;
#0 Continue = 1;

#2 Reset = 0;
#22 Reset = 1;

#2 Run = 0;
#22 Run = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;


#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

#2 Continue = 0;
#22 Continue = 1;

end
endmodule
