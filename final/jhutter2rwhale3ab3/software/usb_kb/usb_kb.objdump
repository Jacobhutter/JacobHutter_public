
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011dbc memsz 0x00011dbc flags r-x
    LOAD off    0x00012ddc vaddr 0x08011ddc paddr 0x080138c8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000153b4 vaddr 0x080153b4 paddr 0x080153b4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000111a8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08011ddc  080138c8  00012ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080153b4  080153b4  000153b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000148c8  2**0
                  CONTENTS
  7 .sdram        00000000  08015514  08015514  000148c8  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  000148c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  00014910  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023652  00000000  00000000  00015638  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f22  00000000  00000000  00038c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b160  00000000  00000000  00041bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022cc  00000000  00000000  0004cd0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000033a0  00000000  00000000  0004efd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  00052378  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000690c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00069108  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d80e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d811  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d81d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d81e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d81f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d823  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d827  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d82b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d836  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d841  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d84c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002f  00000000  00000000  0006d857  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0006d886  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006d2ef  00000000  00000000  00071cc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08011364 l    d  .rodata	00000000 .rodata
08011ddc l    d  .rwdata	00000000 .rwdata
080153b4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015514 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
080153b4 l     O .bss	00000002 ctl_reg.3318
080153b6 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011b22 l     O .rodata	00000010 zeroes.4181
08011b32 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080045d4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800617c l     F .text	00000008 __fp_lock
08006184 l     F .text	00000008 __fp_unlock
08006198 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011ddc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012220 l     O .rwdata	00000020 lc_ctype_charset
08012200 l     O .rwdata	00000020 lc_message_charset
08012240 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011b64 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
080096c8 l     F .text	000000fc __sprint_r.part.0
08011c98 l     O .rodata	00000010 blanks.4125
08011c88 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c1cc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800eb1c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ec44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ec70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800ed78 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800ee74 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ef58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f140 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080138b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f3f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f544 l     F .text	00000038 alt_dev_reg
08012828 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f820 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800fa24 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080102f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08010790 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080108e8 l     F .text	00000050 alt_get_errno
08010938 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008d08 g     F .text	00000074 _mprec_log10
08008df4 g     F .text	0000008c __any_on
0800b0f4 g     F .text	00000054 _isatty_r
08011b70 g     O .rodata	00000028 __mprec_tinytens
0800f084 g     F .text	0000007c alt_main
08002220 g     F .text	000000b8 _puts_r
08015414 g     O .bss	00000100 alt_irq
0800b148 g     F .text	0000005c _lseek_r
080138c8 g       *ABS*	00000000 __flash_rwdata_start
0800d53c g     F .text	00000084 .hidden __eqdf2
08015514 g       *ABS*	00000000 __alt_heap_start
080021e4 g     F .text	0000003c printf
0800b370 g     F .text	0000009c _wcrtomb_r
080095c0 g     F .text	0000005c __sseek
080064e0 g     F .text	00000010 __sinit
0800b200 g     F .text	00000154 __swbuf_r
08006f58 g     F .text	0000007c _setlocale_r
08006338 g     F .text	00000078 __sfmoreglue
0800f120 g     F .text	00000020 __malloc_unlock
080020bc g     F .text	00000080 UsbGetRetryCnt
08007bb8 g     F .text	0000015c memmove
080001f8 g     F .text	00000050 IO_init
080064c8 g     F .text	00000018 _cleanup
08007e38 g     F .text	000000a8 _Balloc
0800d5c0 g     F .text	000000e0 .hidden __gtdf2
08010d28 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b09c g     F .text	00000058 _fstat_r
080153d0 g     O .bss	00000004 errno
0800953c g     F .text	00000008 __seofread
080153d8 g     O .bss	00000004 alt_argv
0801b888 g       *ABS*	00000000 _gp
0800f3c4 g     F .text	00000030 usleep
080126a8 g     O .rwdata	00000180 alt_fd_list
08010d48 g     F .text	00000090 alt_find_dev
08007a80 g     F .text	00000138 memcpy
0800618c g     F .text	0000000c _cleanup_r
0800e944 g     F .text	000000d0 .hidden __floatsidf
08010870 g     F .text	00000078 alt_io_redirect
0800d6a0 g     F .text	000000e0 .hidden __ltdf2
08011364 g       *ABS*	00000000 __DTOR_END__
080022d8 g     F .text	00000014 puts
08009420 g     F .text	00000074 __fpclassifyd
08008c64 g     F .text	000000a4 __ratio
0800ac00 g     F .text	00000024 __vfiprintf_internal
0800fc20 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080021b8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800c2e8 g     F .text	00000008 .hidden __udivsi3
0800edc8 g     F .text	000000ac isatty
08011bc0 g     O .rodata	000000c8 __mprec_tens
08006fd4 g     F .text	0000000c __locale_charset
080153cc g     O .bss	00000004 __malloc_top_pad
0800175c g     F .text	00000264 UsbGetConfigDesc2
08013890 g     O .rwdata	00000004 __mb_cur_max
08007004 g     F .text	0000000c _localeconv_r
08008260 g     F .text	0000003c __i2b
08006944 g     F .text	000004a4 __sfvwrite_r
08009494 g     F .text	00000054 _sbrk_r
0800b1a4 g     F .text	0000005c _read_r
080138b0 g     O .rwdata	00000004 alt_max_fd
0800adac g     F .text	00000100 _fclose_r
0800614c g     F .text	00000030 fflush
080153c8 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c320 g     F .text	0000089c .hidden __adddf3
08008a0c g     F .text	0000011c __b2d
0800bbb0 g     F .text	0000061c .hidden __umoddi3
0800efa8 g     F .text	000000dc lseek
08013888 g     O .rwdata	00000004 _global_impure_ptr
08008e80 g     F .text	000005a0 _realloc_r
08015514 g       *ABS*	00000000 __bss_end
080106a0 g     F .text	000000f0 alt_iic_isr_register
08010c24 g     F .text	00000104 alt_tick
0800b570 g     F .text	00000640 .hidden __udivdi3
0800aec0 g     F .text	00000184 _fputwc_r
08011b98 g     O .rodata	00000028 __mprec_bigtens
08008044 g     F .text	00000104 __s2b
0800ea14 g     F .text	000000a4 .hidden __floatunsidf
080087b4 g     F .text	00000060 __mcmp
080011bc g     F .text	000000fc UsbSetAddress
08006500 g     F .text	00000018 __fp_lock_all
08010654 g     F .text	0000004c alt_ic_irq_enabled
08010b8c g     F .text	00000098 alt_alarm_stop
080153e0 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08012680 g     O .rwdata	00000028 alt_dev_null
080102dc g     F .text	0000001c alt_dcache_flush_all
08008148 g     F .text	00000068 __hi0bits
080002b4 g     F .text	00000074 IO_read
0800e8bc g     F .text	00000088 .hidden __fixdfsi
080138c8 g       *ABS*	00000000 __ram_rwdata_end
080138a8 g     O .rwdata	00000008 alt_dev_list
0800f444 g     F .text	00000100 write
08011ddc g       *ABS*	00000000 __ram_rodata_end
0800ecc0 g     F .text	000000b8 fstat
0800d6a0 g     F .text	000000e0 .hidden __ledf2
0800213c g     F .text	0000007c UsbPrintMem
0800852c g     F .text	00000140 __pow5mult
080097dc g     F .text	00001424 ___vfiprintf_internal_r
080153c0 g     O .bss	00000004 __nlocale_changed
0800c2f0 g     F .text	00000008 .hidden __umodsi3
08015514 g       *ABS*	00000000 end
0800f75c g     F .text	000000c4 altera_avalon_jtag_uart_init
08011364 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800eab8 g     F .text	00000064 .hidden __clzsi2
0800fe2c g     F .text	00000218 altera_avalon_jtag_uart_write
080064f0 g     F .text	00000004 __sfp_lock_acquire
08007998 g     F .text	000000e8 memchr
08002384 g     F .text	000020fc ___vfprintf_internal_r
08001abc g     F .text	000000fc UsbClassRequest
08006654 g     F .text	000002f0 _free_r
08006fe0 g     F .text	00000010 __locale_mb_cur_max
0801119c g     F .text	00000194 __call_exitprocs
080153bc g     O .bss	00000004 __mlocale_changed
08013894 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080153e4 g     O .bss	00000004 _alt_tick_rate
0800866c g     F .text	00000148 __lshift
080153e8 g     O .bss	00000004 _alt_nticks
0800f190 g     F .text	00000104 read
0800f5b0 g     F .text	00000048 alt_sys_init
08011088 g     F .text	00000114 __register_exitproc
0800829c g     F .text	00000290 __multiply
0800facc g     F .text	00000068 altera_avalon_jtag_uart_close
0800c2f8 g     F .text	00000028 .hidden __mulsi3
08011ddc g       *ABS*	00000000 __ram_rwdata_start
08011364 g       *ABS*	00000000 __ram_rodata_start
080153ec g     O .bss	00000028 __malloc_current_mallinfo
08008b28 g     F .text	0000013c __d2b
080012b8 g     F .text	00000144 UsbGetDeviceDesc1
0800f5f8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010eec g     F .text	000000d4 alt_get_fd
08010184 g     F .text	00000158 alt_busy_sleep
0800ac80 g     F .text	00000054 _close_r
0801100c g     F .text	0000007c memcmp
0800f6b8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015514 g       *ABS*	00000000 __alt_stack_base
0800f708 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080044a4 g     F .text	00000130 __swsetup_r
0800cbbc g     F .text	00000980 .hidden __divdf3
080063b0 g     F .text	00000118 __sfp
08008d7c g     F .text	00000078 __copybits
08012278 g     O .rwdata	00000408 __malloc_av_
080064fc g     F .text	00000004 __sinit_lock_release
0800d780 g     F .text	0000086c .hidden __muldf3
080094e8 g     F .text	00000054 __sread
08002038 g     F .text	00000084 UsbWaitTDListDone
08010dd8 g     F .text	00000114 alt_find_file
08010348 g     F .text	000000a4 alt_dev_llist_insert
0800f100 g     F .text	00000020 __malloc_lock
0800f314 g     F .text	000000b0 sbrk
08005f24 g     F .text	00000228 _fflush_r
0800acd4 g     F .text	000000d8 _calloc_r
080153b4 g       *ABS*	00000000 __bss_start
08007d14 g     F .text	00000124 memset
08000328 g     F .text	00000d4c main
080153dc g     O .bss	00000004 alt_envp
080153c4 g     O .bss	00000004 __malloc_max_total_mem
0800f658 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080019c0 g     F .text	000000fc UsbSetConfig
0800b354 g     F .text	0000001c __swbuf
0800961c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800aeac g     F .text	00000014 fclose
080047fc g     F .text	00001728 _dtoa_r
080071f0 g     F .text	000007a8 _malloc_r
0800b4e4 g     F .text	00000030 __ascii_wctomb
080138b4 g     O .rwdata	00000004 alt_errno
08006de8 g     F .text	000000b8 _fwalk
0800c238 g     F .text	00000054 .hidden __divsi3
08006530 g     F .text	00000124 _malloc_trim_r
08001bb8 g     F .text	00000144 UsbGetHidDesc
08011364 g       *ABS*	00000000 __CTOR_END__
08009624 g     F .text	000000a4 strcmp
08011364 g       *ABS*	00000000 __flash_rodata_start
08011364 g       *ABS*	00000000 __DTOR_LIST__
0800d53c g     F .text	00000084 .hidden __nedf2
080010c8 g     F .text	00000044 UsbRead
0800f57c g     F .text	00000034 alt_irq_init
0800f294 g     F .text	00000080 alt_release_fd
08011ca8 g     O .rodata	00000100 .hidden __clz_tab
080153b8 g     O .bss	00000004 _PathLocale
08010fc0 g     F .text	00000014 atexit
0800ac24 g     F .text	0000005c _write_r
08007010 g     F .text	0000001c setlocale
0801388c g     O .rwdata	00000004 _impure_ptr
080153d4 g     O .bss	00000004 alt_argc
08010448 g     F .text	0000005c _do_dtors
08006ffc g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080089ac g     F .text	00000060 __ulp
08006518 g     F .text	00000018 __fp_unlock_all
080138a0 g     O .rwdata	00000008 alt_fs_list
08001cfc g     F .text	0000033c UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800702c g     F .text	0000000c localeconv
080104c0 g     F .text	00000050 alt_ic_isr_register
080138c8 g       *ABS*	00000000 _edata
08015514 g       *ABS*	00000000 _end
08001074 g     F .text	00000054 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800fb34 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080105b0 g     F .text	000000a4 alt_ic_irq_disable
08009544 g     F .text	0000007c __swrite
08013898 g     O .rwdata	00000004 __malloc_trim_threshold
08006ff0 g     F .text	0000000c __locale_msgcharset
08010fd4 g     F .text	00000038 exit
08006ea0 g     F .text	000000b8 _fwalk_reent
08008814 g     F .text	00000198 __mdiff
0800c28c g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080064f4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08000248 g     F .text	0000006c IO_write
08011330 g     F .text	00000034 _exit
08010044 g     F .text	00000140 alt_alarm_start
08007038 g     F .text	000001b8 __smakebuf_r
080022ec g     F .text	00000098 strlen
08010a2c g     F .text	00000160 open
0800d5c0 g     F .text	000000e0 .hidden __gedf2
0801389c g     O .rwdata	00000004 __wctomb
080097c4 g     F .text	00000018 __sprint_r
080104a4 g     F .text	0000001c alt_icache_flush_all
080138bc g     O .rwdata	00000004 alt_priority_mask
08010510 g     F .text	000000a0 alt_ic_irq_enable
08004480 g     F .text	00000024 __vfprintf_internal
0800b514 g     F .text	0000005c _wctomb_r
0800dfec g     F .text	000008d0 .hidden __subdf3
080081b0 g     F .text	000000b0 __lo0bits
080015d0 g     F .text	0000018c UsbGetConfigDesc1
080138c0 g     O .rwdata	00000008 alt_alarm_list
080103ec g     F .text	0000005c _do_ctors
0800110c g     F .text	000000b0 UsbSoftReset
0800b40c g     F .text	000000d8 wcrtomb
0800eb6c g     F .text	000000d8 close
080013fc g     F .text	000001d4 UsbGetDeviceDesc2
0800eed8 g     F .text	00000080 alt_load
0800b044 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
080064f8 g     F .text	00000004 __sinit_lock_acquire
08007f08 g     F .text	0000013c __multadd
08007ee0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10950504 	addi	r2,r2,21524
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10950504 	addi	r2,r2,21524
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6ae2214 	ori	gp,gp,47240
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	1094ed14 	ori	r2,r2,21428

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d54514 	ori	r3,r3,21780

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800eed80 	call	800eed8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800f0840 	call	800f084 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
 8000204:	00801804 	movi	r2,96
 8000208:	00c00044 	movi	r3,1
 800020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 8000210:	00800c04 	movi	r2,48
 8000214:	00c00044 	movi	r3,1
 8000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 800021c:	00800804 	movi	r2,32
 8000220:	00c00044 	movi	r3,1
 8000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 8000228:	00801404 	movi	r2,80
 800022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 8000230:	00801004 	movi	r2,64
 8000234:	10000015 	stw	zero,0(r2)
}
 8000238:	e037883a 	mov	sp,fp
 800023c:	df000017 	ldw	fp,0(sp)
 8000240:	dec00104 	addi	sp,sp,4
 8000244:	f800283a 	ret

08000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 8000248:	defffd04 	addi	sp,sp,-12
 800024c:	df000215 	stw	fp,8(sp)
 8000250:	df000204 	addi	fp,sp,8
 8000254:	2007883a 	mov	r3,r4
 8000258:	2805883a 	mov	r2,r5
 800025c:	e0fffe05 	stb	r3,-8(fp)
 8000260:	e0bfff0d 	sth	r2,-4(fp)

	*otg_hpi_cs = 0; // active low
 8000264:	00801804 	movi	r2,96
 8000268:	10000005 	stb	zero,0(r2)
	*otg_hpi_address = Address; // set up address
 800026c:	00801404 	movi	r2,80
 8000270:	e0fffe03 	ldbu	r3,-8(fp)
 8000274:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
 8000278:	00801004 	movi	r2,64
 800027c:	e0ffff0b 	ldhu	r3,-4(fp)
 8000280:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 0;
 8000284:	00800804 	movi	r2,32
 8000288:	10000005 	stb	zero,0(r2)
	*otg_hpi_cs = 1; // reset chip to default state
 800028c:	00801804 	movi	r2,96
 8000290:	00c00044 	movi	r3,1
 8000294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 8000298:	00800804 	movi	r2,32
 800029c:	00c00044 	movi	r3,1
 80002a0:	10c00005 	stb	r3,0(r2)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
 80002a4:	e037883a 	mov	sp,fp
 80002a8:	df000017 	ldw	fp,0(sp)
 80002ac:	dec00104 	addi	sp,sp,4
 80002b0:	f800283a 	ret

080002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 80002b4:	defffd04 	addi	sp,sp,-12
 80002b8:	df000215 	stw	fp,8(sp)
 80002bc:	df000204 	addi	fp,sp,8
 80002c0:	2005883a 	mov	r2,r4
 80002c4:	e0bfff05 	stb	r2,-4(fp)
alt_u16 temp;
*otg_hpi_w = 1;
 80002c8:	00800804 	movi	r2,32
 80002cc:	00c00044 	movi	r3,1
 80002d0:	10c00005 	stb	r3,0(r2)
*otg_hpi_cs = 0; // active low
 80002d4:	00801804 	movi	r2,96
 80002d8:	10000005 	stb	zero,0(r2)
*otg_hpi_address = Address; // specify address
 80002dc:	00801404 	movi	r2,80
 80002e0:	e0ffff03 	ldbu	r3,-4(fp)
 80002e4:	10c00015 	stw	r3,0(r2)

*otg_hpi_r = 0;
 80002e8:	00800c04 	movi	r2,48
 80002ec:	10000005 	stb	zero,0(r2)
temp  = *otg_hpi_data;
 80002f0:	00801004 	movi	r2,64
 80002f4:	10800017 	ldw	r2,0(r2)
 80002f8:	e0bffe0d 	sth	r2,-8(fp)
*otg_hpi_cs = 1;
 80002fc:	00801804 	movi	r2,96
 8000300:	00c00044 	movi	r3,1
 8000304:	10c00005 	stb	r3,0(r2)
*otg_hpi_r = 1;
 8000308:	00800c04 	movi	r2,48
 800030c:	00c00044 	movi	r3,1
 8000310:	10c00005 	stb	r3,0(r2)

//printf("%x\n",temp);
return temp;
 8000314:	e0bffe0b 	ldhu	r2,-8(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//

}
 8000318:	e037883a 	mov	sp,fp
 800031c:	df000017 	ldw	fp,0(sp)
 8000320:	dec00104 	addi	sp,sp,4
 8000324:	f800283a 	ret

08000328 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 8000328:	defff904 	addi	sp,sp,-28
 800032c:	dfc00615 	stw	ra,24(sp)
 8000330:	df000515 	stw	fp,20(sp)
 8000334:	df000504 	addi	fp,sp,20
	IO_init();
 8000338:	80001f80 	call	80001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 800033c:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 8000340:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000344:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 8000348:	01020074 	movhi	r4,2049
 800034c:	2104d904 	addi	r4,r4,4964
 8000350:	80022d80 	call	80022d8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000354:	800110c0 	call	800110c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000358:	01005104 	movi	r4,324
 800035c:	000b883a 	mov	r5,zero
 8000360:	80010740 	call	8001074 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8000364:	01302414 	movui	r4,49296
 8000368:	017fffd4 	movui	r5,65535
 800036c:	80010740 	call	8001074 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 8000370:	01006d04 	movi	r4,436
 8000374:	01409604 	movi	r5,600
 8000378:	80010740 	call	8001074 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 800037c:	00811004 	movi	r2,1088
 8000380:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 8000384:	e0bffb0b 	ldhu	r2,-20(fp)
 8000388:	01005084 	movi	r4,322
 800038c:	100b883a 	mov	r5,r2
 8000390:	80010740 	call	8001074 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 8000394:	00808404 	movi	r2,528
 8000398:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 800039c:	e0bffe0b 	ldhu	r2,-8(fp)
 80003a0:	01302314 	movui	r4,49292
 80003a4:	100b883a 	mov	r5,r2
 80003a8:	80010740 	call	8001074 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 80003ac:	01007104 	movi	r4,452
 80003b0:	000b883a 	mov	r5,zero
 80003b4:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003b8:	01007184 	movi	r4,454
 80003bc:	000b883a 	mov	r5,zero
 80003c0:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80003c4:	01007204 	movi	r4,456
 80003c8:	000b883a 	mov	r5,zero
 80003cc:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80003d0:	01007284 	movi	r4,458
 80003d4:	000b883a 	mov	r5,zero
 80003d8:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 80003dc:	01007304 	movi	r4,460
 80003e0:	000b883a 	mov	r5,zero
 80003e4:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 80003e8:	01007384 	movi	r4,462
 80003ec:	000b883a 	mov	r5,zero
 80003f0:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 80003f4:	01007404 	movi	r4,464
 80003f8:	000b883a 	mov	r5,zero
 80003fc:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000400:	01007484 	movi	r4,466
 8000404:	000b883a 	mov	r5,zero
 8000408:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 800040c:	01007504 	movi	r4,468
 8000410:	000b883a 	mov	r5,zero
 8000414:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000418:	01007584 	movi	r4,470
 800041c:	000b883a 	mov	r5,zero
 8000420:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000424:	01007604 	movi	r4,472
 8000428:	000b883a 	mov	r5,zero
 800042c:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000430:	01007684 	movi	r4,474
 8000434:	000b883a 	mov	r5,zero
 8000438:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 800043c:	01007704 	movi	r4,476
 8000440:	000b883a 	mov	r5,zero
 8000444:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000448:	01007784 	movi	r4,478
 800044c:	000b883a 	mov	r5,zero
 8000450:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000454:	01007084 	movi	r4,450
 8000458:	01401c84 	movi	r5,114
 800045c:	80010740 	call	8001074 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000460:	01000044 	movi	r4,1
 8000464:	01738054 	movui	r5,52737
 8000468:	80002480 	call	8000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 800046c:	0001883a 	nop
 8000470:	010000c4 	movi	r4,3
 8000474:	80002b40 	call	80002b4 <IO_read>
 8000478:	10bfffcc 	andi	r2,r2,65535
 800047c:	103ffc26 	beq	r2,zero,8000470 <__alt_data_end+0xfc000470>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000480:	0001883a 	nop
 8000484:	01000044 	movi	r4,1
 8000488:	80002b40 	call	80002b4 <IO_read>
 800048c:	10bfffcc 	andi	r2,r2,65535
 8000490:	1083fb58 	cmpnei	r2,r2,4077
 8000494:	10000826 	beq	r2,zero,80004b8 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 8000498:	01000044 	movi	r4,1
 800049c:	80002b40 	call	80002b4 <IO_read>
 80004a0:	10bfffcc 	andi	r2,r2,65535
 80004a4:	01020074 	movhi	r4,2049
 80004a8:	2104df04 	addi	r4,r4,4988
 80004ac:	100b883a 	mov	r5,r2
 80004b0:	80021e40 	call	80021e4 <printf>
		goto USB_HOT_PLUG;
 80004b4:	003fa706 	br	8000354 <__alt_data_end+0xfc000354>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 80004b8:	01020074 	movhi	r4,2049
 80004bc:	2104e804 	addi	r4,r4,5024
 80004c0:	80021e40 	call	80021e4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 80004c4:	01007084 	movi	r4,450
 80004c8:	01401d04 	movi	r5,116
 80004cc:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 80004d0:	01007104 	movi	r4,452
 80004d4:	01400f04 	movi	r5,60
 80004d8:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80004dc:	01007184 	movi	r4,454
 80004e0:	000b883a 	mov	r5,zero
 80004e4:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 80004e8:	01007204 	movi	r4,456
 80004ec:	000b883a 	mov	r5,zero
 80004f0:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 80004f4:	01007284 	movi	r4,458
 80004f8:	000b883a 	mov	r5,zero
 80004fc:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 8000500:	01007304 	movi	r4,460
 8000504:	000b883a 	mov	r5,zero
 8000508:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 800050c:	01007384 	movi	r4,462
 8000510:	000b883a 	mov	r5,zero
 8000514:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000518:	01007404 	movi	r4,464
 800051c:	000b883a 	mov	r5,zero
 8000520:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000524:	01007484 	movi	r4,466
 8000528:	000b883a 	mov	r5,zero
 800052c:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000530:	01007504 	movi	r4,468
 8000534:	000b883a 	mov	r5,zero
 8000538:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 800053c:	01007584 	movi	r4,470
 8000540:	000b883a 	mov	r5,zero
 8000544:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000548:	01007604 	movi	r4,472
 800054c:	000b883a 	mov	r5,zero
 8000550:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000554:	01007684 	movi	r4,474
 8000558:	000b883a 	mov	r5,zero
 800055c:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 8000560:	01007704 	movi	r4,476
 8000564:	000b883a 	mov	r5,zero
 8000568:	80010740 	call	8001074 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 800056c:	01007784 	movi	r4,478
 8000570:	000b883a 	mov	r5,zero
 8000574:	80010740 	call	8001074 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 8000578:	01000044 	movi	r4,1
 800057c:	01738054 	movui	r5,52737
 8000580:	80002480 	call	8000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 8000584:	0001883a 	nop
 8000588:	01000044 	movi	r4,1
 800058c:	80002b40 	call	80002b4 <IO_read>
 8000590:	10bfffcc 	andi	r2,r2,65535
 8000594:	1083fb58 	cmpnei	r2,r2,4077
 8000598:	10000826 	beq	r2,zero,80005bc <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 800059c:	01000044 	movi	r4,1
 80005a0:	80002b40 	call	80002b4 <IO_read>
 80005a4:	10bfffcc 	andi	r2,r2,65535
 80005a8:	01020074 	movhi	r4,2049
 80005ac:	2104df04 	addi	r4,r4,4988
 80005b0:	100b883a 	mov	r5,r2
 80005b4:	80021e40 	call	80021e4 <printf>
		goto USB_HOT_PLUG;
 80005b8:	003f6606 	br	8000354 <__alt_data_end+0xfc000354>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 80005bc:	00b02284 	movi	r2,-16246
 80005c0:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 80005c4:	008c0004 	movi	r2,12288
 80005c8:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 80005cc:	00880004 	movi	r2,8192
 80005d0:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 80005d4:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80005d8:	10bfffcc 	andi	r2,r2,65535
 80005dc:	1009883a 	mov	r4,r2
 80005e0:	80010c80 	call	80010c8 <UsbRead>
 80005e4:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 80005e8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80005ec:	e0fffb0b 	ldhu	r3,-20(fp)
 80005f0:	1884703a 	and	r2,r3,r2
 80005f4:	10bfffcc 	andi	r2,r2,65535
 80005f8:	1000341e 	bne	r2,zero,80006cc <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 80005fc:	e03ffbc5 	stb	zero,-17(fp)
 8000600:	00001006 	br	8000644 <main+0x31c>
		{
			usleep(5*1000);
 8000604:	0104e204 	movi	r4,5000
 8000608:	800f3c40 	call	800f3c4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 800060c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000610:	10bfffcc 	andi	r2,r2,65535
 8000614:	1009883a 	mov	r4,r2
 8000618:	80010c80 	call	80010c8 <UsbRead>
 800061c:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 8000620:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000624:	e0fffb0b 	ldhu	r3,-20(fp)
 8000628:	1884703a 	and	r2,r3,r2
 800062c:	10bfffcc 	andi	r2,r2,65535
 8000630:	10000126 	beq	r2,zero,8000638 <main+0x310>
 8000634:	00000606 	br	8000650 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 8000638:	e0bffbc3 	ldbu	r2,-17(fp)
 800063c:	10800044 	addi	r2,r2,1
 8000640:	e0bffbc5 	stb	r2,-17(fp)
 8000644:	e0bffbc3 	ldbu	r2,-17(fp)
 8000648:	10800170 	cmpltui	r2,r2,5
 800064c:	103fed1e 	bne	r2,zero,8000604 <__alt_data_end+0xfc000604>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 8000650:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000654:	e0fffb0b 	ldhu	r3,-20(fp)
 8000658:	1884703a 	and	r2,r3,r2
 800065c:	10bfffcc 	andi	r2,r2,65535
 8000660:	1000261e 	bne	r2,zero,80006fc <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 8000664:	01020074 	movhi	r4,2049
 8000668:	2104ec04 	addi	r4,r4,5040
 800066c:	80022d80 	call	80022d8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 8000670:	01020074 	movhi	r4,2049
 8000674:	2104f604 	addi	r4,r4,5080
 8000678:	80022d80 	call	80022d8 <puts>
			while (!(usb_ctl_val & no_device))
 800067c:	00000d06 	br	80006b4 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 8000680:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000684:	10bfffcc 	andi	r2,r2,65535
 8000688:	1009883a 	mov	r4,r2
 800068c:	80010c80 	call	80010c8 <UsbRead>
 8000690:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 8000694:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000698:	e0fffb0b 	ldhu	r3,-20(fp)
 800069c:	1884703a 	and	r2,r3,r2
 80006a0:	10bfffcc 	andi	r2,r2,65535
 80006a4:	10000126 	beq	r2,zero,80006ac <main+0x384>
					goto USB_HOT_PLUG;
 80006a8:	003f2a06 	br	8000354 <__alt_data_end+0xfc000354>

				usleep(2000);
 80006ac:	0101f404 	movi	r4,2000
 80006b0:	800f3c40 	call	800f3c4 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 80006b4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006b8:	e0fffb0b 	ldhu	r3,-20(fp)
 80006bc:	1884703a 	and	r2,r3,r2
 80006c0:	10bfffcc 	andi	r2,r2,65535
 80006c4:	103fee26 	beq	r2,zero,8000680 <__alt_data_end+0xfc000680>
 80006c8:	00000c06 	br	80006fc <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 80006cc:	e0fffb0b 	ldhu	r3,-20(fp)
 80006d0:	e0bffc0b 	ldhu	r2,-16(fp)
 80006d4:	1884703a 	and	r2,r3,r2
 80006d8:	10bfffcc 	andi	r2,r2,65535
 80006dc:	10000426 	beq	r2,zero,80006f0 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
 80006e0:	01020074 	movhi	r4,2049
 80006e4:	21050204 	addi	r4,r4,5128
 80006e8:	80022d80 	call	80022d8 <puts>
 80006ec:	00000306 	br	80006fc <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 80006f0:	01020074 	movhi	r4,2049
 80006f4:	21050904 	addi	r4,r4,5156
 80006f8:	80022d80 	call	80022d8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 80006fc:	80011bc0 	call	80011bc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000700:	00000306 	br	8000710 <main+0x3e8>
	{
		UsbSetAddress();
 8000704:	80011bc0 	call	80011bc <UsbSetAddress>
		usleep(10*1000);
 8000708:	0109c404 	movi	r4,10000
 800070c:	800f3c40 	call	800f3c4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000710:	010000c4 	movi	r4,3
 8000714:	80002b40 	call	80002b4 <IO_read>
 8000718:	10bfffcc 	andi	r2,r2,65535
 800071c:	1080040c 	andi	r2,r2,16
 8000720:	103ff826 	beq	r2,zero,8000704 <__alt_data_end+0xfc000704>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000724:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 8000728:	01000084 	movi	r4,2
 800072c:	01414184 	movi	r5,1286
 8000730:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000734:	0009883a 	mov	r4,zero
 8000738:	80002b40 	call	80002b4 <IO_read>
 800073c:	10bfffcc 	andi	r2,r2,65535
 8000740:	01020074 	movhi	r4,2049
 8000744:	21051004 	addi	r4,r4,5184
 8000748:	100b883a 	mov	r5,r2
 800074c:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 8000750:	01000084 	movi	r4,2
 8000754:	01414204 	movi	r5,1288
 8000758:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800075c:	0009883a 	mov	r4,zero
 8000760:	80002b40 	call	80002b4 <IO_read>
 8000764:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 8000768:	e0bffb0b 	ldhu	r2,-20(fp)
 800076c:	01020074 	movhi	r4,2049
 8000770:	21051b04 	addi	r4,r4,5228
 8000774:	100b883a 	mov	r5,r2
 8000778:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 800077c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000780:	108000e0 	cmpeqi	r2,r2,3
 8000784:	1000031e 	bne	r2,zero,8000794 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000788:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 800078c:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 8000790:	003ef006 	br	8000354 <__alt_data_end+0xfc000354>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 8000794:	01020074 	movhi	r4,2049
 8000798:	21052704 	addi	r4,r4,5276
 800079c:	80022d80 	call	80022d8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 80007a0:	80012b80 	call	80012b8 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007a4:	00000306 	br	80007b4 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 80007a8:	80012b80 	call	80012b8 <UsbGetDeviceDesc1>
		usleep(10*1000);
 80007ac:	0109c404 	movi	r4,10000
 80007b0:	800f3c40 	call	800f3c4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007b4:	010000c4 	movi	r4,3
 80007b8:	80002b40 	call	80002b4 <IO_read>
 80007bc:	10bfffcc 	andi	r2,r2,65535
 80007c0:	1080040c 	andi	r2,r2,16
 80007c4:	103ff826 	beq	r2,zero,80007a8 <__alt_data_end+0xfc0007a8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80007c8:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80007cc:	01000084 	movi	r4,2
 80007d0:	01414184 	movi	r5,1286
 80007d4:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80007d8:	0009883a 	mov	r4,zero
 80007dc:	80002b40 	call	80002b4 <IO_read>
 80007e0:	10bfffcc 	andi	r2,r2,65535
 80007e4:	01020074 	movhi	r4,2049
 80007e8:	21053604 	addi	r4,r4,5336
 80007ec:	100b883a 	mov	r5,r2
 80007f0:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 80007f4:	01000084 	movi	r4,2
 80007f8:	01414204 	movi	r5,1288
 80007fc:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000800:	0009883a 	mov	r4,zero
 8000804:	80002b40 	call	80002b4 <IO_read>
 8000808:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 800080c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000810:	01020074 	movhi	r4,2049
 8000814:	21054104 	addi	r4,r4,5380
 8000818:	100b883a 	mov	r5,r2
 800081c:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000820:	00000206 	br	800082c <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000824:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000828:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 800082c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000830:	108000d8 	cmpnei	r2,r2,3
 8000834:	103ffb1e 	bne	r2,zero,8000824 <__alt_data_end+0xfc000824>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000838:	01020074 	movhi	r4,2049
 800083c:	21054d04 	addi	r4,r4,5428
 8000840:	80022d80 	call	80022d8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 8000844:	80013fc0 	call	80013fc <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000848:	00000306 	br	8000858 <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 800084c:	80013fc0 	call	80013fc <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000850:	0109c404 	movi	r4,10000
 8000854:	800f3c40 	call	800f3c4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000858:	010000c4 	movi	r4,3
 800085c:	80002b40 	call	80002b4 <IO_read>
 8000860:	10bfffcc 	andi	r2,r2,65535
 8000864:	1080040c 	andi	r2,r2,16
 8000868:	103ff826 	beq	r2,zero,800084c <__alt_data_end+0xfc00084c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 800086c:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000870:	01000084 	movi	r4,2
 8000874:	01414184 	movi	r5,1286
 8000878:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 800087c:	0009883a 	mov	r4,zero
 8000880:	80002b40 	call	80002b4 <IO_read>
 8000884:	10bfffcc 	andi	r2,r2,65535
 8000888:	01020074 	movhi	r4,2049
 800088c:	21053604 	addi	r4,r4,5336
 8000890:	100b883a 	mov	r5,r2
 8000894:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000898:	01000084 	movi	r4,2
 800089c:	01414204 	movi	r5,1288
 80008a0:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80008a4:	0009883a 	mov	r4,zero
 80008a8:	80002b40 	call	80002b4 <IO_read>
 80008ac:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80008b0:	e0bffb0b 	ldhu	r2,-20(fp)
 80008b4:	01020074 	movhi	r4,2049
 80008b8:	21054104 	addi	r4,r4,5380
 80008bc:	100b883a 	mov	r5,r2
 80008c0:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 80008c4:	00000206 	br	80008d0 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80008c8:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 80008cc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80008d0:	e0bffb0b 	ldhu	r2,-20(fp)
 80008d4:	108000d8 	cmpnei	r2,r2,3
 80008d8:	103ffb1e 	bne	r2,zero,80008c8 <__alt_data_end+0xfc0008c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 80008dc:	01020074 	movhi	r4,2049
 80008e0:	21056104 	addi	r4,r4,5508
 80008e4:	80022d80 	call	80022d8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 80008e8:	80015d00 	call	80015d0 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008ec:	00000306 	br	80008fc <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 80008f0:	80015d00 	call	80015d0 <UsbGetConfigDesc1>
		usleep(10*1000);
 80008f4:	0109c404 	movi	r4,10000
 80008f8:	800f3c40 	call	800f3c4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80008fc:	010000c4 	movi	r4,3
 8000900:	80002b40 	call	80002b4 <IO_read>
 8000904:	10bfffcc 	andi	r2,r2,65535
 8000908:	1080040c 	andi	r2,r2,16
 800090c:	103ff826 	beq	r2,zero,80008f0 <__alt_data_end+0xfc0008f0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000910:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000914:	01000084 	movi	r4,2
 8000918:	01414184 	movi	r5,1286
 800091c:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000920:	0009883a 	mov	r4,zero
 8000924:	80002b40 	call	80002b4 <IO_read>
 8000928:	10bfffcc 	andi	r2,r2,65535
 800092c:	01020074 	movhi	r4,2049
 8000930:	21057304 	addi	r4,r4,5580
 8000934:	100b883a 	mov	r5,r2
 8000938:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 800093c:	01000084 	movi	r4,2
 8000940:	01414204 	movi	r5,1288
 8000944:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000948:	0009883a 	mov	r4,zero
 800094c:	80002b40 	call	80002b4 <IO_read>
 8000950:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000954:	e0bffb0b 	ldhu	r2,-20(fp)
 8000958:	01020074 	movhi	r4,2049
 800095c:	21057e04 	addi	r4,r4,5624
 8000960:	100b883a 	mov	r5,r2
 8000964:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000968:	00000206 	br	8000974 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 800096c:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000970:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000974:	e0bffb0b 	ldhu	r2,-20(fp)
 8000978:	108000d8 	cmpnei	r2,r2,3
 800097c:	103ffb1e 	bne	r2,zero,800096c <__alt_data_end+0xfc00096c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 8000980:	01020074 	movhi	r4,2049
 8000984:	21058a04 	addi	r4,r4,5672
 8000988:	80022d80 	call	80022d8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 800098c:	800175c0 	call	800175c <UsbGetConfigDesc2>

	usleep(100*1000);
 8000990:	010000b4 	movhi	r4,2
 8000994:	2121a804 	addi	r4,r4,-31072
 8000998:	800f3c40 	call	800f3c4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800099c:	00000306 	br	80009ac <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 80009a0:	800175c0 	call	800175c <UsbGetConfigDesc2>
		usleep(10*1000);
 80009a4:	0109c404 	movi	r4,10000
 80009a8:	800f3c40 	call	800f3c4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009ac:	010000c4 	movi	r4,3
 80009b0:	80002b40 	call	80002b4 <IO_read>
 80009b4:	10bfffcc 	andi	r2,r2,65535
 80009b8:	1080040c 	andi	r2,r2,16
 80009bc:	103ff826 	beq	r2,zero,80009a0 <__alt_data_end+0xfc0009a0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80009c0:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80009c4:	01000084 	movi	r4,2
 80009c8:	01414184 	movi	r5,1286
 80009cc:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80009d0:	0009883a 	mov	r4,zero
 80009d4:	80002b40 	call	80002b4 <IO_read>
 80009d8:	10bfffcc 	andi	r2,r2,65535
 80009dc:	01020074 	movhi	r4,2049
 80009e0:	21059d04 	addi	r4,r4,5748
 80009e4:	100b883a 	mov	r5,r2
 80009e8:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 80009ec:	01000084 	movi	r4,2
 80009f0:	01414204 	movi	r5,1288
 80009f4:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80009f8:	0009883a 	mov	r4,zero
 80009fc:	80002b40 	call	80002b4 <IO_read>
 8000a00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8000a04:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a08:	01020074 	movhi	r4,2049
 8000a0c:	2105a804 	addi	r4,r4,5792
 8000a10:	100b883a 	mov	r5,r2
 8000a14:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000a18:	00000206 	br	8000a24 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a1c:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000a20:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a24:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a28:	108000d8 	cmpnei	r2,r2,3
 8000a2c:	103ffb1e 	bne	r2,zero,8000a1c <__alt_data_end+0xfc000a1c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000a30:	01020074 	movhi	r4,2049
 8000a34:	2105b404 	addi	r4,r4,5840
 8000a38:	80022d80 	call	80022d8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8000a3c:	01000084 	movi	r4,2
 8000a40:	01415b04 	movi	r5,1388
 8000a44:	80002480 	call	8000248 <IO_write>
	code = IO_read(HPI_DATA);
 8000a48:	0009883a 	mov	r4,zero
 8000a4c:	80002b40 	call	80002b4 <IO_read>
 8000a50:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 8000a54:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a58:	108000cc 	andi	r2,r2,3
 8000a5c:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000a60:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a64:	01020074 	movhi	r4,2049
 8000a68:	2105c704 	addi	r4,r4,5916
 8000a6c:	100b883a 	mov	r5,r2
 8000a70:	80021e40 	call	80021e4 <printf>

	if (code == 0x01)
 8000a74:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a78:	10800058 	cmpnei	r2,r2,1
 8000a7c:	1000041e 	bne	r2,zero,8000a90 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000a80:	01020074 	movhi	r4,2049
 8000a84:	2105ca04 	addi	r4,r4,5928
 8000a88:	80022d80 	call	80022d8 <puts>
 8000a8c:	00000306 	br	8000a9c <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000a90:	01020074 	movhi	r4,2049
 8000a94:	2105d904 	addi	r4,r4,5988
 8000a98:	80022d80 	call	80022d8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8000a9c:	01000084 	movi	r4,2
 8000aa0:	01415d84 	movi	r5,1398
 8000aa4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
 8000aa8:	0009883a 	mov	r4,zero
 8000aac:	0141cfc4 	movi	r5,1855
 8000ab0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
 8000ab4:	0009883a 	mov	r4,zero
 8000ab8:	01604154 	movui	r5,33029
 8000abc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
 8000ac0:	0009883a 	mov	r4,zero
 8000ac4:	014000c4 	movi	r5,3
 8000ac8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000acc:	0009883a 	mov	r4,zero
 8000ad0:	01400204 	movi	r5,8
 8000ad4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8000ad8:	0009883a 	mov	r4,zero
 8000adc:	016b0294 	movui	r5,44042
 8000ae0:	80002480 	call	8000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8000ae4:	01006c04 	movi	r4,432
 8000ae8:	01415d84 	movi	r5,1398
 8000aec:	80010740 	call	8001074 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8000af0:	01000084 	movi	r4,2
 8000af4:	01415f04 	movi	r5,1404
 8000af8:	80002480 	call	8000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8000afc:	0009883a 	mov	r4,zero
 8000b00:	80002b40 	call	80002b4 <IO_read>
 8000b04:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000b08:	e0bfff03 	ldbu	r2,-4(fp)
 8000b0c:	01020074 	movhi	r4,2049
 8000b10:	2105e204 	addi	r4,r4,6024
 8000b14:	100b883a 	mov	r5,r2
 8000b18:	80021e40 	call	80021e4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8000b1c:	80019c00 	call	80019c0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b20:	00000306 	br	8000b30 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8000b24:	80019c00 	call	80019c0 <UsbSetConfig>
		usleep(10*1000);
 8000b28:	0109c404 	movi	r4,10000
 8000b2c:	800f3c40 	call	800f3c4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b30:	010000c4 	movi	r4,3
 8000b34:	80002b40 	call	80002b4 <IO_read>
 8000b38:	10bfffcc 	andi	r2,r2,65535
 8000b3c:	1080040c 	andi	r2,r2,16
 8000b40:	103ff826 	beq	r2,zero,8000b24 <__alt_data_end+0xfc000b24>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b44:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000b48:	01000084 	movi	r4,2
 8000b4c:	01414184 	movi	r5,1286
 8000b50:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000b54:	0009883a 	mov	r4,zero
 8000b58:	80002b40 	call	80002b4 <IO_read>
 8000b5c:	10bfffcc 	andi	r2,r2,65535
 8000b60:	01020074 	movhi	r4,2049
 8000b64:	2105ec04 	addi	r4,r4,6064
 8000b68:	100b883a 	mov	r5,r2
 8000b6c:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000b70:	01000084 	movi	r4,2
 8000b74:	01414204 	movi	r5,1288
 8000b78:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000b7c:	0009883a 	mov	r4,zero
 8000b80:	80002b40 	call	80002b4 <IO_read>
 8000b84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000b88:	e0bffb0b 	ldhu	r2,-20(fp)
 8000b8c:	01020074 	movhi	r4,2049
 8000b90:	2105f704 	addi	r4,r4,6108
 8000b94:	100b883a 	mov	r5,r2
 8000b98:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000b9c:	00000206 	br	8000ba8 <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000ba0:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000ba4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000ba8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000bac:	108000d8 	cmpnei	r2,r2,3
 8000bb0:	103ffb1e 	bne	r2,zero,8000ba0 <__alt_data_end+0xfc000ba0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000bb4:	01020074 	movhi	r4,2049
 8000bb8:	21060304 	addi	r4,r4,6156
 8000bbc:	80022d80 	call	80022d8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000bc0:	8001abc0 	call	8001abc <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bc4:	00000306 	br	8000bd4 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000bc8:	8001abc0 	call	8001abc <UsbClassRequest>
		usleep(10*1000);
 8000bcc:	0109c404 	movi	r4,10000
 8000bd0:	800f3c40 	call	800f3c4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000bd4:	010000c4 	movi	r4,3
 8000bd8:	80002b40 	call	80002b4 <IO_read>
 8000bdc:	10bfffcc 	andi	r2,r2,65535
 8000be0:	1080040c 	andi	r2,r2,16
 8000be4:	103ff826 	beq	r2,zero,8000bc8 <__alt_data_end+0xfc000bc8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000be8:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000bec:	01000084 	movi	r4,2
 8000bf0:	01414184 	movi	r5,1286
 8000bf4:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000bf8:	0009883a 	mov	r4,zero
 8000bfc:	80002b40 	call	80002b4 <IO_read>
 8000c00:	10bfffcc 	andi	r2,r2,65535
 8000c04:	01020074 	movhi	r4,2049
 8000c08:	21061504 	addi	r4,r4,6228
 8000c0c:	100b883a 	mov	r5,r2
 8000c10:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000c14:	01000084 	movi	r4,2
 8000c18:	01414204 	movi	r5,1288
 8000c1c:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000c20:	0009883a 	mov	r4,zero
 8000c24:	80002b40 	call	80002b4 <IO_read>
 8000c28:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000c2c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c30:	01020074 	movhi	r4,2049
 8000c34:	21062004 	addi	r4,r4,6272
 8000c38:	100b883a 	mov	r5,r2
 8000c3c:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000c40:	00000206 	br	8000c4c <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c44:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000c48:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c4c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c50:	108000d8 	cmpnei	r2,r2,3
 8000c54:	103ffb1e 	bne	r2,zero,8000c44 <__alt_data_end+0xfc000c44>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000c58:	01020074 	movhi	r4,2049
 8000c5c:	21062c04 	addi	r4,r4,6320
 8000c60:	80022d80 	call	80022d8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000c64:	8001bb80 	call	8001bb8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c68:	00000306 	br	8000c78 <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000c6c:	8001bb80 	call	8001bb8 <UsbGetHidDesc>
		usleep(10*1000);
 8000c70:	0109c404 	movi	r4,10000
 8000c74:	800f3c40 	call	800f3c4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c78:	010000c4 	movi	r4,3
 8000c7c:	80002b40 	call	80002b4 <IO_read>
 8000c80:	10bfffcc 	andi	r2,r2,65535
 8000c84:	1080040c 	andi	r2,r2,16
 8000c88:	103ff826 	beq	r2,zero,8000c6c <__alt_data_end+0xfc000c6c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c8c:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000c90:	01000084 	movi	r4,2
 8000c94:	01414184 	movi	r5,1286
 8000c98:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000c9c:	0009883a 	mov	r4,zero
 8000ca0:	80002b40 	call	80002b4 <IO_read>
 8000ca4:	10bfffcc 	andi	r2,r2,65535
 8000ca8:	01020074 	movhi	r4,2049
 8000cac:	21061504 	addi	r4,r4,6228
 8000cb0:	100b883a 	mov	r5,r2
 8000cb4:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000cb8:	01000084 	movi	r4,2
 8000cbc:	01414204 	movi	r5,1288
 8000cc0:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000cc4:	0009883a 	mov	r4,zero
 8000cc8:	80002b40 	call	80002b4 <IO_read>
 8000ccc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000cd0:	e0bffb0b 	ldhu	r2,-20(fp)
 8000cd4:	01020074 	movhi	r4,2049
 8000cd8:	21062004 	addi	r4,r4,6272
 8000cdc:	100b883a 	mov	r5,r2
 8000ce0:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000ce4:	00000206 	br	8000cf0 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000ce8:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000cec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000cf0:	e0bffb0b 	ldhu	r2,-20(fp)
 8000cf4:	108000d8 	cmpnei	r2,r2,3
 8000cf8:	103ffb1e 	bne	r2,zero,8000ce8 <__alt_data_end+0xfc000ce8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000cfc:	01020074 	movhi	r4,2049
 8000d00:	21063e04 	addi	r4,r4,6392
 8000d04:	80022d80 	call	80022d8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000d08:	8001cfc0 	call	8001cfc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d0c:	00000306 	br	8000d1c <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000d10:	8001cfc0 	call	8001cfc <UsbGetReportDesc>
		usleep(10*1000);
 8000d14:	0109c404 	movi	r4,10000
 8000d18:	800f3c40 	call	800f3c4 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d1c:	010000c4 	movi	r4,3
 8000d20:	80002b40 	call	80002b4 <IO_read>
 8000d24:	10bfffcc 	andi	r2,r2,65535
 8000d28:	1080040c 	andi	r2,r2,16
 8000d2c:	103ff826 	beq	r2,zero,8000d10 <__alt_data_end+0xfc000d10>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d30:	80020380 	call	8002038 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000d34:	01000084 	movi	r4,2
 8000d38:	01414184 	movi	r5,1286
 8000d3c:	80002480 	call	8000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000d40:	0009883a 	mov	r4,zero
 8000d44:	80002b40 	call	80002b4 <IO_read>
 8000d48:	10bfffcc 	andi	r2,r2,65535
 8000d4c:	01020074 	movhi	r4,2049
 8000d50:	21065204 	addi	r4,r4,6472
 8000d54:	100b883a 	mov	r5,r2
 8000d58:	80021e40 	call	80021e4 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000d5c:	01000084 	movi	r4,2
 8000d60:	01414204 	movi	r5,1288
 8000d64:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000d68:	0009883a 	mov	r4,zero
 8000d6c:	80002b40 	call	80002b4 <IO_read>
 8000d70:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000d74:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d78:	01020074 	movhi	r4,2049
 8000d7c:	21065e04 	addi	r4,r4,6520
 8000d80:	100b883a 	mov	r5,r2
 8000d84:	80021e40 	call	80021e4 <printf>
	while (usb_ctl_val != 0x03)
 8000d88:	00000206 	br	8000d94 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d8c:	80020bc0 	call	80020bc <UsbGetRetryCnt>
 8000d90:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000d94:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d98:	108000d8 	cmpnei	r2,r2,3
 8000d9c:	103ffb1e 	bne	r2,zero,8000d8c <__alt_data_end+0xfc000d8c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000da0:	01020074 	movhi	r4,2049
 8000da4:	21066a04 	addi	r4,r4,6568
 8000da8:	80022d80 	call	80022d8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000dac:	0109c404 	movi	r4,10000
 8000db0:	800f3c40 	call	800f3c4 <usleep>
	while(1)
	{
		toggle++;
 8000db4:	e0bffb83 	ldbu	r2,-18(fp)
 8000db8:	10800044 	addi	r2,r2,1
 8000dbc:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8000dc0:	01000084 	movi	r4,2
 8000dc4:	01414004 	movi	r5,1280
 8000dc8:	80002480 	call	8000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8000dcc:	0009883a 	mov	r4,zero
 8000dd0:	01414704 	movi	r5,1308
 8000dd4:	80002480 	call	8000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000dd8:	e0bfff03 	ldbu	r2,-4(fp)
 8000ddc:	108003cc 	andi	r2,r2,15
 8000de0:	0009883a 	mov	r4,zero
 8000de4:	100b883a 	mov	r5,r2
 8000de8:	80002480 	call	8000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000dec:	0009883a 	mov	r4,zero
 8000df0:	0140a444 	movi	r5,657
 8000df4:	80002480 	call	8000248 <IO_write>
		if(toggle%2)
 8000df8:	e0bffb83 	ldbu	r2,-18(fp)
 8000dfc:	1080004c 	andi	r2,r2,1
 8000e00:	10803fcc 	andi	r2,r2,255
 8000e04:	10000426 	beq	r2,zero,8000e18 <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 8000e08:	0009883a 	mov	r4,zero
 8000e0c:	01400044 	movi	r5,1
 8000e10:	80002480 	call	8000248 <IO_write>
 8000e14:	00000306 	br	8000e24 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 8000e18:	0009883a 	mov	r4,zero
 8000e1c:	01401044 	movi	r5,65
 8000e20:	80002480 	call	8000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 8000e24:	0009883a 	mov	r4,zero
 8000e28:	014004c4 	movi	r5,19
 8000e2c:	80002480 	call	8000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 8000e30:	0009883a 	mov	r4,zero
 8000e34:	000b883a 	mov	r5,zero
 8000e38:	80002480 	call	8000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000e3c:	01006c04 	movi	r4,432
 8000e40:	01414004 	movi	r5,1280
 8000e44:	80010740 	call	8001074 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e48:	00002406 	br	8000edc <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 8000e4c:	01000084 	movi	r4,2
 8000e50:	01414004 	movi	r5,1280
 8000e54:	80002480 	call	8000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8000e58:	0009883a 	mov	r4,zero
 8000e5c:	01414704 	movi	r5,1308
 8000e60:	80002480 	call	8000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000e64:	e0bfff03 	ldbu	r2,-4(fp)
 8000e68:	108003cc 	andi	r2,r2,15
 8000e6c:	0009883a 	mov	r4,zero
 8000e70:	100b883a 	mov	r5,r2
 8000e74:	80002480 	call	8000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000e78:	0009883a 	mov	r4,zero
 8000e7c:	0140a444 	movi	r5,657
 8000e80:	80002480 	call	8000248 <IO_write>
			if(toggle%2)
 8000e84:	e0bffb83 	ldbu	r2,-18(fp)
 8000e88:	1080004c 	andi	r2,r2,1
 8000e8c:	10803fcc 	andi	r2,r2,255
 8000e90:	10000426 	beq	r2,zero,8000ea4 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 8000e94:	0009883a 	mov	r4,zero
 8000e98:	01400044 	movi	r5,1
 8000e9c:	80002480 	call	8000248 <IO_write>
 8000ea0:	00000306 	br	8000eb0 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 8000ea4:	0009883a 	mov	r4,zero
 8000ea8:	01401044 	movi	r5,65
 8000eac:	80002480 	call	8000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 8000eb0:	0009883a 	mov	r4,zero
 8000eb4:	014004c4 	movi	r5,19
 8000eb8:	80002480 	call	8000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8000ebc:	0009883a 	mov	r4,zero
 8000ec0:	000b883a 	mov	r5,zero
 8000ec4:	80002480 	call	8000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000ec8:	01006c04 	movi	r4,432
 8000ecc:	01414004 	movi	r5,1280
 8000ed0:	80010740 	call	8001074 <UsbWrite>
			usleep(10*1000);
 8000ed4:	0109c404 	movi	r4,10000
 8000ed8:	800f3c40 	call	800f3c4 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000edc:	010000c4 	movi	r4,3
 8000ee0:	80002b40 	call	80002b4 <IO_read>
 8000ee4:	10bfffcc 	andi	r2,r2,65535
 8000ee8:	1080040c 	andi	r2,r2,16
 8000eec:	103fd726 	beq	r2,zero,8000e4c <__alt_data_end+0xfc000e4c>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
 8000ef0:	80020380 	call	8002038 <UsbWaitTDListDone>
 8000ef4:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
 8000ef8:	01000084 	movi	r4,2
 8000efc:	01414784 	movi	r5,1310
 8000f00:	80002480 	call	8000248 <IO_write>
		keycode = IO_read(HPI_DATA);
 8000f04:	0009883a 	mov	r4,zero
 8000f08:	80002b40 	call	80002b4 <IO_read>
 8000f0c:	10bfffcc 	andi	r2,r2,65535
 8000f10:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000f14:	01020074 	movhi	r4,2049
 8000f18:	21067e04 	addi	r4,r4,6648
 8000f1c:	e17ffd17 	ldw	r5,-12(fp)
 8000f20:	80021e40 	call	80021e4 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
 8000f24:	e0bffd17 	ldw	r2,-12(fp)
 8000f28:	10c03fcc 	andi	r3,r2,255
 8000f2c:	00801c04 	movi	r2,112
 8000f30:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
 8000f34:	01003204 	movi	r4,200
 8000f38:	800f3c40 	call	800f3c4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000f3c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f40:	10bfffcc 	andi	r2,r2,65535
 8000f44:	1009883a 	mov	r4,r2
 8000f48:	80010c80 	call	80010c8 <UsbRead>
 8000f4c:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 8000f50:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f54:	e0fffb0b 	ldhu	r3,-20(fp)
 8000f58:	1884703a 	and	r2,r3,r2
 8000f5c:	10bfffcc 	andi	r2,r2,65535
 8000f60:	1000201e 	bne	r2,zero,8000fe4 <main+0xcbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000f64:	e03ffbc5 	stb	zero,-17(fp)
 8000f68:	00001006 	br	8000fac <main+0xc84>
			{
				usleep(5*1000);
 8000f6c:	0104e204 	movi	r4,5000
 8000f70:	800f3c40 	call	800f3c4 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000f74:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f78:	10bfffcc 	andi	r2,r2,65535
 8000f7c:	1009883a 	mov	r4,r2
 8000f80:	80010c80 	call	80010c8 <UsbRead>
 8000f84:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 8000f88:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f8c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000f90:	1884703a 	and	r2,r3,r2
 8000f94:	10bfffcc 	andi	r2,r2,65535
 8000f98:	10000126 	beq	r2,zero,8000fa0 <main+0xc78>
 8000f9c:	00000606 	br	8000fb8 <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000fa0:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fa4:	10800044 	addi	r2,r2,1
 8000fa8:	e0bffbc5 	stb	r2,-17(fp)
 8000fac:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fb0:	108001f0 	cmpltui	r2,r2,7
 8000fb4:	103fed1e 	bne	r2,zero,8000f6c <__alt_data_end+0xfc000f6c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000fb8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000fbc:	e0fffb0b 	ldhu	r3,-20(fp)
 8000fc0:	1884703a 	and	r2,r3,r2
 8000fc4:	10bfffcc 	andi	r2,r2,65535
 8000fc8:	1000061e 	bne	r2,zero,8000fe4 <main+0xcbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000fcc:	01020074 	movhi	r4,2049
 8000fd0:	21068704 	addi	r4,r4,6684
 8000fd4:	80022d80 	call	80022d8 <puts>
				printf("[INFO]: please insert again!!! \n");
 8000fd8:	01020074 	movhi	r4,2049
 8000fdc:	21069204 	addi	r4,r4,6728
 8000fe0:	80022d80 	call	80022d8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 8000fe4:	00001d06 	br	800105c <main+0xd34>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8000fe8:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000fec:	10bfffcc 	andi	r2,r2,65535
 8000ff0:	1009883a 	mov	r4,r2
 8000ff4:	80010c80 	call	80010c8 <UsbRead>
 8000ff8:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8000ffc:	0104e204 	movi	r4,5000
 8001000:	800f3c40 	call	800f3c4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001004:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001008:	10bfffcc 	andi	r2,r2,65535
 800100c:	1009883a 	mov	r4,r2
 8001010:	80010c80 	call	80010c8 <UsbRead>
 8001014:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001018:	0104e204 	movi	r4,5000
 800101c:	800f3c40 	call	800f3c4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001020:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001024:	10bfffcc 	andi	r2,r2,65535
 8001028:	1009883a 	mov	r4,r2
 800102c:	80010c80 	call	80010c8 <UsbRead>
 8001030:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001034:	0104e204 	movi	r4,5000
 8001038:	800f3c40 	call	800f3c4 <usleep>

			if(usb_ctl_val & no_device)
 800103c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001040:	e0fffb0b 	ldhu	r3,-20(fp)
 8001044:	1884703a 	and	r2,r3,r2
 8001048:	10bfffcc 	andi	r2,r2,65535
 800104c:	10000126 	beq	r2,zero,8001054 <main+0xd2c>
				goto USB_HOT_PLUG;
 8001050:	003cc006 	br	8000354 <__alt_data_end+0xfc000354>

			usleep(200);
 8001054:	01003204 	movi	r4,200
 8001058:	800f3c40 	call	800f3c4 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 800105c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001060:	e0fffb0b 	ldhu	r3,-20(fp)
 8001064:	1884703a 	and	r2,r3,r2
 8001068:	10bfffcc 	andi	r2,r2,65535
 800106c:	103fde26 	beq	r2,zero,8000fe8 <__alt_data_end+0xfc000fe8>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 8001070:	003f5006 	br	8000db4 <__alt_data_end+0xfc000db4>

08001074 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8001074:	defffc04 	addi	sp,sp,-16
 8001078:	dfc00315 	stw	ra,12(sp)
 800107c:	df000215 	stw	fp,8(sp)
 8001080:	df000204 	addi	fp,sp,8
 8001084:	2007883a 	mov	r3,r4
 8001088:	2805883a 	mov	r2,r5
 800108c:	e0fffe0d 	sth	r3,-8(fp)
 8001090:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR,Address);
 8001094:	e0bffe0b 	ldhu	r2,-8(fp)
 8001098:	01000084 	movi	r4,2
 800109c:	100b883a 	mov	r5,r2
 80010a0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,Data);
 80010a4:	e0bfff0b 	ldhu	r2,-4(fp)
 80010a8:	0009883a 	mov	r4,zero
 80010ac:	100b883a 	mov	r5,r2
 80010b0:	80002480 	call	8000248 <IO_write>

}
 80010b4:	e037883a 	mov	sp,fp
 80010b8:	dfc00117 	ldw	ra,4(sp)
 80010bc:	df000017 	ldw	fp,0(sp)
 80010c0:	dec00204 	addi	sp,sp,8
 80010c4:	f800283a 	ret

080010c8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 80010c8:	defffd04 	addi	sp,sp,-12
 80010cc:	dfc00215 	stw	ra,8(sp)
 80010d0:	df000115 	stw	fp,4(sp)
 80010d4:	df000104 	addi	fp,sp,4
 80010d8:	2005883a 	mov	r2,r4
 80010dc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR,Address);
 80010e0:	e0bfff0b 	ldhu	r2,-4(fp)
 80010e4:	01000084 	movi	r4,2
 80010e8:	100b883a 	mov	r5,r2
 80010ec:	80002480 	call	8000248 <IO_write>
	return IO_read(HPI_DATA);
 80010f0:	0009883a 	mov	r4,zero
 80010f4:	80002b40 	call	80002b4 <IO_read>


}
 80010f8:	e037883a 	mov	sp,fp
 80010fc:	dfc00117 	ldw	ra,4(sp)
 8001100:	df000017 	ldw	fp,0(sp)
 8001104:	dec00204 	addi	sp,sp,8
 8001108:	f800283a 	ret

0800110c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 800110c:	defffe04 	addi	sp,sp,-8
 8001110:	dfc00115 	stw	ra,4(sp)
 8001114:	df000015 	stw	fp,0(sp)
 8001118:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 800111c:	01000044 	movi	r4,1
 8001120:	017e9414 	movui	r5,64080
 8001124:	80002480 	call	8000248 <IO_write>
	usleep(100000);
 8001128:	010000b4 	movhi	r4,2
 800112c:	2121a804 	addi	r4,r4,-31072
 8001130:	800f3c40 	call	800f3c4 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8001134:	01020074 	movhi	r4,2049
 8001138:	21069a04 	addi	r4,r4,6760
 800113c:	80022d80 	call	80022d8 <puts>

	usleep(500000);
 8001140:	01000234 	movhi	r4,8
 8001144:	21284804 	addi	r4,r4,-24288
 8001148:	800f3c40 	call	800f3c4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 800114c:	01020074 	movhi	r4,2049
 8001150:	2106a104 	addi	r4,r4,6788
 8001154:	80022d80 	call	80022d8 <puts>
	IO_read(HPI_MAILBOX);
 8001158:	01000044 	movi	r4,1
 800115c:	80002b40 	call	80002b4 <IO_read>
	IO_read(HPI_STATUS);
 8001160:	010000c4 	movi	r4,3
 8001164:	80002b40 	call	80002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8001168:	01005104 	movi	r4,324
 800116c:	80010c80 	call	80010c8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8001170:	01005104 	movi	r4,324
 8001174:	000b883a 	mov	r5,zero
 8001178:	80010740 	call	8001074 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 800117c:	01005204 	movi	r4,328
 8001180:	80010c80 	call	80010c8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 8001184:	01005204 	movi	r4,328
 8001188:	000b883a 	mov	r5,zero
 800118c:	80010740 	call	8001074 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 8001190:	01302414 	movui	r4,49296
 8001194:	017fffd4 	movui	r5,65535
 8001198:	80010740 	call	8001074 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 800119c:	01302c14 	movui	r4,49328
 80011a0:	017fffd4 	movui	r5,65535
 80011a4:	80010740 	call	8001074 <UsbWrite>
}
 80011a8:	e037883a 	mov	sp,fp
 80011ac:	dfc00117 	ldw	ra,4(sp)
 80011b0:	df000017 	ldw	fp,0(sp)
 80011b4:	dec00204 	addi	sp,sp,8
 80011b8:	f800283a 	ret

080011bc <UsbSetAddress>:


void UsbSetAddress()
{
 80011bc:	defffe04 	addi	sp,sp,-8
 80011c0:	dfc00115 	stw	ra,4(sp)
 80011c4:	df000015 	stw	fp,0(sp)
 80011c8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80011cc:	01000084 	movi	r4,2
 80011d0:	01414004 	movi	r5,1280
 80011d4:	80002480 	call	8000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 80011d8:	0009883a 	mov	r4,zero
 80011dc:	01414304 	movi	r5,1292
 80011e0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80011e4:	0009883a 	mov	r4,zero
 80011e8:	01400204 	movi	r5,8
 80011ec:	80002480 	call	8000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 80011f0:	0009883a 	mov	r4,zero
 80011f4:	01403404 	movi	r5,208
 80011f8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80011fc:	0009883a 	mov	r4,zero
 8001200:	01400044 	movi	r5,1
 8001204:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001208:	0009883a 	mov	r4,zero
 800120c:	014004c4 	movi	r5,19
 8001210:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001214:	0009883a 	mov	r4,zero
 8001218:	01414504 	movi	r5,1300
 800121c:	80002480 	call	8000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 8001220:	0009883a 	mov	r4,zero
 8001224:	01414004 	movi	r5,1280
 8001228:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
 800122c:	0009883a 	mov	r4,zero
 8001230:	01400084 	movi	r5,2
 8001234:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001238:	0009883a 	mov	r4,zero
 800123c:	000b883a 	mov	r5,zero
 8001240:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001244:	0009883a 	mov	r4,zero
 8001248:	000b883a 	mov	r5,zero
 800124c:	80002480 	call	8000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8001250:	0009883a 	mov	r4,zero
 8001254:	000b883a 	mov	r5,zero
 8001258:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 800125c:	0009883a 	mov	r4,zero
 8001260:	000b883a 	mov	r5,zero
 8001264:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 8001268:	0009883a 	mov	r4,zero
 800126c:	01402404 	movi	r5,144
 8001270:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001274:	0009883a 	mov	r4,zero
 8001278:	01401044 	movi	r5,65
 800127c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001280:	0009883a 	mov	r4,zero
 8001284:	014004c4 	movi	r5,19
 8001288:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 800128c:	0009883a 	mov	r4,zero
 8001290:	000b883a 	mov	r5,zero
 8001294:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001298:	01006c04 	movi	r4,432
 800129c:	01414004 	movi	r5,1280
 80012a0:	80010740 	call	8001074 <UsbWrite>
}
 80012a4:	e037883a 	mov	sp,fp
 80012a8:	dfc00117 	ldw	ra,4(sp)
 80012ac:	df000017 	ldw	fp,0(sp)
 80012b0:	dec00204 	addi	sp,sp,8
 80012b4:	f800283a 	ret

080012b8 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80012b8:	defffe04 	addi	sp,sp,-8
 80012bc:	dfc00115 	stw	ra,4(sp)
 80012c0:	df000015 	stw	fp,0(sp)
 80012c4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80012c8:	01000084 	movi	r4,2
 80012cc:	01414004 	movi	r5,1280
 80012d0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80012d4:	0009883a 	mov	r4,zero
 80012d8:	01414304 	movi	r5,1292
 80012dc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80012e0:	0009883a 	mov	r4,zero
 80012e4:	01400204 	movi	r5,8
 80012e8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80012ec:	0009883a 	mov	r4,zero
 80012f0:	0140b404 	movi	r5,720
 80012f4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 80012f8:	0009883a 	mov	r4,zero
 80012fc:	01400044 	movi	r5,1
 8001300:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001304:	0009883a 	mov	r4,zero
 8001308:	014004c4 	movi	r5,19
 800130c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001310:	0009883a 	mov	r4,zero
 8001314:	01414504 	movi	r5,1300
 8001318:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 800131c:	0009883a 	mov	r4,zero
 8001320:	0141a004 	movi	r5,1664
 8001324:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 8001328:	0009883a 	mov	r4,zero
 800132c:	01404004 	movi	r5,256
 8001330:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001334:	0009883a 	mov	r4,zero
 8001338:	000b883a 	mov	r5,zero
 800133c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
 8001340:	0009883a 	mov	r4,zero
 8001344:	01400204 	movi	r5,8
 8001348:	80002480 	call	8000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 800134c:	0009883a 	mov	r4,zero
 8001350:	01414b04 	movi	r5,1324
 8001354:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 8001358:	0009883a 	mov	r4,zero
 800135c:	01400204 	movi	r5,8
 8001360:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 8001364:	0009883a 	mov	r4,zero
 8001368:	0140a404 	movi	r5,656
 800136c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 8001370:	0009883a 	mov	r4,zero
 8001374:	01401044 	movi	r5,65
 8001378:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 800137c:	0009883a 	mov	r4,zero
 8001380:	014004c4 	movi	r5,19
 8001384:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
 8001388:	0009883a 	mov	r4,zero
 800138c:	01414804 	movi	r5,1312
 8001390:	80002480 	call	8000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 8001394:	0009883a 	mov	r4,zero
 8001398:	000b883a 	mov	r5,zero
 800139c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 80013a0:	0009883a 	mov	r4,zero
 80013a4:	000b883a 	mov	r5,zero
 80013a8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 80013ac:	0009883a 	mov	r4,zero
 80013b0:	01408404 	movi	r5,528
 80013b4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
 80013b8:	0009883a 	mov	r4,zero
 80013bc:	01401044 	movi	r5,65
 80013c0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80013c4:	0009883a 	mov	r4,zero
 80013c8:	014004c4 	movi	r5,19
 80013cc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 80013d0:	0009883a 	mov	r4,zero
 80013d4:	000b883a 	mov	r5,zero
 80013d8:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80013dc:	01006c04 	movi	r4,432
 80013e0:	01414004 	movi	r5,1280
 80013e4:	80010740 	call	8001074 <UsbWrite>
}
 80013e8:	e037883a 	mov	sp,fp
 80013ec:	dfc00117 	ldw	ra,4(sp)
 80013f0:	df000017 	ldw	fp,0(sp)
 80013f4:	dec00204 	addi	sp,sp,8
 80013f8:	f800283a 	ret

080013fc <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 80013fc:	defffe04 	addi	sp,sp,-8
 8001400:	dfc00115 	stw	ra,4(sp)
 8001404:	df000015 	stw	fp,0(sp)
 8001408:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800140c:	01000084 	movi	r4,2
 8001410:	01414004 	movi	r5,1280
 8001414:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001418:	0009883a 	mov	r4,zero
 800141c:	01414304 	movi	r5,1292
 8001420:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001424:	0009883a 	mov	r4,zero
 8001428:	01400204 	movi	r5,8
 800142c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001430:	0009883a 	mov	r4,zero
 8001434:	0140b404 	movi	r5,720
 8001438:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800143c:	0009883a 	mov	r4,zero
 8001440:	01400044 	movi	r5,1
 8001444:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001448:	0009883a 	mov	r4,zero
 800144c:	014004c4 	movi	r5,19
 8001450:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001454:	0009883a 	mov	r4,zero
 8001458:	01414504 	movi	r5,1300
 800145c:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001460:	0009883a 	mov	r4,zero
 8001464:	0141a004 	movi	r5,1664
 8001468:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 800146c:	0009883a 	mov	r4,zero
 8001470:	01404004 	movi	r5,256
 8001474:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001478:	0009883a 	mov	r4,zero
 800147c:	000b883a 	mov	r5,zero
 8001480:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 8001484:	0009883a 	mov	r4,zero
 8001488:	01400484 	movi	r5,18
 800148c:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001490:	0009883a 	mov	r4,zero
 8001494:	01415104 	movi	r5,1348
 8001498:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 800149c:	0009883a 	mov	r4,zero
 80014a0:	01400204 	movi	r5,8
 80014a4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80014a8:	0009883a 	mov	r4,zero
 80014ac:	0140a404 	movi	r5,656
 80014b0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80014b4:	0009883a 	mov	r4,zero
 80014b8:	01401044 	movi	r5,65
 80014bc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80014c0:	0009883a 	mov	r4,zero
 80014c4:	014004c4 	movi	r5,19
 80014c8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80014cc:	0009883a 	mov	r4,zero
 80014d0:	01414804 	movi	r5,1312
 80014d4:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80014d8:	0009883a 	mov	r4,zero
 80014dc:	01415304 	movi	r5,1356
 80014e0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 80014e4:	0009883a 	mov	r4,zero
 80014e8:	01400204 	movi	r5,8
 80014ec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80014f0:	0009883a 	mov	r4,zero
 80014f4:	0140a404 	movi	r5,656
 80014f8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 80014fc:	0009883a 	mov	r4,zero
 8001500:	01400044 	movi	r5,1
 8001504:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001508:	0009883a 	mov	r4,zero
 800150c:	014004c4 	movi	r5,19
 8001510:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001514:	0009883a 	mov	r4,zero
 8001518:	01414b04 	movi	r5,1324
 800151c:	80002480 	call	8000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 8001520:	0009883a 	mov	r4,zero
 8001524:	01415504 	movi	r5,1364
 8001528:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 800152c:	0009883a 	mov	r4,zero
 8001530:	01400084 	movi	r5,2
 8001534:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001538:	0009883a 	mov	r4,zero
 800153c:	0140a404 	movi	r5,656
 8001540:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001544:	0009883a 	mov	r4,zero
 8001548:	01401044 	movi	r5,65
 800154c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001550:	0009883a 	mov	r4,zero
 8001554:	014004c4 	movi	r5,19
 8001558:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 800155c:	0009883a 	mov	r4,zero
 8001560:	01414e04 	movi	r5,1336
 8001564:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 8001568:	0009883a 	mov	r4,zero
 800156c:	000b883a 	mov	r5,zero
 8001570:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8001574:	0009883a 	mov	r4,zero
 8001578:	000b883a 	mov	r5,zero
 800157c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 8001580:	0009883a 	mov	r4,zero
 8001584:	01408404 	movi	r5,528
 8001588:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 800158c:	0009883a 	mov	r4,zero
 8001590:	01401044 	movi	r5,65
 8001594:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001598:	0009883a 	mov	r4,zero
 800159c:	014004c4 	movi	r5,19
 80015a0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 80015a4:	0009883a 	mov	r4,zero
 80015a8:	000b883a 	mov	r5,zero
 80015ac:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80015b0:	01006c04 	movi	r4,432
 80015b4:	01414004 	movi	r5,1280
 80015b8:	80010740 	call	8001074 <UsbWrite>
}
 80015bc:	e037883a 	mov	sp,fp
 80015c0:	dfc00117 	ldw	ra,4(sp)
 80015c4:	df000017 	ldw	fp,0(sp)
 80015c8:	dec00204 	addi	sp,sp,8
 80015cc:	f800283a 	ret

080015d0 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 80015d0:	defffe04 	addi	sp,sp,-8
 80015d4:	dfc00115 	stw	ra,4(sp)
 80015d8:	df000015 	stw	fp,0(sp)
 80015dc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80015e0:	01000084 	movi	r4,2
 80015e4:	01414004 	movi	r5,1280
 80015e8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80015ec:	0009883a 	mov	r4,zero
 80015f0:	01414304 	movi	r5,1292
 80015f4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80015f8:	0009883a 	mov	r4,zero
 80015fc:	01400204 	movi	r5,8
 8001600:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001604:	0009883a 	mov	r4,zero
 8001608:	0140b404 	movi	r5,720
 800160c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001610:	0009883a 	mov	r4,zero
 8001614:	01400044 	movi	r5,1
 8001618:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 800161c:	0009883a 	mov	r4,zero
 8001620:	014004c4 	movi	r5,19
 8001624:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001628:	0009883a 	mov	r4,zero
 800162c:	01414504 	movi	r5,1300
 8001630:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001634:	0009883a 	mov	r4,zero
 8001638:	0141a004 	movi	r5,1664
 800163c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 8001640:	0009883a 	mov	r4,zero
 8001644:	01408004 	movi	r5,512
 8001648:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 800164c:	0009883a 	mov	r4,zero
 8001650:	000b883a 	mov	r5,zero
 8001654:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 8001658:	0009883a 	mov	r4,zero
 800165c:	01400244 	movi	r5,9
 8001660:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001664:	0009883a 	mov	r4,zero
 8001668:	01415104 	movi	r5,1348
 800166c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001670:	0009883a 	mov	r4,zero
 8001674:	01400204 	movi	r5,8
 8001678:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 800167c:	0009883a 	mov	r4,zero
 8001680:	0140a404 	movi	r5,656
 8001684:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001688:	0009883a 	mov	r4,zero
 800168c:	01401044 	movi	r5,65
 8001690:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001694:	0009883a 	mov	r4,zero
 8001698:	014004c4 	movi	r5,19
 800169c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80016a0:	0009883a 	mov	r4,zero
 80016a4:	01414804 	movi	r5,1312
 80016a8:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80016ac:	0009883a 	mov	r4,zero
 80016b0:	01415304 	movi	r5,1356
 80016b4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 80016b8:	0009883a 	mov	r4,zero
 80016bc:	01400044 	movi	r5,1
 80016c0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	0140a404 	movi	r5,656
 80016cc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 80016d0:	0009883a 	mov	r4,zero
 80016d4:	01400044 	movi	r5,1
 80016d8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80016dc:	0009883a 	mov	r4,zero
 80016e0:	014004c4 	movi	r5,19
 80016e4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80016e8:	0009883a 	mov	r4,zero
 80016ec:	01414b04 	movi	r5,1324
 80016f0:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 80016f4:	0009883a 	mov	r4,zero
 80016f8:	000b883a 	mov	r5,zero
 80016fc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001700:	0009883a 	mov	r4,zero
 8001704:	000b883a 	mov	r5,zero
 8001708:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 800170c:	0009883a 	mov	r4,zero
 8001710:	01408404 	movi	r5,528
 8001714:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001718:	0009883a 	mov	r4,zero
 800171c:	01401044 	movi	r5,65
 8001720:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001724:	0009883a 	mov	r4,zero
 8001728:	014004c4 	movi	r5,19
 800172c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001730:	0009883a 	mov	r4,zero
 8001734:	000b883a 	mov	r5,zero
 8001738:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800173c:	01006c04 	movi	r4,432
 8001740:	01414004 	movi	r5,1280
 8001744:	80010740 	call	8001074 <UsbWrite>
}
 8001748:	e037883a 	mov	sp,fp
 800174c:	dfc00117 	ldw	ra,4(sp)
 8001750:	df000017 	ldw	fp,0(sp)
 8001754:	dec00204 	addi	sp,sp,8
 8001758:	f800283a 	ret

0800175c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 800175c:	defffe04 	addi	sp,sp,-8
 8001760:	dfc00115 	stw	ra,4(sp)
 8001764:	df000015 	stw	fp,0(sp)
 8001768:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800176c:	01000084 	movi	r4,2
 8001770:	01414004 	movi	r5,1280
 8001774:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001778:	0009883a 	mov	r4,zero
 800177c:	01414304 	movi	r5,1292
 8001780:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001784:	0009883a 	mov	r4,zero
 8001788:	01400204 	movi	r5,8
 800178c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001790:	0009883a 	mov	r4,zero
 8001794:	0140b404 	movi	r5,720
 8001798:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 800179c:	0009883a 	mov	r4,zero
 80017a0:	01400044 	movi	r5,1
 80017a4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 80017a8:	0009883a 	mov	r4,zero
 80017ac:	014004c4 	movi	r5,19
 80017b0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 80017b4:	0009883a 	mov	r4,zero
 80017b8:	01414504 	movi	r5,1300
 80017bc:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80017c0:	0009883a 	mov	r4,zero
 80017c4:	0141a004 	movi	r5,1664
 80017c8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 80017cc:	0009883a 	mov	r4,zero
 80017d0:	01408004 	movi	r5,512
 80017d4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 80017d8:	0009883a 	mov	r4,zero
 80017dc:	000b883a 	mov	r5,zero
 80017e0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 80017e4:	0009883a 	mov	r4,zero
 80017e8:	01403fc4 	movi	r5,255
 80017ec:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 80017f0:	0009883a 	mov	r4,zero
 80017f4:	01415704 	movi	r5,1372
 80017f8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80017fc:	0009883a 	mov	r4,zero
 8001800:	01400204 	movi	r5,8
 8001804:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001808:	0009883a 	mov	r4,zero
 800180c:	0140a404 	movi	r5,656
 8001810:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001814:	0009883a 	mov	r4,zero
 8001818:	01401044 	movi	r5,65
 800181c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001820:	0009883a 	mov	r4,zero
 8001824:	014004c4 	movi	r5,19
 8001828:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 800182c:	0009883a 	mov	r4,zero
 8001830:	01414804 	movi	r5,1312
 8001834:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 8001838:	0009883a 	mov	r4,zero
 800183c:	01415904 	movi	r5,1380
 8001840:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001844:	0009883a 	mov	r4,zero
 8001848:	01400204 	movi	r5,8
 800184c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001850:	0009883a 	mov	r4,zero
 8001854:	0140a404 	movi	r5,656
 8001858:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800185c:	0009883a 	mov	r4,zero
 8001860:	01400044 	movi	r5,1
 8001864:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001868:	0009883a 	mov	r4,zero
 800186c:	014004c4 	movi	r5,19
 8001870:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001874:	0009883a 	mov	r4,zero
 8001878:	01414b04 	movi	r5,1324
 800187c:	80002480 	call	8000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 8001880:	0009883a 	mov	r4,zero
 8001884:	01415b04 	movi	r5,1388
 8001888:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 800188c:	0009883a 	mov	r4,zero
 8001890:	01400204 	movi	r5,8
 8001894:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001898:	0009883a 	mov	r4,zero
 800189c:	0140a404 	movi	r5,656
 80018a0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 80018a4:	0009883a 	mov	r4,zero
 80018a8:	01401044 	movi	r5,65
 80018ac:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80018b0:	0009883a 	mov	r4,zero
 80018b4:	014004c4 	movi	r5,19
 80018b8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 80018bc:	0009883a 	mov	r4,zero
 80018c0:	01414e04 	movi	r5,1336
 80018c4:	80002480 	call	8000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 80018c8:	0009883a 	mov	r4,zero
 80018cc:	01415d04 	movi	r5,1396
 80018d0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 80018d4:	0009883a 	mov	r4,zero
 80018d8:	01400204 	movi	r5,8
 80018dc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 80018e0:	0009883a 	mov	r4,zero
 80018e4:	0140a404 	movi	r5,656
 80018e8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 80018ec:	0009883a 	mov	r4,zero
 80018f0:	01400044 	movi	r5,1
 80018f4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80018f8:	0009883a 	mov	r4,zero
 80018fc:	014004c4 	movi	r5,19
 8001900:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001904:	0009883a 	mov	r4,zero
 8001908:	01415104 	movi	r5,1348
 800190c:	80002480 	call	8000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 8001910:	0009883a 	mov	r4,zero
 8001914:	01415f04 	movi	r5,1404
 8001918:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 800191c:	0009883a 	mov	r4,zero
 8001920:	01400084 	movi	r5,2
 8001924:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001928:	0009883a 	mov	r4,zero
 800192c:	0140a404 	movi	r5,656
 8001930:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001934:	0009883a 	mov	r4,zero
 8001938:	01401044 	movi	r5,65
 800193c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001940:	0009883a 	mov	r4,zero
 8001944:	014004c4 	movi	r5,19
 8001948:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 800194c:	0009883a 	mov	r4,zero
 8001950:	01415404 	movi	r5,1360
 8001954:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 8001958:	0009883a 	mov	r4,zero
 800195c:	000b883a 	mov	r5,zero
 8001960:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8001964:	0009883a 	mov	r4,zero
 8001968:	000b883a 	mov	r5,zero
 800196c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 8001970:	0009883a 	mov	r4,zero
 8001974:	01408404 	movi	r5,528
 8001978:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 800197c:	0009883a 	mov	r4,zero
 8001980:	01401044 	movi	r5,65
 8001984:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001988:	0009883a 	mov	r4,zero
 800198c:	014004c4 	movi	r5,19
 8001990:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 8001994:	0009883a 	mov	r4,zero
 8001998:	000b883a 	mov	r5,zero
 800199c:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80019a0:	01006c04 	movi	r4,432
 80019a4:	01414004 	movi	r5,1280
 80019a8:	80010740 	call	8001074 <UsbWrite>
}
 80019ac:	e037883a 	mov	sp,fp
 80019b0:	dfc00117 	ldw	ra,4(sp)
 80019b4:	df000017 	ldw	fp,0(sp)
 80019b8:	dec00204 	addi	sp,sp,8
 80019bc:	f800283a 	ret

080019c0 <UsbSetConfig>:

void UsbSetConfig()
{
 80019c0:	defffe04 	addi	sp,sp,-8
 80019c4:	dfc00115 	stw	ra,4(sp)
 80019c8:	df000015 	stw	fp,0(sp)
 80019cc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80019d0:	01000084 	movi	r4,2
 80019d4:	01414004 	movi	r5,1280
 80019d8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 80019dc:	0009883a 	mov	r4,zero
 80019e0:	01414304 	movi	r5,1292
 80019e4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80019e8:	0009883a 	mov	r4,zero
 80019ec:	01400204 	movi	r5,8
 80019f0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 80019f4:	0009883a 	mov	r4,zero
 80019f8:	0140b404 	movi	r5,720
 80019fc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001a00:	0009883a 	mov	r4,zero
 8001a04:	01400044 	movi	r5,1
 8001a08:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001a0c:	0009883a 	mov	r4,zero
 8001a10:	014004c4 	movi	r5,19
 8001a14:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001a18:	0009883a 	mov	r4,zero
 8001a1c:	01414504 	movi	r5,1300
 8001a20:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8001a24:	0009883a 	mov	r4,zero
 8001a28:	01424004 	movi	r5,2304
 8001a2c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8001a30:	0009883a 	mov	r4,zero
 8001a34:	01400044 	movi	r5,1
 8001a38:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a3c:	0009883a 	mov	r4,zero
 8001a40:	000b883a 	mov	r5,zero
 8001a44:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a48:	0009883a 	mov	r4,zero
 8001a4c:	000b883a 	mov	r5,zero
 8001a50:	80002480 	call	8000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001a54:	0009883a 	mov	r4,zero
 8001a58:	000b883a 	mov	r5,zero
 8001a5c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001a60:	0009883a 	mov	r4,zero
 8001a64:	000b883a 	mov	r5,zero
 8001a68:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001a6c:	0009883a 	mov	r4,zero
 8001a70:	0140a404 	movi	r5,656
 8001a74:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001a78:	0009883a 	mov	r4,zero
 8001a7c:	01401044 	movi	r5,65
 8001a80:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001a84:	0009883a 	mov	r4,zero
 8001a88:	014004c4 	movi	r5,19
 8001a8c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a90:	0009883a 	mov	r4,zero
 8001a94:	000b883a 	mov	r5,zero
 8001a98:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001a9c:	01006c04 	movi	r4,432
 8001aa0:	01414004 	movi	r5,1280
 8001aa4:	80010740 	call	8001074 <UsbWrite>

}
 8001aa8:	e037883a 	mov	sp,fp
 8001aac:	dfc00117 	ldw	ra,4(sp)
 8001ab0:	df000017 	ldw	fp,0(sp)
 8001ab4:	dec00204 	addi	sp,sp,8
 8001ab8:	f800283a 	ret

08001abc <UsbClassRequest>:

void UsbClassRequest()
{
 8001abc:	defffe04 	addi	sp,sp,-8
 8001ac0:	dfc00115 	stw	ra,4(sp)
 8001ac4:	df000015 	stw	fp,0(sp)
 8001ac8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001acc:	01000084 	movi	r4,2
 8001ad0:	01414004 	movi	r5,1280
 8001ad4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001ad8:	0009883a 	mov	r4,zero
 8001adc:	01414304 	movi	r5,1292
 8001ae0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001ae4:	0009883a 	mov	r4,zero
 8001ae8:	01400204 	movi	r5,8
 8001aec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001af0:	0009883a 	mov	r4,zero
 8001af4:	0140b404 	movi	r5,720
 8001af8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001afc:	0009883a 	mov	r4,zero
 8001b00:	01400044 	movi	r5,1
 8001b04:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001b08:	0009883a 	mov	r4,zero
 8001b0c:	014004c4 	movi	r5,19
 8001b10:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001b14:	0009883a 	mov	r4,zero
 8001b18:	01414504 	movi	r5,1300
 8001b1c:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8001b20:	0009883a 	mov	r4,zero
 8001b24:	01428844 	movi	r5,2593
 8001b28:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8001b2c:	0009883a 	mov	r4,zero
 8001b30:	000b883a 	mov	r5,zero
 8001b34:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b38:	0009883a 	mov	r4,zero
 8001b3c:	000b883a 	mov	r5,zero
 8001b40:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b44:	0009883a 	mov	r4,zero
 8001b48:	000b883a 	mov	r5,zero
 8001b4c:	80002480 	call	8000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001b50:	0009883a 	mov	r4,zero
 8001b54:	000b883a 	mov	r5,zero
 8001b58:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8001b5c:	0009883a 	mov	r4,zero
 8001b60:	000b883a 	mov	r5,zero
 8001b64:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001b68:	0009883a 	mov	r4,zero
 8001b6c:	0140a404 	movi	r5,656
 8001b70:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001b74:	0009883a 	mov	r4,zero
 8001b78:	01401044 	movi	r5,65
 8001b7c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001b80:	0009883a 	mov	r4,zero
 8001b84:	014004c4 	movi	r5,19
 8001b88:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b8c:	0009883a 	mov	r4,zero
 8001b90:	000b883a 	mov	r5,zero
 8001b94:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001b98:	01006c04 	movi	r4,432
 8001b9c:	01414004 	movi	r5,1280
 8001ba0:	80010740 	call	8001074 <UsbWrite>
}
 8001ba4:	e037883a 	mov	sp,fp
 8001ba8:	dfc00117 	ldw	ra,4(sp)
 8001bac:	df000017 	ldw	fp,0(sp)
 8001bb0:	dec00204 	addi	sp,sp,8
 8001bb4:	f800283a 	ret

08001bb8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001bb8:	defffe04 	addi	sp,sp,-8
 8001bbc:	dfc00115 	stw	ra,4(sp)
 8001bc0:	df000015 	stw	fp,0(sp)
 8001bc4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001bc8:	01000084 	movi	r4,2
 8001bcc:	01414004 	movi	r5,1280
 8001bd0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001bd4:	0009883a 	mov	r4,zero
 8001bd8:	01414304 	movi	r5,1292
 8001bdc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001be0:	0009883a 	mov	r4,zero
 8001be4:	01400204 	movi	r5,8
 8001be8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001bec:	0009883a 	mov	r4,zero
 8001bf0:	0140b404 	movi	r5,720
 8001bf4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001bf8:	0009883a 	mov	r4,zero
 8001bfc:	01400044 	movi	r5,1
 8001c00:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001c04:	0009883a 	mov	r4,zero
 8001c08:	014004c4 	movi	r5,19
 8001c0c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001c10:	0009883a 	mov	r4,zero
 8001c14:	01414504 	movi	r5,1300
 8001c18:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001c1c:	0009883a 	mov	r4,zero
 8001c20:	0141a044 	movi	r5,1665
 8001c24:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001c28:	0009883a 	mov	r4,zero
 8001c2c:	01484004 	movi	r5,8448
 8001c30:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001c34:	0009883a 	mov	r4,zero
 8001c38:	000b883a 	mov	r5,zero
 8001c3c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001c40:	0009883a 	mov	r4,zero
 8001c44:	01401ec4 	movi	r5,123
 8001c48:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001c4c:	0009883a 	mov	r4,zero
 8001c50:	01415104 	movi	r5,1348
 8001c54:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001c58:	0009883a 	mov	r4,zero
 8001c5c:	01400204 	movi	r5,8
 8001c60:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001c64:	0009883a 	mov	r4,zero
 8001c68:	0140a404 	movi	r5,656
 8001c6c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001c70:	0009883a 	mov	r4,zero
 8001c74:	01401044 	movi	r5,65
 8001c78:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001c7c:	0009883a 	mov	r4,zero
 8001c80:	014004c4 	movi	r5,19
 8001c84:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001c88:	0009883a 	mov	r4,zero
 8001c8c:	01414804 	movi	r5,1312
 8001c90:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001c94:	0009883a 	mov	r4,zero
 8001c98:	000b883a 	mov	r5,zero
 8001c9c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001ca0:	0009883a 	mov	r4,zero
 8001ca4:	000b883a 	mov	r5,zero
 8001ca8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001cac:	0009883a 	mov	r4,zero
 8001cb0:	01408404 	movi	r5,528
 8001cb4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001cb8:	0009883a 	mov	r4,zero
 8001cbc:	01401044 	movi	r5,65
 8001cc0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001cc4:	0009883a 	mov	r4,zero
 8001cc8:	014004c4 	movi	r5,19
 8001ccc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001cd0:	0009883a 	mov	r4,zero
 8001cd4:	000b883a 	mov	r5,zero
 8001cd8:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001cdc:	01006c04 	movi	r4,432
 8001ce0:	01414004 	movi	r5,1280
 8001ce4:	80010740 	call	8001074 <UsbWrite>

}
 8001ce8:	e037883a 	mov	sp,fp
 8001cec:	dfc00117 	ldw	ra,4(sp)
 8001cf0:	df000017 	ldw	fp,0(sp)
 8001cf4:	dec00204 	addi	sp,sp,8
 8001cf8:	f800283a 	ret

08001cfc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001cfc:	defffe04 	addi	sp,sp,-8
 8001d00:	dfc00115 	stw	ra,4(sp)
 8001d04:	df000015 	stw	fp,0(sp)
 8001d08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001d0c:	01000084 	movi	r4,2
 8001d10:	01414004 	movi	r5,1280
 8001d14:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001d18:	0009883a 	mov	r4,zero
 8001d1c:	01414304 	movi	r5,1292
 8001d20:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001d24:	0009883a 	mov	r4,zero
 8001d28:	01400204 	movi	r5,8
 8001d2c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001d30:	0009883a 	mov	r4,zero
 8001d34:	0140b404 	movi	r5,720
 8001d38:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001d3c:	0009883a 	mov	r4,zero
 8001d40:	01400044 	movi	r5,1
 8001d44:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001d48:	0009883a 	mov	r4,zero
 8001d4c:	014004c4 	movi	r5,19
 8001d50:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001d54:	0009883a 	mov	r4,zero
 8001d58:	01414504 	movi	r5,1300
 8001d5c:	80002480 	call	8000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001d60:	0009883a 	mov	r4,zero
 8001d64:	0141a044 	movi	r5,1665
 8001d68:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 8001d6c:	0009883a 	mov	r4,zero
 8001d70:	01488004 	movi	r5,8704
 8001d74:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001d78:	0009883a 	mov	r4,zero
 8001d7c:	000b883a 	mov	r5,zero
 8001d80:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001d84:	0009883a 	mov	r4,zero
 8001d88:	01401ec4 	movi	r5,123
 8001d8c:	80002480 	call	8000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001d90:	0009883a 	mov	r4,zero
 8001d94:	01416004 	movi	r5,1408
 8001d98:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001d9c:	0009883a 	mov	r4,zero
 8001da0:	01400204 	movi	r5,8
 8001da4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001da8:	0009883a 	mov	r4,zero
 8001dac:	0140a404 	movi	r5,656
 8001db0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001db4:	0009883a 	mov	r4,zero
 8001db8:	01401044 	movi	r5,65
 8001dbc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001dc0:	0009883a 	mov	r4,zero
 8001dc4:	014004c4 	movi	r5,19
 8001dc8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001dcc:	0009883a 	mov	r4,zero
 8001dd0:	01414804 	movi	r5,1312
 8001dd4:	80002480 	call	8000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 8001dd8:	0009883a 	mov	r4,zero
 8001ddc:	01416204 	movi	r5,1416
 8001de0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001de4:	0009883a 	mov	r4,zero
 8001de8:	01400204 	movi	r5,8
 8001dec:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001df0:	0009883a 	mov	r4,zero
 8001df4:	0140a404 	movi	r5,656
 8001df8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001dfc:	0009883a 	mov	r4,zero
 8001e00:	01400044 	movi	r5,1
 8001e04:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001e08:	0009883a 	mov	r4,zero
 8001e0c:	014004c4 	movi	r5,19
 8001e10:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001e14:	0009883a 	mov	r4,zero
 8001e18:	01414b04 	movi	r5,1324
 8001e1c:	80002480 	call	8000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8001e20:	0009883a 	mov	r4,zero
 8001e24:	01416404 	movi	r5,1424
 8001e28:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001e2c:	0009883a 	mov	r4,zero
 8001e30:	01400204 	movi	r5,8
 8001e34:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001e38:	0009883a 	mov	r4,zero
 8001e3c:	0140a404 	movi	r5,656
 8001e40:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001e44:	0009883a 	mov	r4,zero
 8001e48:	01401044 	movi	r5,65
 8001e4c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001e50:	0009883a 	mov	r4,zero
 8001e54:	014004c4 	movi	r5,19
 8001e58:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001e5c:	0009883a 	mov	r4,zero
 8001e60:	01414e04 	movi	r5,1336
 8001e64:	80002480 	call	8000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8001e68:	0009883a 	mov	r4,zero
 8001e6c:	01416604 	movi	r5,1432
 8001e70:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001e74:	0009883a 	mov	r4,zero
 8001e78:	01400204 	movi	r5,8
 8001e7c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001e80:	0009883a 	mov	r4,zero
 8001e84:	0140a404 	movi	r5,656
 8001e88:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001e8c:	0009883a 	mov	r4,zero
 8001e90:	01400044 	movi	r5,1
 8001e94:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001e98:	0009883a 	mov	r4,zero
 8001e9c:	014004c4 	movi	r5,19
 8001ea0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001ea4:	0009883a 	mov	r4,zero
 8001ea8:	01415104 	movi	r5,1348
 8001eac:	80002480 	call	8000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 8001eb0:	0009883a 	mov	r4,zero
 8001eb4:	01416804 	movi	r5,1440
 8001eb8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001ebc:	0009883a 	mov	r4,zero
 8001ec0:	01400204 	movi	r5,8
 8001ec4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001ec8:	0009883a 	mov	r4,zero
 8001ecc:	0140a404 	movi	r5,656
 8001ed0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001ed4:	0009883a 	mov	r4,zero
 8001ed8:	01401044 	movi	r5,65
 8001edc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001ee0:	0009883a 	mov	r4,zero
 8001ee4:	014004c4 	movi	r5,19
 8001ee8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001eec:	0009883a 	mov	r4,zero
 8001ef0:	01415404 	movi	r5,1360
 8001ef4:	80002480 	call	8000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 8001ef8:	0009883a 	mov	r4,zero
 8001efc:	01416a04 	movi	r5,1448
 8001f00:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001f04:	0009883a 	mov	r4,zero
 8001f08:	01400204 	movi	r5,8
 8001f0c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001f10:	0009883a 	mov	r4,zero
 8001f14:	0140a404 	movi	r5,656
 8001f18:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001f1c:	0009883a 	mov	r4,zero
 8001f20:	01400044 	movi	r5,1
 8001f24:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001f28:	0009883a 	mov	r4,zero
 8001f2c:	014004c4 	movi	r5,19
 8001f30:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8001f34:	0009883a 	mov	r4,zero
 8001f38:	01415704 	movi	r5,1372
 8001f3c:	80002480 	call	8000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8001f40:	0009883a 	mov	r4,zero
 8001f44:	01416c04 	movi	r5,1456
 8001f48:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001f4c:	0009883a 	mov	r4,zero
 8001f50:	01400204 	movi	r5,8
 8001f54:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8001f58:	0009883a 	mov	r4,zero
 8001f5c:	0140a404 	movi	r5,656
 8001f60:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8001f64:	0009883a 	mov	r4,zero
 8001f68:	01401044 	movi	r5,65
 8001f6c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001f70:	0009883a 	mov	r4,zero
 8001f74:	014004c4 	movi	r5,19
 8001f78:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 8001f7c:	0009883a 	mov	r4,zero
 8001f80:	01415a04 	movi	r5,1384
 8001f84:	80002480 	call	8000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 8001f88:	0009883a 	mov	r4,zero
 8001f8c:	01416e04 	movi	r5,1464
 8001f90:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 8001f94:	0009883a 	mov	r4,zero
 8001f98:	014000c4 	movi	r5,3
 8001f9c:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001fa0:	0009883a 	mov	r4,zero
 8001fa4:	0140a404 	movi	r5,656
 8001fa8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001fac:	0009883a 	mov	r4,zero
 8001fb0:	01400044 	movi	r5,1
 8001fb4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 8001fb8:	0009883a 	mov	r4,zero
 8001fbc:	014004c4 	movi	r5,19
 8001fc0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 8001fc4:	0009883a 	mov	r4,zero
 8001fc8:	01415d04 	movi	r5,1396
 8001fcc:	80002480 	call	8000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 8001fd0:	0009883a 	mov	r4,zero
 8001fd4:	000b883a 	mov	r5,zero
 8001fd8:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001fdc:	0009883a 	mov	r4,zero
 8001fe0:	000b883a 	mov	r5,zero
 8001fe4:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 8001fe8:	0009883a 	mov	r4,zero
 8001fec:	01408404 	movi	r5,528
 8001ff0:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001ff4:	0009883a 	mov	r4,zero
 8001ff8:	01401044 	movi	r5,65
 8001ffc:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8002000:	0009883a 	mov	r4,zero
 8002004:	014004c4 	movi	r5,19
 8002008:	80002480 	call	8000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800200c:	0009883a 	mov	r4,zero
 8002010:	000b883a 	mov	r5,zero
 8002014:	80002480 	call	8000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8002018:	01006c04 	movi	r4,432
 800201c:	01414004 	movi	r5,1280
 8002020:	80010740 	call	8001074 <UsbWrite>

}
 8002024:	e037883a 	mov	sp,fp
 8002028:	dfc00117 	ldw	ra,4(sp)
 800202c:	df000017 	ldw	fp,0(sp)
 8002030:	dec00204 	addi	sp,sp,8
 8002034:	f800283a 	ret

08002038 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 8002038:	defffd04 	addi	sp,sp,-12
 800203c:	dfc00215 	stw	ra,8(sp)
 8002040:	df000115 	stw	fp,4(sp)
 8002044:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 8002048:	01005104 	movi	r4,324
 800204c:	80010c80 	call	80010c8 <UsbRead>
 8002050:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002054:	01005104 	movi	r4,324
 8002058:	000b883a 	mov	r5,zero
 800205c:	80010740 	call	8001074 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002060:	00000d06 	br	8002098 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8002064:	e0bfff0b 	ldhu	r2,-4(fp)
 8002068:	10000526 	beq	r2,zero,8002080 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 800206c:	e0bfff0b 	ldhu	r2,-4(fp)
 8002070:	01020074 	movhi	r4,2049
 8002074:	2106aa04 	addi	r4,r4,6824
 8002078:	100b883a 	mov	r5,r2
 800207c:	80021e40 	call	80021e4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 8002080:	01005104 	movi	r4,324
 8002084:	80010c80 	call	80010c8 <UsbRead>
 8002088:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 800208c:	01005104 	movi	r4,324
 8002090:	000b883a 	mov	r5,zero
 8002094:	80010740 	call	8001074 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002098:	e0bfff0b 	ldhu	r2,-4(fp)
 800209c:	10840018 	cmpnei	r2,r2,4096
 80020a0:	103ff01e 	bne	r2,zero,8002064 <__alt_data_end+0xfc002064>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 80020a4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80020a8:	e037883a 	mov	sp,fp
 80020ac:	dfc00117 	ldw	ra,4(sp)
 80020b0:	df000017 	ldw	fp,0(sp)
 80020b4:	dec00204 	addi	sp,sp,8
 80020b8:	f800283a 	ret

080020bc <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 80020bc:	defffd04 	addi	sp,sp,-12
 80020c0:	dfc00215 	stw	ra,8(sp)
 80020c4:	df000115 	stw	fp,4(sp)
 80020c8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 80020cc:	010000c4 	movi	r4,3
 80020d0:	80002b40 	call	80002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 80020d4:	01005104 	movi	r4,324
 80020d8:	80010c80 	call	80010c8 <UsbRead>
 80020dc:	10bfffcc 	andi	r2,r2,65535
 80020e0:	10840018 	cmpnei	r2,r2,4096
 80020e4:	1000091e 	bne	r2,zero,800210c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80020e8:	01005104 	movi	r4,324
 80020ec:	000b883a 	mov	r5,zero
 80020f0:	80010740 	call	8001074 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80020f4:	0001883a 	nop
 80020f8:	010000c4 	movi	r4,3
 80020fc:	80002b40 	call	80002b4 <IO_read>
 8002100:	10bfffcc 	andi	r2,r2,65535
 8002104:	1080040c 	andi	r2,r2,16
 8002108:	103ffb26 	beq	r2,zero,80020f8 <__alt_data_end+0xfc0020f8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 800210c:	01000084 	movi	r4,2
 8002110:	01414204 	movi	r5,1288
 8002114:	80002480 	call	8000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8002118:	0009883a 	mov	r4,zero
 800211c:	80002b40 	call	80002b4 <IO_read>
 8002120:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8002124:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8002128:	e037883a 	mov	sp,fp
 800212c:	dfc00117 	ldw	ra,4(sp)
 8002130:	df000017 	ldw	fp,0(sp)
 8002134:	dec00204 	addi	sp,sp,8
 8002138:	f800283a 	ret

0800213c <UsbPrintMem>:


void UsbPrintMem()
{
 800213c:	defffc04 	addi	sp,sp,-16
 8002140:	dfc00315 	stw	ra,12(sp)
 8002144:	df000215 	stw	fp,8(sp)
 8002148:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 800214c:	01000084 	movi	r4,2
 8002150:	01414004 	movi	r5,1280
 8002154:	80002480 	call	8000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
 8002158:	e03ffe15 	stw	zero,-8(fp)
 800215c:	00000e06 	br	8002198 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 8002160:	0009883a 	mov	r4,zero
 8002164:	80002b40 	call	80002b4 <IO_read>
 8002168:	10bfffcc 	andi	r2,r2,65535
 800216c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 8002170:	e0bffe17 	ldw	r2,-8(fp)
 8002174:	10814004 	addi	r2,r2,1280
 8002178:	01020074 	movhi	r4,2049
 800217c:	2106b204 	addi	r4,r4,6856
 8002180:	100b883a 	mov	r5,r2
 8002184:	e1bfff17 	ldw	r6,-4(fp)
 8002188:	80021e40 	call	80021e4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 800218c:	e0bffe17 	ldw	r2,-8(fp)
 8002190:	10800084 	addi	r2,r2,2
 8002194:	e0bffe15 	stw	r2,-8(fp)
 8002198:	e0bffe17 	ldw	r2,-8(fp)
 800219c:	10803250 	cmplti	r2,r2,201
 80021a0:	103fef1e 	bne	r2,zero,8002160 <__alt_data_end+0xfc002160>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 80021a4:	e037883a 	mov	sp,fp
 80021a8:	dfc00117 	ldw	ra,4(sp)
 80021ac:	df000017 	ldw	fp,0(sp)
 80021b0:	dec00204 	addi	sp,sp,8
 80021b4:	f800283a 	ret

080021b8 <_printf_r>:
 80021b8:	defffd04 	addi	sp,sp,-12
 80021bc:	dfc00015 	stw	ra,0(sp)
 80021c0:	d9800115 	stw	r6,4(sp)
 80021c4:	d9c00215 	stw	r7,8(sp)
 80021c8:	280d883a 	mov	r6,r5
 80021cc:	21400217 	ldw	r5,8(r4)
 80021d0:	d9c00104 	addi	r7,sp,4
 80021d4:	80023840 	call	8002384 <___vfprintf_internal_r>
 80021d8:	dfc00017 	ldw	ra,0(sp)
 80021dc:	dec00304 	addi	sp,sp,12
 80021e0:	f800283a 	ret

080021e4 <printf>:
 80021e4:	defffc04 	addi	sp,sp,-16
 80021e8:	dfc00015 	stw	ra,0(sp)
 80021ec:	d9400115 	stw	r5,4(sp)
 80021f0:	d9800215 	stw	r6,8(sp)
 80021f4:	d9c00315 	stw	r7,12(sp)
 80021f8:	00820074 	movhi	r2,2049
 80021fc:	108e2304 	addi	r2,r2,14476
 8002200:	10800017 	ldw	r2,0(r2)
 8002204:	200b883a 	mov	r5,r4
 8002208:	d9800104 	addi	r6,sp,4
 800220c:	11000217 	ldw	r4,8(r2)
 8002210:	80044800 	call	8004480 <__vfprintf_internal>
 8002214:	dfc00017 	ldw	ra,0(sp)
 8002218:	dec00404 	addi	sp,sp,16
 800221c:	f800283a 	ret

08002220 <_puts_r>:
 8002220:	defff604 	addi	sp,sp,-40
 8002224:	dc000715 	stw	r16,28(sp)
 8002228:	2021883a 	mov	r16,r4
 800222c:	2809883a 	mov	r4,r5
 8002230:	dc400815 	stw	r17,32(sp)
 8002234:	dfc00915 	stw	ra,36(sp)
 8002238:	2823883a 	mov	r17,r5
 800223c:	80022ec0 	call	80022ec <strlen>
 8002240:	00c20074 	movhi	r3,2049
 8002244:	18ce2304 	addi	r3,r3,14476
 8002248:	18c00017 	ldw	r3,0(r3)
 800224c:	11000044 	addi	r4,r2,1
 8002250:	d8800115 	stw	r2,4(sp)
 8002254:	18c00217 	ldw	r3,8(r3)
 8002258:	01420074 	movhi	r5,2049
 800225c:	2946b704 	addi	r5,r5,6876
 8002260:	1880030b 	ldhu	r2,12(r3)
 8002264:	d9400215 	stw	r5,8(sp)
 8002268:	d9000615 	stw	r4,24(sp)
 800226c:	01400044 	movi	r5,1
 8002270:	01000084 	movi	r4,2
 8002274:	d9000515 	stw	r4,20(sp)
 8002278:	dc400015 	stw	r17,0(sp)
 800227c:	d9400315 	stw	r5,12(sp)
 8002280:	dec00415 	stw	sp,16(sp)
 8002284:	1108000c 	andi	r4,r2,8192
 8002288:	2000061e 	bne	r4,zero,80022a4 <_puts_r+0x84>
 800228c:	19401917 	ldw	r5,100(r3)
 8002290:	0137ffc4 	movi	r4,-8193
 8002294:	10880014 	ori	r2,r2,8192
 8002298:	2908703a 	and	r4,r5,r4
 800229c:	1880030d 	sth	r2,12(r3)
 80022a0:	19001915 	stw	r4,100(r3)
 80022a4:	81400217 	ldw	r5,8(r16)
 80022a8:	8009883a 	mov	r4,r16
 80022ac:	d9800404 	addi	r6,sp,16
 80022b0:	80069440 	call	8006944 <__sfvwrite_r>
 80022b4:	1000061e 	bne	r2,zero,80022d0 <_puts_r+0xb0>
 80022b8:	00800284 	movi	r2,10
 80022bc:	dfc00917 	ldw	ra,36(sp)
 80022c0:	dc400817 	ldw	r17,32(sp)
 80022c4:	dc000717 	ldw	r16,28(sp)
 80022c8:	dec00a04 	addi	sp,sp,40
 80022cc:	f800283a 	ret
 80022d0:	00bfffc4 	movi	r2,-1
 80022d4:	003ff906 	br	80022bc <__alt_data_end+0xfc0022bc>

080022d8 <puts>:
 80022d8:	00820074 	movhi	r2,2049
 80022dc:	108e2304 	addi	r2,r2,14476
 80022e0:	200b883a 	mov	r5,r4
 80022e4:	11000017 	ldw	r4,0(r2)
 80022e8:	80022201 	jmpi	8002220 <_puts_r>

080022ec <strlen>:
 80022ec:	208000cc 	andi	r2,r4,3
 80022f0:	10002026 	beq	r2,zero,8002374 <strlen+0x88>
 80022f4:	20800007 	ldb	r2,0(r4)
 80022f8:	10002026 	beq	r2,zero,800237c <strlen+0x90>
 80022fc:	2005883a 	mov	r2,r4
 8002300:	00000206 	br	800230c <strlen+0x20>
 8002304:	10c00007 	ldb	r3,0(r2)
 8002308:	18001826 	beq	r3,zero,800236c <strlen+0x80>
 800230c:	10800044 	addi	r2,r2,1
 8002310:	10c000cc 	andi	r3,r2,3
 8002314:	183ffb1e 	bne	r3,zero,8002304 <__alt_data_end+0xfc002304>
 8002318:	10c00017 	ldw	r3,0(r2)
 800231c:	01ffbff4 	movhi	r7,65279
 8002320:	39ffbfc4 	addi	r7,r7,-257
 8002324:	00ca303a 	nor	r5,zero,r3
 8002328:	01a02074 	movhi	r6,32897
 800232c:	19c7883a 	add	r3,r3,r7
 8002330:	31a02004 	addi	r6,r6,-32640
 8002334:	1946703a 	and	r3,r3,r5
 8002338:	1986703a 	and	r3,r3,r6
 800233c:	1800091e 	bne	r3,zero,8002364 <strlen+0x78>
 8002340:	10800104 	addi	r2,r2,4
 8002344:	10c00017 	ldw	r3,0(r2)
 8002348:	19cb883a 	add	r5,r3,r7
 800234c:	00c6303a 	nor	r3,zero,r3
 8002350:	28c6703a 	and	r3,r5,r3
 8002354:	1986703a 	and	r3,r3,r6
 8002358:	183ff926 	beq	r3,zero,8002340 <__alt_data_end+0xfc002340>
 800235c:	00000106 	br	8002364 <strlen+0x78>
 8002360:	10800044 	addi	r2,r2,1
 8002364:	10c00007 	ldb	r3,0(r2)
 8002368:	183ffd1e 	bne	r3,zero,8002360 <__alt_data_end+0xfc002360>
 800236c:	1105c83a 	sub	r2,r2,r4
 8002370:	f800283a 	ret
 8002374:	2005883a 	mov	r2,r4
 8002378:	003fe706 	br	8002318 <__alt_data_end+0xfc002318>
 800237c:	0005883a 	mov	r2,zero
 8002380:	f800283a 	ret

08002384 <___vfprintf_internal_r>:
 8002384:	defeb604 	addi	sp,sp,-1320
 8002388:	dfc14915 	stw	ra,1316(sp)
 800238c:	ddc14715 	stw	r23,1308(sp)
 8002390:	dd814615 	stw	r22,1304(sp)
 8002394:	202f883a 	mov	r23,r4
 8002398:	282d883a 	mov	r22,r5
 800239c:	d9812a15 	stw	r6,1192(sp)
 80023a0:	d9c12d15 	stw	r7,1204(sp)
 80023a4:	df014815 	stw	fp,1312(sp)
 80023a8:	dd414515 	stw	r21,1300(sp)
 80023ac:	dd014415 	stw	r20,1296(sp)
 80023b0:	dcc14315 	stw	r19,1292(sp)
 80023b4:	dc814215 	stw	r18,1288(sp)
 80023b8:	dc414115 	stw	r17,1284(sp)
 80023bc:	dc014015 	stw	r16,1280(sp)
 80023c0:	80070040 	call	8007004 <_localeconv_r>
 80023c4:	10800017 	ldw	r2,0(r2)
 80023c8:	1009883a 	mov	r4,r2
 80023cc:	d8813515 	stw	r2,1236(sp)
 80023d0:	80022ec0 	call	80022ec <strlen>
 80023d4:	d8813815 	stw	r2,1248(sp)
 80023d8:	b8000226 	beq	r23,zero,80023e4 <___vfprintf_internal_r+0x60>
 80023dc:	b8800e17 	ldw	r2,56(r23)
 80023e0:	10010526 	beq	r2,zero,80027f8 <___vfprintf_internal_r+0x474>
 80023e4:	b0c0030b 	ldhu	r3,12(r22)
 80023e8:	1908000c 	andi	r4,r3,8192
 80023ec:	1805883a 	mov	r2,r3
 80023f0:	2000071e 	bne	r4,zero,8002410 <___vfprintf_internal_r+0x8c>
 80023f4:	b1001917 	ldw	r4,100(r22)
 80023f8:	18880014 	ori	r2,r3,8192
 80023fc:	00f7ffc4 	movi	r3,-8193
 8002400:	20c8703a 	and	r4,r4,r3
 8002404:	b080030d 	sth	r2,12(r22)
 8002408:	1007883a 	mov	r3,r2
 800240c:	b1001915 	stw	r4,100(r22)
 8002410:	1100020c 	andi	r4,r2,8
 8002414:	2000a826 	beq	r4,zero,80026b8 <___vfprintf_internal_r+0x334>
 8002418:	b1000417 	ldw	r4,16(r22)
 800241c:	2000a626 	beq	r4,zero,80026b8 <___vfprintf_internal_r+0x334>
 8002420:	1080068c 	andi	r2,r2,26
 8002424:	01000284 	movi	r4,10
 8002428:	1100ac26 	beq	r2,r4,80026dc <___vfprintf_internal_r+0x358>
 800242c:	d8c10e04 	addi	r3,sp,1080
 8002430:	d9010dc4 	addi	r4,sp,1079
 8002434:	d9400404 	addi	r5,sp,16
 8002438:	05020074 	movhi	r20,2049
 800243c:	1905c83a 	sub	r2,r3,r4
 8002440:	a506c884 	addi	r20,r20,6946
 8002444:	d8c12815 	stw	r3,1184(sp)
 8002448:	d9012915 	stw	r4,1188(sp)
 800244c:	d9411e15 	stw	r5,1144(sp)
 8002450:	d8012015 	stw	zero,1152(sp)
 8002454:	d8011f15 	stw	zero,1148(sp)
 8002458:	d8013315 	stw	zero,1228(sp)
 800245c:	d8013715 	stw	zero,1244(sp)
 8002460:	d8013915 	stw	zero,1252(sp)
 8002464:	d8013b15 	stw	zero,1260(sp)
 8002468:	d8013a15 	stw	zero,1256(sp)
 800246c:	d8012f15 	stw	zero,1212(sp)
 8002470:	2811883a 	mov	r8,r5
 8002474:	d8813c15 	stw	r2,1264(sp)
 8002478:	d8c12a17 	ldw	r3,1192(sp)
 800247c:	18800007 	ldb	r2,0(r3)
 8002480:	10021326 	beq	r2,zero,8002cd0 <___vfprintf_internal_r+0x94c>
 8002484:	00c00944 	movi	r3,37
 8002488:	dc012a17 	ldw	r16,1192(sp)
 800248c:	10c0021e 	bne	r2,r3,8002498 <___vfprintf_internal_r+0x114>
 8002490:	00001606 	br	80024ec <___vfprintf_internal_r+0x168>
 8002494:	10c08526 	beq	r2,r3,80026ac <___vfprintf_internal_r+0x328>
 8002498:	84000044 	addi	r16,r16,1
 800249c:	80800007 	ldb	r2,0(r16)
 80024a0:	103ffc1e 	bne	r2,zero,8002494 <__alt_data_end+0xfc002494>
 80024a4:	d9012a17 	ldw	r4,1192(sp)
 80024a8:	8123c83a 	sub	r17,r16,r4
 80024ac:	88000f26 	beq	r17,zero,80024ec <___vfprintf_internal_r+0x168>
 80024b0:	d8812a17 	ldw	r2,1192(sp)
 80024b4:	d8c12017 	ldw	r3,1152(sp)
 80024b8:	44400115 	stw	r17,4(r8)
 80024bc:	40800015 	stw	r2,0(r8)
 80024c0:	d8811f17 	ldw	r2,1148(sp)
 80024c4:	1c47883a 	add	r3,r3,r17
 80024c8:	d8c12015 	stw	r3,1152(sp)
 80024cc:	10800044 	addi	r2,r2,1
 80024d0:	d8811f15 	stw	r2,1148(sp)
 80024d4:	00c001c4 	movi	r3,7
 80024d8:	1880b516 	blt	r3,r2,80027b0 <___vfprintf_internal_r+0x42c>
 80024dc:	42000204 	addi	r8,r8,8
 80024e0:	d8c12f17 	ldw	r3,1212(sp)
 80024e4:	1c47883a 	add	r3,r3,r17
 80024e8:	d8c12f15 	stw	r3,1212(sp)
 80024ec:	80800007 	ldb	r2,0(r16)
 80024f0:	1000b626 	beq	r2,zero,80027cc <___vfprintf_internal_r+0x448>
 80024f4:	80800044 	addi	r2,r16,1
 80024f8:	84000047 	ldb	r16,1(r16)
 80024fc:	0027883a 	mov	r19,zero
 8002500:	0039883a 	mov	fp,zero
 8002504:	dcc12b05 	stb	r19,1196(sp)
 8002508:	d8012785 	stb	zero,1182(sp)
 800250c:	027fffc4 	movi	r9,-1
 8002510:	d8012e15 	stw	zero,1208(sp)
 8002514:	04401604 	movi	r17,88
 8002518:	04800244 	movi	r18,9
 800251c:	da012a15 	stw	r8,1192(sp)
 8002520:	e027883a 	mov	r19,fp
 8002524:	17000044 	addi	fp,r2,1
 8002528:	80bff804 	addi	r2,r16,-32
 800252c:	88831236 	bltu	r17,r2,8003178 <___vfprintf_internal_r+0xdf4>
 8002530:	100490ba 	slli	r2,r2,2
 8002534:	01020034 	movhi	r4,2048
 8002538:	21095204 	addi	r4,r4,9544
 800253c:	1105883a 	add	r2,r2,r4
 8002540:	10800017 	ldw	r2,0(r2)
 8002544:	1000683a 	jmp	r2
 8002548:	08003094 	ori	zero,at,194
 800254c:	08003178 	rdprs	zero,at,197
 8002550:	08003178 	rdprs	zero,at,197
 8002554:	080030b0 	cmpltui	zero,at,194
 8002558:	08003178 	rdprs	zero,at,197
 800255c:	08003178 	rdprs	zero,at,197
 8002560:	08003178 	rdprs	zero,at,197
 8002564:	08003178 	rdprs	zero,at,197
 8002568:	08003178 	rdprs	zero,at,197
 800256c:	08003178 	rdprs	zero,at,197
 8002570:	080030c0 	call	80030c <__alt_mem_onchip_memory2_0+0x80030c>
 8002574:	080030e8 	cmpgeui	zero,at,195
 8002578:	08003178 	rdprs	zero,at,197
 800257c:	08002804 	addi	zero,at,160
 8002580:	08002814 	ori	zero,at,160
 8002584:	08003178 	rdprs	zero,at,197
 8002588:	08002864 	muli	zero,at,161
 800258c:	08002874 	orhi	zero,at,161
 8002590:	08002874 	orhi	zero,at,161
 8002594:	08002874 	orhi	zero,at,161
 8002598:	08002874 	orhi	zero,at,161
 800259c:	08002874 	orhi	zero,at,161
 80025a0:	08002874 	orhi	zero,at,161
 80025a4:	08002874 	orhi	zero,at,161
 80025a8:	08002874 	orhi	zero,at,161
 80025ac:	08002874 	orhi	zero,at,161
 80025b0:	08003178 	rdprs	zero,at,197
 80025b4:	08003178 	rdprs	zero,at,197
 80025b8:	08003178 	rdprs	zero,at,197
 80025bc:	08003178 	rdprs	zero,at,197
 80025c0:	08003178 	rdprs	zero,at,197
 80025c4:	08003178 	rdprs	zero,at,197
 80025c8:	08003178 	rdprs	zero,at,197
 80025cc:	08003178 	rdprs	zero,at,197
 80025d0:	08003178 	rdprs	zero,at,197
 80025d4:	08003178 	rdprs	zero,at,197
 80025d8:	080028b8 	rdprs	zero,at,162
 80025dc:	08002cd8 	cmpnei	zero,at,179
 80025e0:	08003178 	rdprs	zero,at,197
 80025e4:	08002cd8 	cmpnei	zero,at,179
 80025e8:	08003178 	rdprs	zero,at,197
 80025ec:	08003178 	rdprs	zero,at,197
 80025f0:	08003178 	rdprs	zero,at,197
 80025f4:	08003178 	rdprs	zero,at,197
 80025f8:	08002d80 	call	8002d8 <__alt_mem_onchip_memory2_0+0x8002d8>
 80025fc:	08003178 	rdprs	zero,at,197
 8002600:	08003178 	rdprs	zero,at,197
 8002604:	08002d90 	cmplti	zero,at,182
 8002608:	08003178 	rdprs	zero,at,197
 800260c:	08003178 	rdprs	zero,at,197
 8002610:	08003178 	rdprs	zero,at,197
 8002614:	08003178 	rdprs	zero,at,197
 8002618:	08003178 	rdprs	zero,at,197
 800261c:	08002dd4 	ori	zero,at,183
 8002620:	08003178 	rdprs	zero,at,197
 8002624:	08003178 	rdprs	zero,at,197
 8002628:	08002e0c 	andi	zero,at,184
 800262c:	08003178 	rdprs	zero,at,197
 8002630:	08003178 	rdprs	zero,at,197
 8002634:	08003178 	rdprs	zero,at,197
 8002638:	08003178 	rdprs	zero,at,197
 800263c:	08003178 	rdprs	zero,at,197
 8002640:	08003178 	rdprs	zero,at,197
 8002644:	08003178 	rdprs	zero,at,197
 8002648:	08003178 	rdprs	zero,at,197
 800264c:	08003178 	rdprs	zero,at,197
 8002650:	08003178 	rdprs	zero,at,197
 8002654:	08003048 	cmpgei	zero,at,193
 8002658:	08002ff4 	orhi	zero,at,191
 800265c:	08002cd8 	cmpnei	zero,at,179
 8002660:	08002cd8 	cmpnei	zero,at,179
 8002664:	08002cd8 	cmpnei	zero,at,179
 8002668:	08003038 	rdprs	zero,at,192
 800266c:	08002ff4 	orhi	zero,at,191
 8002670:	08003178 	rdprs	zero,at,197
 8002674:	08003178 	rdprs	zero,at,197
 8002678:	08002f10 	cmplti	zero,at,188
 800267c:	08003178 	rdprs	zero,at,197
 8002680:	08002f28 	cmpgeui	zero,at,188
 8002684:	08002f68 	cmpgeui	zero,at,189
 8002688:	08002fa8 	cmpgeui	zero,at,190
 800268c:	08002e74 	orhi	zero,at,185
 8002690:	08003178 	rdprs	zero,at,197
 8002694:	080030fc 	xorhi	zero,at,195
 8002698:	08003178 	rdprs	zero,at,197
 800269c:	08002e84 	addi	zero,at,186
 80026a0:	08003178 	rdprs	zero,at,197
 80026a4:	08003178 	rdprs	zero,at,197
 80026a8:	08002ec4 	addi	zero,at,187
 80026ac:	d9412a17 	ldw	r5,1192(sp)
 80026b0:	8163c83a 	sub	r17,r16,r5
 80026b4:	003f7d06 	br	80024ac <__alt_data_end+0xfc0024ac>
 80026b8:	b809883a 	mov	r4,r23
 80026bc:	b00b883a 	mov	r5,r22
 80026c0:	80044a40 	call	80044a4 <__swsetup_r>
 80026c4:	10002d1e 	bne	r2,zero,800277c <___vfprintf_internal_r+0x3f8>
 80026c8:	b0c0030b 	ldhu	r3,12(r22)
 80026cc:	01000284 	movi	r4,10
 80026d0:	1805883a 	mov	r2,r3
 80026d4:	1080068c 	andi	r2,r2,26
 80026d8:	113f541e 	bne	r2,r4,800242c <__alt_data_end+0xfc00242c>
 80026dc:	b080038b 	ldhu	r2,14(r22)
 80026e0:	113fffcc 	andi	r4,r2,65535
 80026e4:	2120001c 	xori	r4,r4,32768
 80026e8:	21200004 	addi	r4,r4,-32768
 80026ec:	203f4f16 	blt	r4,zero,800242c <__alt_data_end+0xfc00242c>
 80026f0:	b2c01917 	ldw	r11,100(r22)
 80026f4:	b2800717 	ldw	r10,28(r22)
 80026f8:	b2400917 	ldw	r9,36(r22)
 80026fc:	d9812a17 	ldw	r6,1192(sp)
 8002700:	d9c12d17 	ldw	r7,1204(sp)
 8002704:	02010004 	movi	r8,1024
 8002708:	18ffff4c 	andi	r3,r3,65533
 800270c:	d881078d 	sth	r2,1054(sp)
 8002710:	b809883a 	mov	r4,r23
 8002714:	d8800404 	addi	r2,sp,16
 8002718:	d9410404 	addi	r5,sp,1040
 800271c:	d8c1070d 	sth	r3,1052(sp)
 8002720:	dac11d15 	stw	r11,1140(sp)
 8002724:	da810b15 	stw	r10,1068(sp)
 8002728:	da410d15 	stw	r9,1076(sp)
 800272c:	d8810415 	stw	r2,1040(sp)
 8002730:	d8810815 	stw	r2,1056(sp)
 8002734:	da010615 	stw	r8,1048(sp)
 8002738:	da010915 	stw	r8,1060(sp)
 800273c:	d8010a15 	stw	zero,1064(sp)
 8002740:	80023840 	call	8002384 <___vfprintf_internal_r>
 8002744:	1021883a 	mov	r16,r2
 8002748:	10000416 	blt	r2,zero,800275c <___vfprintf_internal_r+0x3d8>
 800274c:	b809883a 	mov	r4,r23
 8002750:	d9410404 	addi	r5,sp,1040
 8002754:	8005f240 	call	8005f24 <_fflush_r>
 8002758:	1007301e 	bne	r2,zero,800441c <___vfprintf_internal_r+0x2098>
 800275c:	d881070b 	ldhu	r2,1052(sp)
 8002760:	1080100c 	andi	r2,r2,64
 8002764:	10000326 	beq	r2,zero,8002774 <___vfprintf_internal_r+0x3f0>
 8002768:	b080030b 	ldhu	r2,12(r22)
 800276c:	10801014 	ori	r2,r2,64
 8002770:	b080030d 	sth	r2,12(r22)
 8002774:	8005883a 	mov	r2,r16
 8002778:	00000106 	br	8002780 <___vfprintf_internal_r+0x3fc>
 800277c:	00bfffc4 	movi	r2,-1
 8002780:	dfc14917 	ldw	ra,1316(sp)
 8002784:	df014817 	ldw	fp,1312(sp)
 8002788:	ddc14717 	ldw	r23,1308(sp)
 800278c:	dd814617 	ldw	r22,1304(sp)
 8002790:	dd414517 	ldw	r21,1300(sp)
 8002794:	dd014417 	ldw	r20,1296(sp)
 8002798:	dcc14317 	ldw	r19,1292(sp)
 800279c:	dc814217 	ldw	r18,1288(sp)
 80027a0:	dc414117 	ldw	r17,1284(sp)
 80027a4:	dc014017 	ldw	r16,1280(sp)
 80027a8:	dec14a04 	addi	sp,sp,1320
 80027ac:	f800283a 	ret
 80027b0:	b809883a 	mov	r4,r23
 80027b4:	b00b883a 	mov	r5,r22
 80027b8:	d9811e04 	addi	r6,sp,1144
 80027bc:	80097c40 	call	80097c4 <__sprint_r>
 80027c0:	1000081e 	bne	r2,zero,80027e4 <___vfprintf_internal_r+0x460>
 80027c4:	da000404 	addi	r8,sp,16
 80027c8:	003f4506 	br	80024e0 <__alt_data_end+0xfc0024e0>
 80027cc:	d8812017 	ldw	r2,1152(sp)
 80027d0:	10000426 	beq	r2,zero,80027e4 <___vfprintf_internal_r+0x460>
 80027d4:	b809883a 	mov	r4,r23
 80027d8:	b00b883a 	mov	r5,r22
 80027dc:	d9811e04 	addi	r6,sp,1144
 80027e0:	80097c40 	call	80097c4 <__sprint_r>
 80027e4:	b080030b 	ldhu	r2,12(r22)
 80027e8:	1080100c 	andi	r2,r2,64
 80027ec:	103fe31e 	bne	r2,zero,800277c <__alt_data_end+0xfc00277c>
 80027f0:	d8812f17 	ldw	r2,1212(sp)
 80027f4:	003fe206 	br	8002780 <__alt_data_end+0xfc002780>
 80027f8:	b809883a 	mov	r4,r23
 80027fc:	80064e00 	call	80064e0 <__sinit>
 8002800:	003ef806 	br	80023e4 <__alt_data_end+0xfc0023e4>
 8002804:	e005883a 	mov	r2,fp
 8002808:	9cc00114 	ori	r19,r19,4
 800280c:	e4000007 	ldb	r16,0(fp)
 8002810:	003f4406 	br	8002524 <__alt_data_end+0xfc002524>
 8002814:	e4000007 	ldb	r16,0(fp)
 8002818:	01000a84 	movi	r4,42
 800281c:	e0800044 	addi	r2,fp,1
 8002820:	8106f626 	beq	r16,r4,80043fc <___vfprintf_internal_r+0x2078>
 8002824:	857ff404 	addi	r21,r16,-48
 8002828:	1039883a 	mov	fp,r2
 800282c:	0013883a 	mov	r9,zero
 8002830:	957f3d36 	bltu	r18,r21,8002528 <__alt_data_end+0xfc002528>
 8002834:	0009883a 	mov	r4,zero
 8002838:	01400284 	movi	r5,10
 800283c:	800c2f80 	call	800c2f8 <__mulsi3>
 8002840:	e4000007 	ldb	r16,0(fp)
 8002844:	a889883a 	add	r4,r21,r2
 8002848:	e7000044 	addi	fp,fp,1
 800284c:	857ff404 	addi	r21,r16,-48
 8002850:	957ff92e 	bgeu	r18,r21,8002838 <__alt_data_end+0xfc002838>
 8002854:	2013883a 	mov	r9,r4
 8002858:	203f330e 	bge	r4,zero,8002528 <__alt_data_end+0xfc002528>
 800285c:	027fffc4 	movi	r9,-1
 8002860:	003f3106 	br	8002528 <__alt_data_end+0xfc002528>
 8002864:	9cc02014 	ori	r19,r19,128
 8002868:	e005883a 	mov	r2,fp
 800286c:	e4000007 	ldb	r16,0(fp)
 8002870:	003f2c06 	br	8002524 <__alt_data_end+0xfc002524>
 8002874:	857ff404 	addi	r21,r16,-48
 8002878:	d8012e15 	stw	zero,1208(sp)
 800287c:	e021883a 	mov	r16,fp
 8002880:	0009883a 	mov	r4,zero
 8002884:	da412c15 	stw	r9,1200(sp)
 8002888:	01400284 	movi	r5,10
 800288c:	800c2f80 	call	800c2f8 <__mulsi3>
 8002890:	81400007 	ldb	r5,0(r16)
 8002894:	1549883a 	add	r4,r2,r21
 8002898:	e7000044 	addi	fp,fp,1
 800289c:	2d7ff404 	addi	r21,r5,-48
 80028a0:	e021883a 	mov	r16,fp
 80028a4:	957ff82e 	bgeu	r18,r21,8002888 <__alt_data_end+0xfc002888>
 80028a8:	2821883a 	mov	r16,r5
 80028ac:	d9012e15 	stw	r4,1208(sp)
 80028b0:	da412c17 	ldw	r9,1200(sp)
 80028b4:	003f1c06 	br	8002528 <__alt_data_end+0xfc002528>
 80028b8:	da012a17 	ldw	r8,1192(sp)
 80028bc:	df012a15 	stw	fp,1192(sp)
 80028c0:	9839883a 	mov	fp,r19
 80028c4:	dcc12b03 	ldbu	r19,1196(sp)
 80028c8:	e7000414 	ori	fp,fp,16
 80028cc:	e080080c 	andi	r2,fp,32
 80028d0:	dcc12785 	stb	r19,1182(sp)
 80028d4:	d8c12d17 	ldw	r3,1204(sp)
 80028d8:	1001ce26 	beq	r2,zero,8003014 <___vfprintf_internal_r+0xc90>
 80028dc:	d9012d17 	ldw	r4,1204(sp)
 80028e0:	18800117 	ldw	r2,4(r3)
 80028e4:	1c800017 	ldw	r18,0(r3)
 80028e8:	21000204 	addi	r4,r4,8
 80028ec:	d9012d15 	stw	r4,1204(sp)
 80028f0:	102b883a 	mov	r21,r2
 80028f4:	10044916 	blt	r2,zero,8003a1c <___vfprintf_internal_r+0x1698>
 80028f8:	dcc12783 	ldbu	r19,1182(sp)
 80028fc:	da413215 	stw	r9,1224(sp)
 8002900:	00800044 	movi	r2,1
 8002904:	9546b03a 	or	r3,r18,r21
 8002908:	48000216 	blt	r9,zero,8002914 <___vfprintf_internal_r+0x590>
 800290c:	013fdfc4 	movi	r4,-129
 8002910:	e138703a 	and	fp,fp,r4
 8002914:	1802251e 	bne	r3,zero,80031ac <___vfprintf_internal_r+0xe28>
 8002918:	48031726 	beq	r9,zero,8003578 <___vfprintf_internal_r+0x11f4>
 800291c:	10803fcc 	andi	r2,r2,255
 8002920:	00c00044 	movi	r3,1
 8002924:	10c24526 	beq	r2,r3,800323c <___vfprintf_internal_r+0xeb8>
 8002928:	00c00084 	movi	r3,2
 800292c:	10c33426 	beq	r2,r3,8003600 <___vfprintf_internal_r+0x127c>
 8002930:	d8c10e04 	addi	r3,sp,1080
 8002934:	9008d0fa 	srli	r4,r18,3
 8002938:	a80a977a 	slli	r5,r21,29
 800293c:	a82ad0fa 	srli	r21,r21,3
 8002940:	948001cc 	andi	r18,r18,7
 8002944:	90800c04 	addi	r2,r18,48
 8002948:	18ffffc4 	addi	r3,r3,-1
 800294c:	2924b03a 	or	r18,r5,r4
 8002950:	18800005 	stb	r2,0(r3)
 8002954:	9548b03a 	or	r4,r18,r21
 8002958:	203ff61e 	bne	r4,zero,8002934 <__alt_data_end+0xfc002934>
 800295c:	e100004c 	andi	r4,fp,1
 8002960:	d8c13115 	stw	r3,1220(sp)
 8002964:	20039a1e 	bne	r4,zero,80037d0 <___vfprintf_internal_r+0x144c>
 8002968:	d8812817 	ldw	r2,1184(sp)
 800296c:	10e3c83a 	sub	r17,r2,r3
 8002970:	8805883a 	mov	r2,r17
 8002974:	8a40010e 	bge	r17,r9,800297c <___vfprintf_internal_r+0x5f8>
 8002978:	4805883a 	mov	r2,r9
 800297c:	d8812b15 	stw	r2,1196(sp)
 8002980:	d8013415 	stw	zero,1232(sp)
 8002984:	98803fcc 	andi	r2,r19,255
 8002988:	1080201c 	xori	r2,r2,128
 800298c:	10bfe004 	addi	r2,r2,-128
 8002990:	10000326 	beq	r2,zero,80029a0 <___vfprintf_internal_r+0x61c>
 8002994:	d8c12b17 	ldw	r3,1196(sp)
 8002998:	18c00044 	addi	r3,r3,1
 800299c:	d8c12b15 	stw	r3,1196(sp)
 80029a0:	e0c0008c 	andi	r3,fp,2
 80029a4:	d8c12c15 	stw	r3,1200(sp)
 80029a8:	18000326 	beq	r3,zero,80029b8 <___vfprintf_internal_r+0x634>
 80029ac:	d8c12b17 	ldw	r3,1196(sp)
 80029b0:	18c00084 	addi	r3,r3,2
 80029b4:	d8c12b15 	stw	r3,1196(sp)
 80029b8:	e0c0210c 	andi	r3,fp,132
 80029bc:	d8c13015 	stw	r3,1216(sp)
 80029c0:	1801f81e 	bne	r3,zero,80031a4 <___vfprintf_internal_r+0xe20>
 80029c4:	d9012e17 	ldw	r4,1208(sp)
 80029c8:	d8c12b17 	ldw	r3,1196(sp)
 80029cc:	20ebc83a 	sub	r21,r4,r3
 80029d0:	0541f40e 	bge	zero,r21,80031a4 <___vfprintf_internal_r+0xe20>
 80029d4:	02400404 	movi	r9,16
 80029d8:	d8c12017 	ldw	r3,1152(sp)
 80029dc:	d8811f17 	ldw	r2,1148(sp)
 80029e0:	4d45750e 	bge	r9,r21,8003fb8 <___vfprintf_internal_r+0x1c34>
 80029e4:	01420074 	movhi	r5,2049
 80029e8:	2946cc84 	addi	r5,r5,6962
 80029ec:	d9413615 	stw	r5,1240(sp)
 80029f0:	4827883a 	mov	r19,r9
 80029f4:	048001c4 	movi	r18,7
 80029f8:	00000306 	br	8002a08 <___vfprintf_internal_r+0x684>
 80029fc:	ad7ffc04 	addi	r21,r21,-16
 8002a00:	42000204 	addi	r8,r8,8
 8002a04:	9d40130e 	bge	r19,r21,8002a54 <___vfprintf_internal_r+0x6d0>
 8002a08:	01020074 	movhi	r4,2049
 8002a0c:	18c00404 	addi	r3,r3,16
 8002a10:	10800044 	addi	r2,r2,1
 8002a14:	2106cc84 	addi	r4,r4,6962
 8002a18:	41000015 	stw	r4,0(r8)
 8002a1c:	44c00115 	stw	r19,4(r8)
 8002a20:	d8c12015 	stw	r3,1152(sp)
 8002a24:	d8811f15 	stw	r2,1148(sp)
 8002a28:	90bff40e 	bge	r18,r2,80029fc <__alt_data_end+0xfc0029fc>
 8002a2c:	b809883a 	mov	r4,r23
 8002a30:	b00b883a 	mov	r5,r22
 8002a34:	d9811e04 	addi	r6,sp,1144
 8002a38:	80097c40 	call	80097c4 <__sprint_r>
 8002a3c:	103f691e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8002a40:	ad7ffc04 	addi	r21,r21,-16
 8002a44:	d8c12017 	ldw	r3,1152(sp)
 8002a48:	d8811f17 	ldw	r2,1148(sp)
 8002a4c:	da000404 	addi	r8,sp,16
 8002a50:	9d7fed16 	blt	r19,r21,8002a08 <__alt_data_end+0xfc002a08>
 8002a54:	d9413617 	ldw	r5,1240(sp)
 8002a58:	a8c7883a 	add	r3,r21,r3
 8002a5c:	10800044 	addi	r2,r2,1
 8002a60:	41400015 	stw	r5,0(r8)
 8002a64:	45400115 	stw	r21,4(r8)
 8002a68:	d8c12015 	stw	r3,1152(sp)
 8002a6c:	d8811f15 	stw	r2,1148(sp)
 8002a70:	010001c4 	movi	r4,7
 8002a74:	20832b16 	blt	r4,r2,8003724 <___vfprintf_internal_r+0x13a0>
 8002a78:	d8812787 	ldb	r2,1182(sp)
 8002a7c:	42000204 	addi	r8,r8,8
 8002a80:	10000c26 	beq	r2,zero,8002ab4 <___vfprintf_internal_r+0x730>
 8002a84:	d8811f17 	ldw	r2,1148(sp)
 8002a88:	d9012784 	addi	r4,sp,1182
 8002a8c:	18c00044 	addi	r3,r3,1
 8002a90:	10800044 	addi	r2,r2,1
 8002a94:	41000015 	stw	r4,0(r8)
 8002a98:	01000044 	movi	r4,1
 8002a9c:	41000115 	stw	r4,4(r8)
 8002aa0:	d8c12015 	stw	r3,1152(sp)
 8002aa4:	d8811f15 	stw	r2,1148(sp)
 8002aa8:	010001c4 	movi	r4,7
 8002aac:	2082c416 	blt	r4,r2,80035c0 <___vfprintf_internal_r+0x123c>
 8002ab0:	42000204 	addi	r8,r8,8
 8002ab4:	d8812c17 	ldw	r2,1200(sp)
 8002ab8:	10000c26 	beq	r2,zero,8002aec <___vfprintf_internal_r+0x768>
 8002abc:	d8811f17 	ldw	r2,1148(sp)
 8002ac0:	d9012704 	addi	r4,sp,1180
 8002ac4:	18c00084 	addi	r3,r3,2
 8002ac8:	10800044 	addi	r2,r2,1
 8002acc:	41000015 	stw	r4,0(r8)
 8002ad0:	01000084 	movi	r4,2
 8002ad4:	41000115 	stw	r4,4(r8)
 8002ad8:	d8c12015 	stw	r3,1152(sp)
 8002adc:	d8811f15 	stw	r2,1148(sp)
 8002ae0:	010001c4 	movi	r4,7
 8002ae4:	2082be16 	blt	r4,r2,80035e0 <___vfprintf_internal_r+0x125c>
 8002ae8:	42000204 	addi	r8,r8,8
 8002aec:	d9013017 	ldw	r4,1216(sp)
 8002af0:	00802004 	movi	r2,128
 8002af4:	20822026 	beq	r4,r2,8003378 <___vfprintf_internal_r+0xff4>
 8002af8:	d9413217 	ldw	r5,1224(sp)
 8002afc:	2c67c83a 	sub	r19,r5,r17
 8002b00:	04c0260e 	bge	zero,r19,8002b9c <___vfprintf_internal_r+0x818>
 8002b04:	05400404 	movi	r21,16
 8002b08:	d8811f17 	ldw	r2,1148(sp)
 8002b0c:	acc4720e 	bge	r21,r19,8003cd8 <___vfprintf_internal_r+0x1954>
 8002b10:	01420074 	movhi	r5,2049
 8002b14:	2946c884 	addi	r5,r5,6946
 8002b18:	d9412c15 	stw	r5,1200(sp)
 8002b1c:	048001c4 	movi	r18,7
 8002b20:	00000306 	br	8002b30 <___vfprintf_internal_r+0x7ac>
 8002b24:	9cfffc04 	addi	r19,r19,-16
 8002b28:	42000204 	addi	r8,r8,8
 8002b2c:	acc0110e 	bge	r21,r19,8002b74 <___vfprintf_internal_r+0x7f0>
 8002b30:	18c00404 	addi	r3,r3,16
 8002b34:	10800044 	addi	r2,r2,1
 8002b38:	45000015 	stw	r20,0(r8)
 8002b3c:	45400115 	stw	r21,4(r8)
 8002b40:	d8c12015 	stw	r3,1152(sp)
 8002b44:	d8811f15 	stw	r2,1148(sp)
 8002b48:	90bff60e 	bge	r18,r2,8002b24 <__alt_data_end+0xfc002b24>
 8002b4c:	b809883a 	mov	r4,r23
 8002b50:	b00b883a 	mov	r5,r22
 8002b54:	d9811e04 	addi	r6,sp,1144
 8002b58:	80097c40 	call	80097c4 <__sprint_r>
 8002b5c:	103f211e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8002b60:	9cfffc04 	addi	r19,r19,-16
 8002b64:	d8c12017 	ldw	r3,1152(sp)
 8002b68:	d8811f17 	ldw	r2,1148(sp)
 8002b6c:	da000404 	addi	r8,sp,16
 8002b70:	acffef16 	blt	r21,r19,8002b30 <__alt_data_end+0xfc002b30>
 8002b74:	d9012c17 	ldw	r4,1200(sp)
 8002b78:	1cc7883a 	add	r3,r3,r19
 8002b7c:	10800044 	addi	r2,r2,1
 8002b80:	41000015 	stw	r4,0(r8)
 8002b84:	44c00115 	stw	r19,4(r8)
 8002b88:	d8c12015 	stw	r3,1152(sp)
 8002b8c:	d8811f15 	stw	r2,1148(sp)
 8002b90:	010001c4 	movi	r4,7
 8002b94:	20828216 	blt	r4,r2,80035a0 <___vfprintf_internal_r+0x121c>
 8002b98:	42000204 	addi	r8,r8,8
 8002b9c:	e080400c 	andi	r2,fp,256
 8002ba0:	1001ac1e 	bne	r2,zero,8003254 <___vfprintf_internal_r+0xed0>
 8002ba4:	d8811f17 	ldw	r2,1148(sp)
 8002ba8:	d9413117 	ldw	r5,1220(sp)
 8002bac:	1c47883a 	add	r3,r3,r17
 8002bb0:	10800044 	addi	r2,r2,1
 8002bb4:	41400015 	stw	r5,0(r8)
 8002bb8:	44400115 	stw	r17,4(r8)
 8002bbc:	d8c12015 	stw	r3,1152(sp)
 8002bc0:	d8811f15 	stw	r2,1148(sp)
 8002bc4:	010001c4 	movi	r4,7
 8002bc8:	20825d16 	blt	r4,r2,8003540 <___vfprintf_internal_r+0x11bc>
 8002bcc:	42000204 	addi	r8,r8,8
 8002bd0:	e080010c 	andi	r2,fp,4
 8002bd4:	10003126 	beq	r2,zero,8002c9c <___vfprintf_internal_r+0x918>
 8002bd8:	d8812e17 	ldw	r2,1208(sp)
 8002bdc:	d9012b17 	ldw	r4,1196(sp)
 8002be0:	1121c83a 	sub	r16,r2,r4
 8002be4:	04002d0e 	bge	zero,r16,8002c9c <___vfprintf_internal_r+0x918>
 8002be8:	04400404 	movi	r17,16
 8002bec:	d8811f17 	ldw	r2,1148(sp)
 8002bf0:	8c05340e 	bge	r17,r16,80040c4 <___vfprintf_internal_r+0x1d40>
 8002bf4:	01020074 	movhi	r4,2049
 8002bf8:	2106cc84 	addi	r4,r4,6962
 8002bfc:	d9013615 	stw	r4,1240(sp)
 8002c00:	048001c4 	movi	r18,7
 8002c04:	00000306 	br	8002c14 <___vfprintf_internal_r+0x890>
 8002c08:	843ffc04 	addi	r16,r16,-16
 8002c0c:	42000204 	addi	r8,r8,8
 8002c10:	8c00130e 	bge	r17,r16,8002c60 <___vfprintf_internal_r+0x8dc>
 8002c14:	01420074 	movhi	r5,2049
 8002c18:	18c00404 	addi	r3,r3,16
 8002c1c:	10800044 	addi	r2,r2,1
 8002c20:	2946cc84 	addi	r5,r5,6962
 8002c24:	41400015 	stw	r5,0(r8)
 8002c28:	44400115 	stw	r17,4(r8)
 8002c2c:	d8c12015 	stw	r3,1152(sp)
 8002c30:	d8811f15 	stw	r2,1148(sp)
 8002c34:	90bff40e 	bge	r18,r2,8002c08 <__alt_data_end+0xfc002c08>
 8002c38:	b809883a 	mov	r4,r23
 8002c3c:	b00b883a 	mov	r5,r22
 8002c40:	d9811e04 	addi	r6,sp,1144
 8002c44:	80097c40 	call	80097c4 <__sprint_r>
 8002c48:	103ee61e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8002c4c:	843ffc04 	addi	r16,r16,-16
 8002c50:	d8c12017 	ldw	r3,1152(sp)
 8002c54:	d8811f17 	ldw	r2,1148(sp)
 8002c58:	da000404 	addi	r8,sp,16
 8002c5c:	8c3fed16 	blt	r17,r16,8002c14 <__alt_data_end+0xfc002c14>
 8002c60:	d9013617 	ldw	r4,1240(sp)
 8002c64:	1c07883a 	add	r3,r3,r16
 8002c68:	10800044 	addi	r2,r2,1
 8002c6c:	41000015 	stw	r4,0(r8)
 8002c70:	44000115 	stw	r16,4(r8)
 8002c74:	d8c12015 	stw	r3,1152(sp)
 8002c78:	d8811f15 	stw	r2,1148(sp)
 8002c7c:	010001c4 	movi	r4,7
 8002c80:	2080060e 	bge	r4,r2,8002c9c <___vfprintf_internal_r+0x918>
 8002c84:	b809883a 	mov	r4,r23
 8002c88:	b00b883a 	mov	r5,r22
 8002c8c:	d9811e04 	addi	r6,sp,1144
 8002c90:	80097c40 	call	80097c4 <__sprint_r>
 8002c94:	103ed31e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8002c98:	d8c12017 	ldw	r3,1152(sp)
 8002c9c:	df012b17 	ldw	fp,1196(sp)
 8002ca0:	d9412e17 	ldw	r5,1208(sp)
 8002ca4:	e140010e 	bge	fp,r5,8002cac <___vfprintf_internal_r+0x928>
 8002ca8:	2839883a 	mov	fp,r5
 8002cac:	d8812f17 	ldw	r2,1212(sp)
 8002cb0:	1705883a 	add	r2,r2,fp
 8002cb4:	d8812f15 	stw	r2,1212(sp)
 8002cb8:	1802291e 	bne	r3,zero,8003560 <___vfprintf_internal_r+0x11dc>
 8002cbc:	d8c12a17 	ldw	r3,1192(sp)
 8002cc0:	d8011f15 	stw	zero,1148(sp)
 8002cc4:	da000404 	addi	r8,sp,16
 8002cc8:	18800007 	ldb	r2,0(r3)
 8002ccc:	103ded1e 	bne	r2,zero,8002484 <__alt_data_end+0xfc002484>
 8002cd0:	dc012a17 	ldw	r16,1192(sp)
 8002cd4:	003e0506 	br	80024ec <__alt_data_end+0xfc0024ec>
 8002cd8:	d9012d17 	ldw	r4,1204(sp)
 8002cdc:	d9412d17 	ldw	r5,1204(sp)
 8002ce0:	da012a17 	ldw	r8,1192(sp)
 8002ce4:	21000017 	ldw	r4,0(r4)
 8002ce8:	29400117 	ldw	r5,4(r5)
 8002cec:	df012a15 	stw	fp,1192(sp)
 8002cf0:	9839883a 	mov	fp,r19
 8002cf4:	dcc12b03 	ldbu	r19,1196(sp)
 8002cf8:	d9013715 	stw	r4,1244(sp)
 8002cfc:	d9413915 	stw	r5,1252(sp)
 8002d00:	da013f15 	stw	r8,1276(sp)
 8002d04:	da413e15 	stw	r9,1272(sp)
 8002d08:	dcc12785 	stb	r19,1182(sp)
 8002d0c:	80094200 	call	8009420 <__fpclassifyd>
 8002d10:	d8c12d17 	ldw	r3,1204(sp)
 8002d14:	04400044 	movi	r17,1
 8002d18:	da013f17 	ldw	r8,1276(sp)
 8002d1c:	1c800204 	addi	r18,r3,8
 8002d20:	da413e17 	ldw	r9,1272(sp)
 8002d24:	d9013717 	ldw	r4,1244(sp)
 8002d28:	d9413917 	ldw	r5,1252(sp)
 8002d2c:	1443451e 	bne	r2,r17,8003a44 <___vfprintf_internal_r+0x16c0>
 8002d30:	000d883a 	mov	r6,zero
 8002d34:	000f883a 	mov	r7,zero
 8002d38:	800d6a00 	call	800d6a0 <__ledf2>
 8002d3c:	da013f17 	ldw	r8,1276(sp)
 8002d40:	1004fe16 	blt	r2,zero,800413c <___vfprintf_internal_r+0x1db8>
 8002d44:	dcc12783 	ldbu	r19,1182(sp)
 8002d48:	008011c4 	movi	r2,71
 8002d4c:	14045d0e 	bge	r2,r16,8003ec4 <___vfprintf_internal_r+0x1b40>
 8002d50:	01420074 	movhi	r5,2049
 8002d54:	2946b904 	addi	r5,r5,6884
 8002d58:	d9413115 	stw	r5,1220(sp)
 8002d5c:	00c000c4 	movi	r3,3
 8002d60:	00bfdfc4 	movi	r2,-129
 8002d64:	d8c12b15 	stw	r3,1196(sp)
 8002d68:	e0b8703a 	and	fp,fp,r2
 8002d6c:	dc812d15 	stw	r18,1204(sp)
 8002d70:	1823883a 	mov	r17,r3
 8002d74:	d8013215 	stw	zero,1224(sp)
 8002d78:	d8013415 	stw	zero,1232(sp)
 8002d7c:	003f0106 	br	8002984 <__alt_data_end+0xfc002984>
 8002d80:	9cc00214 	ori	r19,r19,8
 8002d84:	e005883a 	mov	r2,fp
 8002d88:	e4000007 	ldb	r16,0(fp)
 8002d8c:	003de506 	br	8002524 <__alt_data_end+0xfc002524>
 8002d90:	da012a17 	ldw	r8,1192(sp)
 8002d94:	df012a15 	stw	fp,1192(sp)
 8002d98:	9f000414 	ori	fp,r19,16
 8002d9c:	e0c0080c 	andi	r3,fp,32
 8002da0:	d8812d17 	ldw	r2,1204(sp)
 8002da4:	18007626 	beq	r3,zero,8002f80 <___vfprintf_internal_r+0xbfc>
 8002da8:	d9412d17 	ldw	r5,1204(sp)
 8002dac:	14800017 	ldw	r18,0(r2)
 8002db0:	15400117 	ldw	r21,4(r2)
 8002db4:	29400204 	addi	r5,r5,8
 8002db8:	d9412d15 	stw	r5,1204(sp)
 8002dbc:	0005883a 	mov	r2,zero
 8002dc0:	9546b03a 	or	r3,r18,r21
 8002dc4:	d8012785 	stb	zero,1182(sp)
 8002dc8:	da413215 	stw	r9,1224(sp)
 8002dcc:	0027883a 	mov	r19,zero
 8002dd0:	003ecd06 	br	8002908 <__alt_data_end+0xfc002908>
 8002dd4:	da012a17 	ldw	r8,1192(sp)
 8002dd8:	df012a15 	stw	fp,1192(sp)
 8002ddc:	9f000414 	ori	fp,r19,16
 8002de0:	e0c0080c 	andi	r3,fp,32
 8002de4:	d8812d17 	ldw	r2,1204(sp)
 8002de8:	18002c26 	beq	r3,zero,8002e9c <___vfprintf_internal_r+0xb18>
 8002dec:	d9012d17 	ldw	r4,1204(sp)
 8002df0:	14800017 	ldw	r18,0(r2)
 8002df4:	15400117 	ldw	r21,4(r2)
 8002df8:	21000204 	addi	r4,r4,8
 8002dfc:	d9012d15 	stw	r4,1204(sp)
 8002e00:	00800044 	movi	r2,1
 8002e04:	9546b03a 	or	r3,r18,r21
 8002e08:	003fee06 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8002e0c:	da012a17 	ldw	r8,1192(sp)
 8002e10:	df012a15 	stw	fp,1192(sp)
 8002e14:	9839883a 	mov	fp,r19
 8002e18:	dcc12b03 	ldbu	r19,1196(sp)
 8002e1c:	01420074 	movhi	r5,2049
 8002e20:	2946bc04 	addi	r5,r5,6896
 8002e24:	dcc12785 	stb	r19,1182(sp)
 8002e28:	d9413b15 	stw	r5,1260(sp)
 8002e2c:	e0c0080c 	andi	r3,fp,32
 8002e30:	d8812d17 	ldw	r2,1204(sp)
 8002e34:	18002e26 	beq	r3,zero,8002ef0 <___vfprintf_internal_r+0xb6c>
 8002e38:	d9412d17 	ldw	r5,1204(sp)
 8002e3c:	14800017 	ldw	r18,0(r2)
 8002e40:	15400117 	ldw	r21,4(r2)
 8002e44:	29400204 	addi	r5,r5,8
 8002e48:	d9412d15 	stw	r5,1204(sp)
 8002e4c:	e080004c 	andi	r2,fp,1
 8002e50:	10025c26 	beq	r2,zero,80037c4 <___vfprintf_internal_r+0x1440>
 8002e54:	9546b03a 	or	r3,r18,r21
 8002e58:	18038f26 	beq	r3,zero,8003c98 <___vfprintf_internal_r+0x1914>
 8002e5c:	00800c04 	movi	r2,48
 8002e60:	d8812705 	stb	r2,1180(sp)
 8002e64:	dc012745 	stb	r16,1181(sp)
 8002e68:	e7000094 	ori	fp,fp,2
 8002e6c:	00800084 	movi	r2,2
 8002e70:	003fd406 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8002e74:	9cc00814 	ori	r19,r19,32
 8002e78:	e005883a 	mov	r2,fp
 8002e7c:	e4000007 	ldb	r16,0(fp)
 8002e80:	003da806 	br	8002524 <__alt_data_end+0xfc002524>
 8002e84:	da012a17 	ldw	r8,1192(sp)
 8002e88:	df012a15 	stw	fp,1192(sp)
 8002e8c:	9839883a 	mov	fp,r19
 8002e90:	e0c0080c 	andi	r3,fp,32
 8002e94:	d8812d17 	ldw	r2,1204(sp)
 8002e98:	183fd41e 	bne	r3,zero,8002dec <__alt_data_end+0xfc002dec>
 8002e9c:	e0c0040c 	andi	r3,fp,16
 8002ea0:	18035f26 	beq	r3,zero,8003c20 <___vfprintf_internal_r+0x189c>
 8002ea4:	d9412d17 	ldw	r5,1204(sp)
 8002ea8:	14800017 	ldw	r18,0(r2)
 8002eac:	002b883a 	mov	r21,zero
 8002eb0:	29400104 	addi	r5,r5,4
 8002eb4:	d9412d15 	stw	r5,1204(sp)
 8002eb8:	00800044 	movi	r2,1
 8002ebc:	9007883a 	mov	r3,r18
 8002ec0:	003fc006 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8002ec4:	da012a17 	ldw	r8,1192(sp)
 8002ec8:	df012a15 	stw	fp,1192(sp)
 8002ecc:	9839883a 	mov	fp,r19
 8002ed0:	dcc12b03 	ldbu	r19,1196(sp)
 8002ed4:	01020074 	movhi	r4,2049
 8002ed8:	2106c104 	addi	r4,r4,6916
 8002edc:	d9013b15 	stw	r4,1260(sp)
 8002ee0:	dcc12785 	stb	r19,1182(sp)
 8002ee4:	e0c0080c 	andi	r3,fp,32
 8002ee8:	d8812d17 	ldw	r2,1204(sp)
 8002eec:	183fd21e 	bne	r3,zero,8002e38 <__alt_data_end+0xfc002e38>
 8002ef0:	e0c0040c 	andi	r3,fp,16
 8002ef4:	18035426 	beq	r3,zero,8003c48 <___vfprintf_internal_r+0x18c4>
 8002ef8:	d8c12d17 	ldw	r3,1204(sp)
 8002efc:	14800017 	ldw	r18,0(r2)
 8002f00:	002b883a 	mov	r21,zero
 8002f04:	18c00104 	addi	r3,r3,4
 8002f08:	d8c12d15 	stw	r3,1204(sp)
 8002f0c:	003fcf06 	br	8002e4c <__alt_data_end+0xfc002e4c>
 8002f10:	e4000007 	ldb	r16,0(fp)
 8002f14:	00801b04 	movi	r2,108
 8002f18:	8083f726 	beq	r16,r2,8003ef8 <___vfprintf_internal_r+0x1b74>
 8002f1c:	9cc00414 	ori	r19,r19,16
 8002f20:	e005883a 	mov	r2,fp
 8002f24:	003d7f06 	br	8002524 <__alt_data_end+0xfc002524>
 8002f28:	da012a17 	ldw	r8,1192(sp)
 8002f2c:	df012a15 	stw	fp,1192(sp)
 8002f30:	9839883a 	mov	fp,r19
 8002f34:	dcc12b03 	ldbu	r19,1196(sp)
 8002f38:	e080080c 	andi	r2,fp,32
 8002f3c:	dcc12785 	stb	r19,1182(sp)
 8002f40:	10032226 	beq	r2,zero,8003bcc <___vfprintf_internal_r+0x1848>
 8002f44:	d9412d17 	ldw	r5,1204(sp)
 8002f48:	d9012f17 	ldw	r4,1212(sp)
 8002f4c:	28800017 	ldw	r2,0(r5)
 8002f50:	2007d7fa 	srai	r3,r4,31
 8002f54:	29400104 	addi	r5,r5,4
 8002f58:	d9412d15 	stw	r5,1204(sp)
 8002f5c:	11000015 	stw	r4,0(r2)
 8002f60:	10c00115 	stw	r3,4(r2)
 8002f64:	003d4406 	br	8002478 <__alt_data_end+0xfc002478>
 8002f68:	da012a17 	ldw	r8,1192(sp)
 8002f6c:	df012a15 	stw	fp,1192(sp)
 8002f70:	9839883a 	mov	fp,r19
 8002f74:	e0c0080c 	andi	r3,fp,32
 8002f78:	d8812d17 	ldw	r2,1204(sp)
 8002f7c:	183f8a1e 	bne	r3,zero,8002da8 <__alt_data_end+0xfc002da8>
 8002f80:	e0c0040c 	andi	r3,fp,16
 8002f84:	18031c26 	beq	r3,zero,8003bf8 <___vfprintf_internal_r+0x1874>
 8002f88:	14800017 	ldw	r18,0(r2)
 8002f8c:	d8812d17 	ldw	r2,1204(sp)
 8002f90:	002b883a 	mov	r21,zero
 8002f94:	9007883a 	mov	r3,r18
 8002f98:	10800104 	addi	r2,r2,4
 8002f9c:	d8812d15 	stw	r2,1204(sp)
 8002fa0:	0005883a 	mov	r2,zero
 8002fa4:	003f8706 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8002fa8:	d9412d17 	ldw	r5,1204(sp)
 8002fac:	00800c04 	movi	r2,48
 8002fb0:	d8812705 	stb	r2,1180(sp)
 8002fb4:	2c800017 	ldw	r18,0(r5)
 8002fb8:	00801e04 	movi	r2,120
 8002fbc:	d8812745 	stb	r2,1181(sp)
 8002fc0:	00820074 	movhi	r2,2049
 8002fc4:	1086c104 	addi	r2,r2,6916
 8002fc8:	29400104 	addi	r5,r5,4
 8002fcc:	da012a17 	ldw	r8,1192(sp)
 8002fd0:	d8813b15 	stw	r2,1260(sp)
 8002fd4:	df012a15 	stw	fp,1192(sp)
 8002fd8:	002b883a 	mov	r21,zero
 8002fdc:	9f000094 	ori	fp,r19,2
 8002fe0:	d9412d15 	stw	r5,1204(sp)
 8002fe4:	00800084 	movi	r2,2
 8002fe8:	04001e04 	movi	r16,120
 8002fec:	9007883a 	mov	r3,r18
 8002ff0:	003f7406 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8002ff4:	da012a17 	ldw	r8,1192(sp)
 8002ff8:	df012a15 	stw	fp,1192(sp)
 8002ffc:	9839883a 	mov	fp,r19
 8003000:	dcc12b03 	ldbu	r19,1196(sp)
 8003004:	e080080c 	andi	r2,fp,32
 8003008:	d8c12d17 	ldw	r3,1204(sp)
 800300c:	dcc12785 	stb	r19,1182(sp)
 8003010:	103e321e 	bne	r2,zero,80028dc <__alt_data_end+0xfc0028dc>
 8003014:	e080040c 	andi	r2,fp,16
 8003018:	10031326 	beq	r2,zero,8003c68 <___vfprintf_internal_r+0x18e4>
 800301c:	1c800017 	ldw	r18,0(r3)
 8003020:	d9412d17 	ldw	r5,1204(sp)
 8003024:	902bd7fa 	srai	r21,r18,31
 8003028:	29400104 	addi	r5,r5,4
 800302c:	d9412d15 	stw	r5,1204(sp)
 8003030:	a805883a 	mov	r2,r21
 8003034:	003e2f06 	br	80028f4 <__alt_data_end+0xfc0028f4>
 8003038:	9cc01014 	ori	r19,r19,64
 800303c:	e005883a 	mov	r2,fp
 8003040:	e4000007 	ldb	r16,0(fp)
 8003044:	003d3706 	br	8002524 <__alt_data_end+0xfc002524>
 8003048:	d8c12d17 	ldw	r3,1204(sp)
 800304c:	d9012d17 	ldw	r4,1204(sp)
 8003050:	da012a17 	ldw	r8,1192(sp)
 8003054:	18800017 	ldw	r2,0(r3)
 8003058:	21000104 	addi	r4,r4,4
 800305c:	00c00044 	movi	r3,1
 8003060:	df012a15 	stw	fp,1192(sp)
 8003064:	d8c12b15 	stw	r3,1196(sp)
 8003068:	9839883a 	mov	fp,r19
 800306c:	d8012785 	stb	zero,1182(sp)
 8003070:	d8810405 	stb	r2,1040(sp)
 8003074:	d9012d15 	stw	r4,1204(sp)
 8003078:	1823883a 	mov	r17,r3
 800307c:	d8c10404 	addi	r3,sp,1040
 8003080:	d8013215 	stw	zero,1224(sp)
 8003084:	d8013415 	stw	zero,1232(sp)
 8003088:	d8c13115 	stw	r3,1220(sp)
 800308c:	0005883a 	mov	r2,zero
 8003090:	003e4306 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8003094:	d8812b07 	ldb	r2,1196(sp)
 8003098:	1002fc1e 	bne	r2,zero,8003c8c <___vfprintf_internal_r+0x1908>
 800309c:	00c00804 	movi	r3,32
 80030a0:	d8c12b05 	stb	r3,1196(sp)
 80030a4:	e005883a 	mov	r2,fp
 80030a8:	e4000007 	ldb	r16,0(fp)
 80030ac:	003d1d06 	br	8002524 <__alt_data_end+0xfc002524>
 80030b0:	9cc00054 	ori	r19,r19,1
 80030b4:	e005883a 	mov	r2,fp
 80030b8:	e4000007 	ldb	r16,0(fp)
 80030bc:	003d1906 	br	8002524 <__alt_data_end+0xfc002524>
 80030c0:	d9012d17 	ldw	r4,1204(sp)
 80030c4:	d9412d17 	ldw	r5,1204(sp)
 80030c8:	21000017 	ldw	r4,0(r4)
 80030cc:	28c00104 	addi	r3,r5,4
 80030d0:	d9012e15 	stw	r4,1208(sp)
 80030d4:	20038c16 	blt	r4,zero,8003f08 <___vfprintf_internal_r+0x1b84>
 80030d8:	d8c12d15 	stw	r3,1204(sp)
 80030dc:	e005883a 	mov	r2,fp
 80030e0:	e4000007 	ldb	r16,0(fp)
 80030e4:	003d0f06 	br	8002524 <__alt_data_end+0xfc002524>
 80030e8:	00c00ac4 	movi	r3,43
 80030ec:	d8c12b05 	stb	r3,1196(sp)
 80030f0:	e005883a 	mov	r2,fp
 80030f4:	e4000007 	ldb	r16,0(fp)
 80030f8:	003d0a06 	br	8002524 <__alt_data_end+0xfc002524>
 80030fc:	d8c12d17 	ldw	r3,1204(sp)
 8003100:	d9012d17 	ldw	r4,1204(sp)
 8003104:	da012a17 	ldw	r8,1192(sp)
 8003108:	18c00017 	ldw	r3,0(r3)
 800310c:	df012a15 	stw	fp,1192(sp)
 8003110:	d8012785 	stb	zero,1182(sp)
 8003114:	d8c13115 	stw	r3,1220(sp)
 8003118:	9839883a 	mov	fp,r19
 800311c:	24800104 	addi	r18,r4,4
 8003120:	1803f726 	beq	r3,zero,8004100 <___vfprintf_internal_r+0x1d7c>
 8003124:	d9013117 	ldw	r4,1220(sp)
 8003128:	48038916 	blt	r9,zero,8003f50 <___vfprintf_internal_r+0x1bcc>
 800312c:	480d883a 	mov	r6,r9
 8003130:	000b883a 	mov	r5,zero
 8003134:	da013f15 	stw	r8,1276(sp)
 8003138:	da413e15 	stw	r9,1272(sp)
 800313c:	80079980 	call	8007998 <memchr>
 8003140:	da013f17 	ldw	r8,1276(sp)
 8003144:	da413e17 	ldw	r9,1272(sp)
 8003148:	10045926 	beq	r2,zero,80042b0 <___vfprintf_internal_r+0x1f2c>
 800314c:	d8c13117 	ldw	r3,1220(sp)
 8003150:	10e3c83a 	sub	r17,r2,r3
 8003154:	4c433516 	blt	r9,r17,8003e2c <___vfprintf_internal_r+0x1aa8>
 8003158:	8805883a 	mov	r2,r17
 800315c:	88038116 	blt	r17,zero,8003f64 <___vfprintf_internal_r+0x1be0>
 8003160:	dcc12783 	ldbu	r19,1182(sp)
 8003164:	d8812b15 	stw	r2,1196(sp)
 8003168:	dc812d15 	stw	r18,1204(sp)
 800316c:	d8013215 	stw	zero,1224(sp)
 8003170:	d8013415 	stw	zero,1232(sp)
 8003174:	003e0306 	br	8002984 <__alt_data_end+0xfc002984>
 8003178:	da012a17 	ldw	r8,1192(sp)
 800317c:	df012a15 	stw	fp,1192(sp)
 8003180:	9839883a 	mov	fp,r19
 8003184:	dcc12b03 	ldbu	r19,1196(sp)
 8003188:	dcc12785 	stb	r19,1182(sp)
 800318c:	803d8f26 	beq	r16,zero,80027cc <__alt_data_end+0xfc0027cc>
 8003190:	00c00044 	movi	r3,1
 8003194:	d8c12b15 	stw	r3,1196(sp)
 8003198:	dc010405 	stb	r16,1040(sp)
 800319c:	d8012785 	stb	zero,1182(sp)
 80031a0:	003fb506 	br	8003078 <__alt_data_end+0xfc003078>
 80031a4:	d8c12017 	ldw	r3,1152(sp)
 80031a8:	003e3506 	br	8002a80 <__alt_data_end+0xfc002a80>
 80031ac:	10803fcc 	andi	r2,r2,255
 80031b0:	00c00044 	movi	r3,1
 80031b4:	10fddc1e 	bne	r2,r3,8002928 <__alt_data_end+0xfc002928>
 80031b8:	a800021e 	bne	r21,zero,80031c4 <___vfprintf_internal_r+0xe40>
 80031bc:	00800244 	movi	r2,9
 80031c0:	14801e2e 	bgeu	r2,r18,800323c <___vfprintf_internal_r+0xeb8>
 80031c4:	dc012b15 	stw	r16,1196(sp)
 80031c8:	dc410e04 	addi	r17,sp,1080
 80031cc:	9021883a 	mov	r16,r18
 80031d0:	da012c15 	stw	r8,1200(sp)
 80031d4:	a825883a 	mov	r18,r21
 80031d8:	482b883a 	mov	r21,r9
 80031dc:	8009883a 	mov	r4,r16
 80031e0:	900b883a 	mov	r5,r18
 80031e4:	01800284 	movi	r6,10
 80031e8:	000f883a 	mov	r7,zero
 80031ec:	800bbb00 	call	800bbb0 <__umoddi3>
 80031f0:	10800c04 	addi	r2,r2,48
 80031f4:	8c7fffc4 	addi	r17,r17,-1
 80031f8:	8009883a 	mov	r4,r16
 80031fc:	900b883a 	mov	r5,r18
 8003200:	01800284 	movi	r6,10
 8003204:	000f883a 	mov	r7,zero
 8003208:	88800005 	stb	r2,0(r17)
 800320c:	800b5700 	call	800b570 <__udivdi3>
 8003210:	1021883a 	mov	r16,r2
 8003214:	10c4b03a 	or	r2,r2,r3
 8003218:	1825883a 	mov	r18,r3
 800321c:	103fef1e 	bne	r2,zero,80031dc <__alt_data_end+0xfc0031dc>
 8003220:	d9012817 	ldw	r4,1184(sp)
 8003224:	dc413115 	stw	r17,1220(sp)
 8003228:	dc012b17 	ldw	r16,1196(sp)
 800322c:	da012c17 	ldw	r8,1200(sp)
 8003230:	a813883a 	mov	r9,r21
 8003234:	2463c83a 	sub	r17,r4,r17
 8003238:	003dcd06 	br	8002970 <__alt_data_end+0xfc002970>
 800323c:	94800c04 	addi	r18,r18,48
 8003240:	d8c10dc4 	addi	r3,sp,1079
 8003244:	dc810dc5 	stb	r18,1079(sp)
 8003248:	dc413c17 	ldw	r17,1264(sp)
 800324c:	d8c13115 	stw	r3,1220(sp)
 8003250:	003dc706 	br	8002970 <__alt_data_end+0xfc002970>
 8003254:	00801944 	movi	r2,101
 8003258:	1400720e 	bge	r2,r16,8003424 <___vfprintf_internal_r+0x10a0>
 800325c:	d9013717 	ldw	r4,1244(sp)
 8003260:	d9413917 	ldw	r5,1252(sp)
 8003264:	000d883a 	mov	r6,zero
 8003268:	000f883a 	mov	r7,zero
 800326c:	d8c13d15 	stw	r3,1268(sp)
 8003270:	da013f15 	stw	r8,1276(sp)
 8003274:	800d53c0 	call	800d53c <__eqdf2>
 8003278:	d8c13d17 	ldw	r3,1268(sp)
 800327c:	da013f17 	ldw	r8,1276(sp)
 8003280:	1000f41e 	bne	r2,zero,8003654 <___vfprintf_internal_r+0x12d0>
 8003284:	d8811f17 	ldw	r2,1148(sp)
 8003288:	01020074 	movhi	r4,2049
 800328c:	2106c804 	addi	r4,r4,6944
 8003290:	18c00044 	addi	r3,r3,1
 8003294:	10800044 	addi	r2,r2,1
 8003298:	41000015 	stw	r4,0(r8)
 800329c:	01000044 	movi	r4,1
 80032a0:	41000115 	stw	r4,4(r8)
 80032a4:	d8c12015 	stw	r3,1152(sp)
 80032a8:	d8811f15 	stw	r2,1148(sp)
 80032ac:	010001c4 	movi	r4,7
 80032b0:	20828d16 	blt	r4,r2,8003ce8 <___vfprintf_internal_r+0x1964>
 80032b4:	42000204 	addi	r8,r8,8
 80032b8:	d8812617 	ldw	r2,1176(sp)
 80032bc:	d9413317 	ldw	r5,1228(sp)
 80032c0:	11400216 	blt	r2,r5,80032cc <___vfprintf_internal_r+0xf48>
 80032c4:	e080004c 	andi	r2,fp,1
 80032c8:	103e4126 	beq	r2,zero,8002bd0 <__alt_data_end+0xfc002bd0>
 80032cc:	d8813817 	ldw	r2,1248(sp)
 80032d0:	d9013517 	ldw	r4,1236(sp)
 80032d4:	d9413817 	ldw	r5,1248(sp)
 80032d8:	1887883a 	add	r3,r3,r2
 80032dc:	d8811f17 	ldw	r2,1148(sp)
 80032e0:	41000015 	stw	r4,0(r8)
 80032e4:	41400115 	stw	r5,4(r8)
 80032e8:	10800044 	addi	r2,r2,1
 80032ec:	d8c12015 	stw	r3,1152(sp)
 80032f0:	d8811f15 	stw	r2,1148(sp)
 80032f4:	010001c4 	movi	r4,7
 80032f8:	20830916 	blt	r4,r2,8003f20 <___vfprintf_internal_r+0x1b9c>
 80032fc:	42000204 	addi	r8,r8,8
 8003300:	d8813317 	ldw	r2,1228(sp)
 8003304:	143fffc4 	addi	r16,r2,-1
 8003308:	043e310e 	bge	zero,r16,8002bd0 <__alt_data_end+0xfc002bd0>
 800330c:	04400404 	movi	r17,16
 8003310:	d8811f17 	ldw	r2,1148(sp)
 8003314:	8c007e0e 	bge	r17,r16,8003510 <___vfprintf_internal_r+0x118c>
 8003318:	01420074 	movhi	r5,2049
 800331c:	2946c884 	addi	r5,r5,6946
 8003320:	d9412c15 	stw	r5,1200(sp)
 8003324:	04c001c4 	movi	r19,7
 8003328:	00000306 	br	8003338 <___vfprintf_internal_r+0xfb4>
 800332c:	42000204 	addi	r8,r8,8
 8003330:	843ffc04 	addi	r16,r16,-16
 8003334:	8c00790e 	bge	r17,r16,800351c <___vfprintf_internal_r+0x1198>
 8003338:	18c00404 	addi	r3,r3,16
 800333c:	10800044 	addi	r2,r2,1
 8003340:	45000015 	stw	r20,0(r8)
 8003344:	44400115 	stw	r17,4(r8)
 8003348:	d8c12015 	stw	r3,1152(sp)
 800334c:	d8811f15 	stw	r2,1148(sp)
 8003350:	98bff60e 	bge	r19,r2,800332c <__alt_data_end+0xfc00332c>
 8003354:	b809883a 	mov	r4,r23
 8003358:	b00b883a 	mov	r5,r22
 800335c:	d9811e04 	addi	r6,sp,1144
 8003360:	80097c40 	call	80097c4 <__sprint_r>
 8003364:	103d1f1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003368:	d8c12017 	ldw	r3,1152(sp)
 800336c:	d8811f17 	ldw	r2,1148(sp)
 8003370:	da000404 	addi	r8,sp,16
 8003374:	003fee06 	br	8003330 <__alt_data_end+0xfc003330>
 8003378:	d9412e17 	ldw	r5,1208(sp)
 800337c:	d8812b17 	ldw	r2,1196(sp)
 8003380:	28a7c83a 	sub	r19,r5,r2
 8003384:	04fddc0e 	bge	zero,r19,8002af8 <__alt_data_end+0xfc002af8>
 8003388:	05400404 	movi	r21,16
 800338c:	d8811f17 	ldw	r2,1148(sp)
 8003390:	acc3870e 	bge	r21,r19,80041b0 <___vfprintf_internal_r+0x1e2c>
 8003394:	01420074 	movhi	r5,2049
 8003398:	2946c884 	addi	r5,r5,6946
 800339c:	d9412c15 	stw	r5,1200(sp)
 80033a0:	048001c4 	movi	r18,7
 80033a4:	00000306 	br	80033b4 <___vfprintf_internal_r+0x1030>
 80033a8:	9cfffc04 	addi	r19,r19,-16
 80033ac:	42000204 	addi	r8,r8,8
 80033b0:	acc0110e 	bge	r21,r19,80033f8 <___vfprintf_internal_r+0x1074>
 80033b4:	18c00404 	addi	r3,r3,16
 80033b8:	10800044 	addi	r2,r2,1
 80033bc:	45000015 	stw	r20,0(r8)
 80033c0:	45400115 	stw	r21,4(r8)
 80033c4:	d8c12015 	stw	r3,1152(sp)
 80033c8:	d8811f15 	stw	r2,1148(sp)
 80033cc:	90bff60e 	bge	r18,r2,80033a8 <__alt_data_end+0xfc0033a8>
 80033d0:	b809883a 	mov	r4,r23
 80033d4:	b00b883a 	mov	r5,r22
 80033d8:	d9811e04 	addi	r6,sp,1144
 80033dc:	80097c40 	call	80097c4 <__sprint_r>
 80033e0:	103d001e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80033e4:	9cfffc04 	addi	r19,r19,-16
 80033e8:	d8c12017 	ldw	r3,1152(sp)
 80033ec:	d8811f17 	ldw	r2,1148(sp)
 80033f0:	da000404 	addi	r8,sp,16
 80033f4:	acffef16 	blt	r21,r19,80033b4 <__alt_data_end+0xfc0033b4>
 80033f8:	d9012c17 	ldw	r4,1200(sp)
 80033fc:	1cc7883a 	add	r3,r3,r19
 8003400:	10800044 	addi	r2,r2,1
 8003404:	41000015 	stw	r4,0(r8)
 8003408:	44c00115 	stw	r19,4(r8)
 800340c:	d8c12015 	stw	r3,1152(sp)
 8003410:	d8811f15 	stw	r2,1148(sp)
 8003414:	010001c4 	movi	r4,7
 8003418:	20817816 	blt	r4,r2,80039fc <___vfprintf_internal_r+0x1678>
 800341c:	42000204 	addi	r8,r8,8
 8003420:	003db506 	br	8002af8 <__alt_data_end+0xfc002af8>
 8003424:	d9413317 	ldw	r5,1228(sp)
 8003428:	00800044 	movi	r2,1
 800342c:	18c00044 	addi	r3,r3,1
 8003430:	11413e0e 	bge	r2,r5,800392c <___vfprintf_internal_r+0x15a8>
 8003434:	dc011f17 	ldw	r16,1148(sp)
 8003438:	d8813117 	ldw	r2,1220(sp)
 800343c:	d8c12015 	stw	r3,1152(sp)
 8003440:	84000044 	addi	r16,r16,1
 8003444:	40800015 	stw	r2,0(r8)
 8003448:	00800044 	movi	r2,1
 800344c:	40800115 	stw	r2,4(r8)
 8003450:	dc011f15 	stw	r16,1148(sp)
 8003454:	008001c4 	movi	r2,7
 8003458:	14015616 	blt	r2,r16,80039b4 <___vfprintf_internal_r+0x1630>
 800345c:	42000204 	addi	r8,r8,8
 8003460:	d9013817 	ldw	r4,1248(sp)
 8003464:	d9413517 	ldw	r5,1236(sp)
 8003468:	84000044 	addi	r16,r16,1
 800346c:	1907883a 	add	r3,r3,r4
 8003470:	41400015 	stw	r5,0(r8)
 8003474:	41000115 	stw	r4,4(r8)
 8003478:	d8c12015 	stw	r3,1152(sp)
 800347c:	dc011f15 	stw	r16,1148(sp)
 8003480:	008001c4 	movi	r2,7
 8003484:	14015416 	blt	r2,r16,80039d8 <___vfprintf_internal_r+0x1654>
 8003488:	44400204 	addi	r17,r8,8
 800348c:	d9013717 	ldw	r4,1244(sp)
 8003490:	d9413917 	ldw	r5,1252(sp)
 8003494:	000d883a 	mov	r6,zero
 8003498:	000f883a 	mov	r7,zero
 800349c:	d8c13d15 	stw	r3,1268(sp)
 80034a0:	800d53c0 	call	800d53c <__eqdf2>
 80034a4:	d8c13d17 	ldw	r3,1268(sp)
 80034a8:	1000a726 	beq	r2,zero,8003748 <___vfprintf_internal_r+0x13c4>
 80034ac:	d9013317 	ldw	r4,1228(sp)
 80034b0:	d9413117 	ldw	r5,1220(sp)
 80034b4:	84000044 	addi	r16,r16,1
 80034b8:	20bfffc4 	addi	r2,r4,-1
 80034bc:	1887883a 	add	r3,r3,r2
 80034c0:	29000044 	addi	r4,r5,1
 80034c4:	88800115 	stw	r2,4(r17)
 80034c8:	89000015 	stw	r4,0(r17)
 80034cc:	d8c12015 	stw	r3,1152(sp)
 80034d0:	dc011f15 	stw	r16,1148(sp)
 80034d4:	008001c4 	movi	r2,7
 80034d8:	14012d16 	blt	r2,r16,8003990 <___vfprintf_internal_r+0x160c>
 80034dc:	8c400204 	addi	r17,r17,8
 80034e0:	d9413a17 	ldw	r5,1256(sp)
 80034e4:	dcc122c4 	addi	r19,sp,1163
 80034e8:	84000044 	addi	r16,r16,1
 80034ec:	28c7883a 	add	r3,r5,r3
 80034f0:	8cc00015 	stw	r19,0(r17)
 80034f4:	89400115 	stw	r5,4(r17)
 80034f8:	d8c12015 	stw	r3,1152(sp)
 80034fc:	dc011f15 	stw	r16,1148(sp)
 8003500:	008001c4 	movi	r2,7
 8003504:	14000e16 	blt	r2,r16,8003540 <___vfprintf_internal_r+0x11bc>
 8003508:	8a000204 	addi	r8,r17,8
 800350c:	003db006 	br	8002bd0 <__alt_data_end+0xfc002bd0>
 8003510:	01020074 	movhi	r4,2049
 8003514:	2106c884 	addi	r4,r4,6946
 8003518:	d9012c15 	stw	r4,1200(sp)
 800351c:	d9012c17 	ldw	r4,1200(sp)
 8003520:	1c07883a 	add	r3,r3,r16
 8003524:	44000115 	stw	r16,4(r8)
 8003528:	41000015 	stw	r4,0(r8)
 800352c:	10800044 	addi	r2,r2,1
 8003530:	d8c12015 	stw	r3,1152(sp)
 8003534:	d8811f15 	stw	r2,1148(sp)
 8003538:	010001c4 	movi	r4,7
 800353c:	20bda30e 	bge	r4,r2,8002bcc <__alt_data_end+0xfc002bcc>
 8003540:	b809883a 	mov	r4,r23
 8003544:	b00b883a 	mov	r5,r22
 8003548:	d9811e04 	addi	r6,sp,1144
 800354c:	80097c40 	call	80097c4 <__sprint_r>
 8003550:	103ca41e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003554:	d8c12017 	ldw	r3,1152(sp)
 8003558:	da000404 	addi	r8,sp,16
 800355c:	003d9c06 	br	8002bd0 <__alt_data_end+0xfc002bd0>
 8003560:	b809883a 	mov	r4,r23
 8003564:	b00b883a 	mov	r5,r22
 8003568:	d9811e04 	addi	r6,sp,1144
 800356c:	80097c40 	call	80097c4 <__sprint_r>
 8003570:	103dd226 	beq	r2,zero,8002cbc <__alt_data_end+0xfc002cbc>
 8003574:	003c9b06 	br	80027e4 <__alt_data_end+0xfc0027e4>
 8003578:	10803fcc 	andi	r2,r2,255
 800357c:	1000311e 	bne	r2,zero,8003644 <___vfprintf_internal_r+0x12c0>
 8003580:	e080004c 	andi	r2,fp,1
 8003584:	10002f26 	beq	r2,zero,8003644 <___vfprintf_internal_r+0x12c0>
 8003588:	00800c04 	movi	r2,48
 800358c:	d8c10dc4 	addi	r3,sp,1079
 8003590:	d8810dc5 	stb	r2,1079(sp)
 8003594:	dc413c17 	ldw	r17,1264(sp)
 8003598:	d8c13115 	stw	r3,1220(sp)
 800359c:	003cf406 	br	8002970 <__alt_data_end+0xfc002970>
 80035a0:	b809883a 	mov	r4,r23
 80035a4:	b00b883a 	mov	r5,r22
 80035a8:	d9811e04 	addi	r6,sp,1144
 80035ac:	80097c40 	call	80097c4 <__sprint_r>
 80035b0:	103c8c1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80035b4:	d8c12017 	ldw	r3,1152(sp)
 80035b8:	da000404 	addi	r8,sp,16
 80035bc:	003d7706 	br	8002b9c <__alt_data_end+0xfc002b9c>
 80035c0:	b809883a 	mov	r4,r23
 80035c4:	b00b883a 	mov	r5,r22
 80035c8:	d9811e04 	addi	r6,sp,1144
 80035cc:	80097c40 	call	80097c4 <__sprint_r>
 80035d0:	103c841e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80035d4:	d8c12017 	ldw	r3,1152(sp)
 80035d8:	da000404 	addi	r8,sp,16
 80035dc:	003d3506 	br	8002ab4 <__alt_data_end+0xfc002ab4>
 80035e0:	b809883a 	mov	r4,r23
 80035e4:	b00b883a 	mov	r5,r22
 80035e8:	d9811e04 	addi	r6,sp,1144
 80035ec:	80097c40 	call	80097c4 <__sprint_r>
 80035f0:	103c7c1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80035f4:	d8c12017 	ldw	r3,1152(sp)
 80035f8:	da000404 	addi	r8,sp,16
 80035fc:	003d3b06 	br	8002aec <__alt_data_end+0xfc002aec>
 8003600:	d9413b17 	ldw	r5,1260(sp)
 8003604:	d8c10e04 	addi	r3,sp,1080
 8003608:	908003cc 	andi	r2,r18,15
 800360c:	a808973a 	slli	r4,r21,28
 8003610:	2885883a 	add	r2,r5,r2
 8003614:	9024d13a 	srli	r18,r18,4
 8003618:	10800003 	ldbu	r2,0(r2)
 800361c:	a82ad13a 	srli	r21,r21,4
 8003620:	18ffffc4 	addi	r3,r3,-1
 8003624:	24a4b03a 	or	r18,r4,r18
 8003628:	18800005 	stb	r2,0(r3)
 800362c:	9544b03a 	or	r2,r18,r21
 8003630:	103ff51e 	bne	r2,zero,8003608 <__alt_data_end+0xfc003608>
 8003634:	d9412817 	ldw	r5,1184(sp)
 8003638:	d8c13115 	stw	r3,1220(sp)
 800363c:	28e3c83a 	sub	r17,r5,r3
 8003640:	003ccb06 	br	8002970 <__alt_data_end+0xfc002970>
 8003644:	d8c10e04 	addi	r3,sp,1080
 8003648:	0023883a 	mov	r17,zero
 800364c:	d8c13115 	stw	r3,1220(sp)
 8003650:	003cc706 	br	8002970 <__alt_data_end+0xfc002970>
 8003654:	dc012617 	ldw	r16,1176(sp)
 8003658:	0401ab0e 	bge	zero,r16,8003d08 <___vfprintf_internal_r+0x1984>
 800365c:	d8813317 	ldw	r2,1228(sp)
 8003660:	d9413117 	ldw	r5,1220(sp)
 8003664:	d9013417 	ldw	r4,1232(sp)
 8003668:	1023883a 	mov	r17,r2
 800366c:	28a1883a 	add	r16,r5,r2
 8003670:	2080010e 	bge	r4,r2,8003678 <___vfprintf_internal_r+0x12f4>
 8003674:	2023883a 	mov	r17,r4
 8003678:	04400b0e 	bge	zero,r17,80036a8 <___vfprintf_internal_r+0x1324>
 800367c:	d8811f17 	ldw	r2,1148(sp)
 8003680:	d9413117 	ldw	r5,1220(sp)
 8003684:	1c47883a 	add	r3,r3,r17
 8003688:	10800044 	addi	r2,r2,1
 800368c:	41400015 	stw	r5,0(r8)
 8003690:	44400115 	stw	r17,4(r8)
 8003694:	d8c12015 	stw	r3,1152(sp)
 8003698:	d8811f15 	stw	r2,1148(sp)
 800369c:	010001c4 	movi	r4,7
 80036a0:	20826716 	blt	r4,r2,8004040 <___vfprintf_internal_r+0x1cbc>
 80036a4:	42000204 	addi	r8,r8,8
 80036a8:	88026316 	blt	r17,zero,8004038 <___vfprintf_internal_r+0x1cb4>
 80036ac:	d8813417 	ldw	r2,1232(sp)
 80036b0:	1463c83a 	sub	r17,r2,r17
 80036b4:	0440590e 	bge	zero,r17,800381c <___vfprintf_internal_r+0x1498>
 80036b8:	04c00404 	movi	r19,16
 80036bc:	d8811f17 	ldw	r2,1148(sp)
 80036c0:	9c41770e 	bge	r19,r17,8003ca0 <___vfprintf_internal_r+0x191c>
 80036c4:	01420074 	movhi	r5,2049
 80036c8:	2946c884 	addi	r5,r5,6946
 80036cc:	d9412c15 	stw	r5,1200(sp)
 80036d0:	054001c4 	movi	r21,7
 80036d4:	00000306 	br	80036e4 <___vfprintf_internal_r+0x1360>
 80036d8:	42000204 	addi	r8,r8,8
 80036dc:	8c7ffc04 	addi	r17,r17,-16
 80036e0:	9c41720e 	bge	r19,r17,8003cac <___vfprintf_internal_r+0x1928>
 80036e4:	18c00404 	addi	r3,r3,16
 80036e8:	10800044 	addi	r2,r2,1
 80036ec:	45000015 	stw	r20,0(r8)
 80036f0:	44c00115 	stw	r19,4(r8)
 80036f4:	d8c12015 	stw	r3,1152(sp)
 80036f8:	d8811f15 	stw	r2,1148(sp)
 80036fc:	a8bff60e 	bge	r21,r2,80036d8 <__alt_data_end+0xfc0036d8>
 8003700:	b809883a 	mov	r4,r23
 8003704:	b00b883a 	mov	r5,r22
 8003708:	d9811e04 	addi	r6,sp,1144
 800370c:	80097c40 	call	80097c4 <__sprint_r>
 8003710:	103c341e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003714:	d8c12017 	ldw	r3,1152(sp)
 8003718:	d8811f17 	ldw	r2,1148(sp)
 800371c:	da000404 	addi	r8,sp,16
 8003720:	003fee06 	br	80036dc <__alt_data_end+0xfc0036dc>
 8003724:	b809883a 	mov	r4,r23
 8003728:	b00b883a 	mov	r5,r22
 800372c:	d9811e04 	addi	r6,sp,1144
 8003730:	80097c40 	call	80097c4 <__sprint_r>
 8003734:	103c2b1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003738:	d8c12017 	ldw	r3,1152(sp)
 800373c:	d8812787 	ldb	r2,1182(sp)
 8003740:	da000404 	addi	r8,sp,16
 8003744:	003cce06 	br	8002a80 <__alt_data_end+0xfc002a80>
 8003748:	d8813317 	ldw	r2,1228(sp)
 800374c:	14ffffc4 	addi	r19,r2,-1
 8003750:	04ff630e 	bge	zero,r19,80034e0 <__alt_data_end+0xfc0034e0>
 8003754:	05400404 	movi	r21,16
 8003758:	acc0810e 	bge	r21,r19,8003960 <___vfprintf_internal_r+0x15dc>
 800375c:	01420074 	movhi	r5,2049
 8003760:	2946c884 	addi	r5,r5,6946
 8003764:	d9412c15 	stw	r5,1200(sp)
 8003768:	01c001c4 	movi	r7,7
 800376c:	00000306 	br	800377c <___vfprintf_internal_r+0x13f8>
 8003770:	8c400204 	addi	r17,r17,8
 8003774:	9cfffc04 	addi	r19,r19,-16
 8003778:	acc07c0e 	bge	r21,r19,800396c <___vfprintf_internal_r+0x15e8>
 800377c:	18c00404 	addi	r3,r3,16
 8003780:	84000044 	addi	r16,r16,1
 8003784:	8d000015 	stw	r20,0(r17)
 8003788:	8d400115 	stw	r21,4(r17)
 800378c:	d8c12015 	stw	r3,1152(sp)
 8003790:	dc011f15 	stw	r16,1148(sp)
 8003794:	3c3ff60e 	bge	r7,r16,8003770 <__alt_data_end+0xfc003770>
 8003798:	b809883a 	mov	r4,r23
 800379c:	b00b883a 	mov	r5,r22
 80037a0:	d9811e04 	addi	r6,sp,1144
 80037a4:	d9c13d15 	stw	r7,1268(sp)
 80037a8:	80097c40 	call	80097c4 <__sprint_r>
 80037ac:	d9c13d17 	ldw	r7,1268(sp)
 80037b0:	103c0c1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80037b4:	d8c12017 	ldw	r3,1152(sp)
 80037b8:	dc011f17 	ldw	r16,1148(sp)
 80037bc:	dc400404 	addi	r17,sp,16
 80037c0:	003fec06 	br	8003774 <__alt_data_end+0xfc003774>
 80037c4:	00800084 	movi	r2,2
 80037c8:	9546b03a 	or	r3,r18,r21
 80037cc:	003d7d06 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 80037d0:	10803fcc 	andi	r2,r2,255
 80037d4:	1080201c 	xori	r2,r2,128
 80037d8:	10bfe004 	addi	r2,r2,-128
 80037dc:	01000c04 	movi	r4,48
 80037e0:	1101d726 	beq	r2,r4,8003f40 <___vfprintf_internal_r+0x1bbc>
 80037e4:	d9413117 	ldw	r5,1220(sp)
 80037e8:	d8812817 	ldw	r2,1184(sp)
 80037ec:	193fffc5 	stb	r4,-1(r3)
 80037f0:	297fffc4 	addi	r5,r5,-1
 80037f4:	d9413115 	stw	r5,1220(sp)
 80037f8:	1163c83a 	sub	r17,r2,r5
 80037fc:	003c5c06 	br	8002970 <__alt_data_end+0xfc002970>
 8003800:	b809883a 	mov	r4,r23
 8003804:	b00b883a 	mov	r5,r22
 8003808:	d9811e04 	addi	r6,sp,1144
 800380c:	80097c40 	call	80097c4 <__sprint_r>
 8003810:	103bf41e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003814:	d8c12017 	ldw	r3,1152(sp)
 8003818:	da000404 	addi	r8,sp,16
 800381c:	d9413117 	ldw	r5,1220(sp)
 8003820:	d9013417 	ldw	r4,1232(sp)
 8003824:	d8812617 	ldw	r2,1176(sp)
 8003828:	2923883a 	add	r17,r5,r4
 800382c:	d9413317 	ldw	r5,1228(sp)
 8003830:	11400216 	blt	r2,r5,800383c <___vfprintf_internal_r+0x14b8>
 8003834:	e100004c 	andi	r4,fp,1
 8003838:	20000d26 	beq	r4,zero,8003870 <___vfprintf_internal_r+0x14ec>
 800383c:	d9013817 	ldw	r4,1248(sp)
 8003840:	d9413517 	ldw	r5,1236(sp)
 8003844:	1907883a 	add	r3,r3,r4
 8003848:	d9011f17 	ldw	r4,1148(sp)
 800384c:	41400015 	stw	r5,0(r8)
 8003850:	d9413817 	ldw	r5,1248(sp)
 8003854:	21000044 	addi	r4,r4,1
 8003858:	d8c12015 	stw	r3,1152(sp)
 800385c:	41400115 	stw	r5,4(r8)
 8003860:	d9011f15 	stw	r4,1148(sp)
 8003864:	014001c4 	movi	r5,7
 8003868:	2901fd16 	blt	r5,r4,8004060 <___vfprintf_internal_r+0x1cdc>
 800386c:	42000204 	addi	r8,r8,8
 8003870:	d9013317 	ldw	r4,1228(sp)
 8003874:	2085c83a 	sub	r2,r4,r2
 8003878:	8449c83a 	sub	r4,r16,r17
 800387c:	1021883a 	mov	r16,r2
 8003880:	2080010e 	bge	r4,r2,8003888 <___vfprintf_internal_r+0x1504>
 8003884:	2021883a 	mov	r16,r4
 8003888:	04000a0e 	bge	zero,r16,80038b4 <___vfprintf_internal_r+0x1530>
 800388c:	d9011f17 	ldw	r4,1148(sp)
 8003890:	1c07883a 	add	r3,r3,r16
 8003894:	44400015 	stw	r17,0(r8)
 8003898:	21000044 	addi	r4,r4,1
 800389c:	44000115 	stw	r16,4(r8)
 80038a0:	d8c12015 	stw	r3,1152(sp)
 80038a4:	d9011f15 	stw	r4,1148(sp)
 80038a8:	014001c4 	movi	r5,7
 80038ac:	29020916 	blt	r5,r4,80040d4 <___vfprintf_internal_r+0x1d50>
 80038b0:	42000204 	addi	r8,r8,8
 80038b4:	80020116 	blt	r16,zero,80040bc <___vfprintf_internal_r+0x1d38>
 80038b8:	1421c83a 	sub	r16,r2,r16
 80038bc:	043cc40e 	bge	zero,r16,8002bd0 <__alt_data_end+0xfc002bd0>
 80038c0:	04400404 	movi	r17,16
 80038c4:	d8811f17 	ldw	r2,1148(sp)
 80038c8:	8c3f110e 	bge	r17,r16,8003510 <__alt_data_end+0xfc003510>
 80038cc:	01420074 	movhi	r5,2049
 80038d0:	2946c884 	addi	r5,r5,6946
 80038d4:	d9412c15 	stw	r5,1200(sp)
 80038d8:	04c001c4 	movi	r19,7
 80038dc:	00000306 	br	80038ec <___vfprintf_internal_r+0x1568>
 80038e0:	42000204 	addi	r8,r8,8
 80038e4:	843ffc04 	addi	r16,r16,-16
 80038e8:	8c3f0c0e 	bge	r17,r16,800351c <__alt_data_end+0xfc00351c>
 80038ec:	18c00404 	addi	r3,r3,16
 80038f0:	10800044 	addi	r2,r2,1
 80038f4:	45000015 	stw	r20,0(r8)
 80038f8:	44400115 	stw	r17,4(r8)
 80038fc:	d8c12015 	stw	r3,1152(sp)
 8003900:	d8811f15 	stw	r2,1148(sp)
 8003904:	98bff60e 	bge	r19,r2,80038e0 <__alt_data_end+0xfc0038e0>
 8003908:	b809883a 	mov	r4,r23
 800390c:	b00b883a 	mov	r5,r22
 8003910:	d9811e04 	addi	r6,sp,1144
 8003914:	80097c40 	call	80097c4 <__sprint_r>
 8003918:	103bb21e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 800391c:	d8c12017 	ldw	r3,1152(sp)
 8003920:	d8811f17 	ldw	r2,1148(sp)
 8003924:	da000404 	addi	r8,sp,16
 8003928:	003fee06 	br	80038e4 <__alt_data_end+0xfc0038e4>
 800392c:	e088703a 	and	r4,fp,r2
 8003930:	203ec01e 	bne	r4,zero,8003434 <__alt_data_end+0xfc003434>
 8003934:	dc011f17 	ldw	r16,1148(sp)
 8003938:	d9013117 	ldw	r4,1220(sp)
 800393c:	40800115 	stw	r2,4(r8)
 8003940:	84000044 	addi	r16,r16,1
 8003944:	41000015 	stw	r4,0(r8)
 8003948:	d8c12015 	stw	r3,1152(sp)
 800394c:	dc011f15 	stw	r16,1148(sp)
 8003950:	008001c4 	movi	r2,7
 8003954:	14000e16 	blt	r2,r16,8003990 <___vfprintf_internal_r+0x160c>
 8003958:	44400204 	addi	r17,r8,8
 800395c:	003ee006 	br	80034e0 <__alt_data_end+0xfc0034e0>
 8003960:	01020074 	movhi	r4,2049
 8003964:	2106c884 	addi	r4,r4,6946
 8003968:	d9012c15 	stw	r4,1200(sp)
 800396c:	d8812c17 	ldw	r2,1200(sp)
 8003970:	1cc7883a 	add	r3,r3,r19
 8003974:	84000044 	addi	r16,r16,1
 8003978:	88800015 	stw	r2,0(r17)
 800397c:	8cc00115 	stw	r19,4(r17)
 8003980:	d8c12015 	stw	r3,1152(sp)
 8003984:	dc011f15 	stw	r16,1148(sp)
 8003988:	008001c4 	movi	r2,7
 800398c:	143ed30e 	bge	r2,r16,80034dc <__alt_data_end+0xfc0034dc>
 8003990:	b809883a 	mov	r4,r23
 8003994:	b00b883a 	mov	r5,r22
 8003998:	d9811e04 	addi	r6,sp,1144
 800399c:	80097c40 	call	80097c4 <__sprint_r>
 80039a0:	103b901e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80039a4:	d8c12017 	ldw	r3,1152(sp)
 80039a8:	dc011f17 	ldw	r16,1148(sp)
 80039ac:	dc400404 	addi	r17,sp,16
 80039b0:	003ecb06 	br	80034e0 <__alt_data_end+0xfc0034e0>
 80039b4:	b809883a 	mov	r4,r23
 80039b8:	b00b883a 	mov	r5,r22
 80039bc:	d9811e04 	addi	r6,sp,1144
 80039c0:	80097c40 	call	80097c4 <__sprint_r>
 80039c4:	103b871e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80039c8:	d8c12017 	ldw	r3,1152(sp)
 80039cc:	dc011f17 	ldw	r16,1148(sp)
 80039d0:	da000404 	addi	r8,sp,16
 80039d4:	003ea206 	br	8003460 <__alt_data_end+0xfc003460>
 80039d8:	b809883a 	mov	r4,r23
 80039dc:	b00b883a 	mov	r5,r22
 80039e0:	d9811e04 	addi	r6,sp,1144
 80039e4:	80097c40 	call	80097c4 <__sprint_r>
 80039e8:	103b7e1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80039ec:	d8c12017 	ldw	r3,1152(sp)
 80039f0:	dc011f17 	ldw	r16,1148(sp)
 80039f4:	dc400404 	addi	r17,sp,16
 80039f8:	003ea406 	br	800348c <__alt_data_end+0xfc00348c>
 80039fc:	b809883a 	mov	r4,r23
 8003a00:	b00b883a 	mov	r5,r22
 8003a04:	d9811e04 	addi	r6,sp,1144
 8003a08:	80097c40 	call	80097c4 <__sprint_r>
 8003a0c:	103b751e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003a10:	d8c12017 	ldw	r3,1152(sp)
 8003a14:	da000404 	addi	r8,sp,16
 8003a18:	003c3706 	br	8002af8 <__alt_data_end+0xfc002af8>
 8003a1c:	04a5c83a 	sub	r18,zero,r18
 8003a20:	9004c03a 	cmpne	r2,r18,zero
 8003a24:	056bc83a 	sub	r21,zero,r21
 8003a28:	a8abc83a 	sub	r21,r21,r2
 8003a2c:	04c00b44 	movi	r19,45
 8003a30:	dcc12785 	stb	r19,1182(sp)
 8003a34:	da413215 	stw	r9,1224(sp)
 8003a38:	00800044 	movi	r2,1
 8003a3c:	9546b03a 	or	r3,r18,r21
 8003a40:	003bb106 	br	8002908 <__alt_data_end+0xfc002908>
 8003a44:	da013f15 	stw	r8,1276(sp)
 8003a48:	da413e15 	stw	r9,1272(sp)
 8003a4c:	80094200 	call	8009420 <__fpclassifyd>
 8003a50:	da013f17 	ldw	r8,1276(sp)
 8003a54:	da413e17 	ldw	r9,1272(sp)
 8003a58:	1000e526 	beq	r2,zero,8003df0 <___vfprintf_internal_r+0x1a6c>
 8003a5c:	04fff7c4 	movi	r19,-33
 8003a60:	00bfffc4 	movi	r2,-1
 8003a64:	84e6703a 	and	r19,r16,r19
 8003a68:	48822926 	beq	r9,r2,8004310 <___vfprintf_internal_r+0x1f8c>
 8003a6c:	008011c4 	movi	r2,71
 8003a70:	98821626 	beq	r19,r2,80042cc <___vfprintf_internal_r+0x1f48>
 8003a74:	d9013917 	ldw	r4,1252(sp)
 8003a78:	e0c04014 	ori	r3,fp,256
 8003a7c:	d8c12d15 	stw	r3,1204(sp)
 8003a80:	20021f16 	blt	r4,zero,8004300 <___vfprintf_internal_r+0x1f7c>
 8003a84:	dc413917 	ldw	r17,1252(sp)
 8003a88:	d8012b05 	stb	zero,1196(sp)
 8003a8c:	00801984 	movi	r2,102
 8003a90:	80814d26 	beq	r16,r2,8003fc8 <___vfprintf_internal_r+0x1c44>
 8003a94:	00801184 	movi	r2,70
 8003a98:	80814b26 	beq	r16,r2,8003fc8 <___vfprintf_internal_r+0x1c44>
 8003a9c:	00801144 	movi	r2,69
 8003aa0:	98821d26 	beq	r19,r2,8004318 <___vfprintf_internal_r+0x1f94>
 8003aa4:	482b883a 	mov	r21,r9
 8003aa8:	d8812604 	addi	r2,sp,1176
 8003aac:	d8800115 	stw	r2,4(sp)
 8003ab0:	d9413717 	ldw	r5,1244(sp)
 8003ab4:	d8812504 	addi	r2,sp,1172
 8003ab8:	d8800215 	stw	r2,8(sp)
 8003abc:	d8812104 	addi	r2,sp,1156
 8003ac0:	dd400015 	stw	r21,0(sp)
 8003ac4:	d8800315 	stw	r2,12(sp)
 8003ac8:	b809883a 	mov	r4,r23
 8003acc:	880d883a 	mov	r6,r17
 8003ad0:	01c00084 	movi	r7,2
 8003ad4:	da013f15 	stw	r8,1276(sp)
 8003ad8:	da413e15 	stw	r9,1272(sp)
 8003adc:	80047fc0 	call	80047fc <_dtoa_r>
 8003ae0:	d8813115 	stw	r2,1220(sp)
 8003ae4:	008019c4 	movi	r2,103
 8003ae8:	da013f17 	ldw	r8,1276(sp)
 8003aec:	da413e17 	ldw	r9,1272(sp)
 8003af0:	80800226 	beq	r16,r2,8003afc <___vfprintf_internal_r+0x1778>
 8003af4:	008011c4 	movi	r2,71
 8003af8:	8081451e 	bne	r16,r2,8004010 <___vfprintf_internal_r+0x1c8c>
 8003afc:	e080004c 	andi	r2,fp,1
 8003b00:	10021e26 	beq	r2,zero,800437c <___vfprintf_internal_r+0x1ff8>
 8003b04:	d8c13117 	ldw	r3,1220(sp)
 8003b08:	1d55883a 	add	r10,r3,r21
 8003b0c:	d9013717 	ldw	r4,1244(sp)
 8003b10:	880b883a 	mov	r5,r17
 8003b14:	000d883a 	mov	r6,zero
 8003b18:	000f883a 	mov	r7,zero
 8003b1c:	da013f15 	stw	r8,1276(sp)
 8003b20:	da413e15 	stw	r9,1272(sp)
 8003b24:	da813d15 	stw	r10,1268(sp)
 8003b28:	800d53c0 	call	800d53c <__eqdf2>
 8003b2c:	da013f17 	ldw	r8,1276(sp)
 8003b30:	da413e17 	ldw	r9,1272(sp)
 8003b34:	da813d17 	ldw	r10,1268(sp)
 8003b38:	1001a126 	beq	r2,zero,80041c0 <___vfprintf_internal_r+0x1e3c>
 8003b3c:	d8812117 	ldw	r2,1156(sp)
 8003b40:	1280062e 	bgeu	r2,r10,8003b5c <___vfprintf_internal_r+0x17d8>
 8003b44:	01000c04 	movi	r4,48
 8003b48:	10c00044 	addi	r3,r2,1
 8003b4c:	d8c12115 	stw	r3,1156(sp)
 8003b50:	11000005 	stb	r4,0(r2)
 8003b54:	d8812117 	ldw	r2,1156(sp)
 8003b58:	12bffb36 	bltu	r2,r10,8003b48 <__alt_data_end+0xfc003b48>
 8003b5c:	d8c13117 	ldw	r3,1220(sp)
 8003b60:	10c5c83a 	sub	r2,r2,r3
 8003b64:	d8813315 	stw	r2,1228(sp)
 8003b68:	008011c4 	movi	r2,71
 8003b6c:	98818926 	beq	r19,r2,8004194 <___vfprintf_internal_r+0x1e10>
 8003b70:	00801944 	movi	r2,101
 8003b74:	14023c0e 	bge	r2,r16,8004468 <___vfprintf_internal_r+0x20e4>
 8003b78:	d8c12617 	ldw	r3,1176(sp)
 8003b7c:	00801984 	movi	r2,102
 8003b80:	d8c13415 	stw	r3,1232(sp)
 8003b84:	8081ef26 	beq	r16,r2,8004344 <___vfprintf_internal_r+0x1fc0>
 8003b88:	d8c13417 	ldw	r3,1232(sp)
 8003b8c:	d9013317 	ldw	r4,1228(sp)
 8003b90:	1901e316 	blt	r3,r4,8004320 <___vfprintf_internal_r+0x1f9c>
 8003b94:	e080004c 	andi	r2,fp,1
 8003b98:	1001f426 	beq	r2,zero,800436c <___vfprintf_internal_r+0x1fe8>
 8003b9c:	d8c13417 	ldw	r3,1232(sp)
 8003ba0:	1c400044 	addi	r17,r3,1
 8003ba4:	8839883a 	mov	fp,r17
 8003ba8:	8801e416 	blt	r17,zero,800433c <___vfprintf_internal_r+0x1fb8>
 8003bac:	dd412b07 	ldb	r21,1196(sp)
 8003bb0:	a801701e 	bne	r21,zero,8004174 <___vfprintf_internal_r+0x1df0>
 8003bb4:	df012b15 	stw	fp,1196(sp)
 8003bb8:	dcc12783 	ldbu	r19,1182(sp)
 8003bbc:	df012d17 	ldw	fp,1204(sp)
 8003bc0:	d8013215 	stw	zero,1224(sp)
 8003bc4:	dc812d15 	stw	r18,1204(sp)
 8003bc8:	003b6e06 	br	8002984 <__alt_data_end+0xfc002984>
 8003bcc:	e080040c 	andi	r2,fp,16
 8003bd0:	1000b51e 	bne	r2,zero,8003ea8 <___vfprintf_internal_r+0x1b24>
 8003bd4:	e080100c 	andi	r2,fp,64
 8003bd8:	10015b26 	beq	r2,zero,8004148 <___vfprintf_internal_r+0x1dc4>
 8003bdc:	d9012d17 	ldw	r4,1204(sp)
 8003be0:	d9412f17 	ldw	r5,1212(sp)
 8003be4:	20800017 	ldw	r2,0(r4)
 8003be8:	21000104 	addi	r4,r4,4
 8003bec:	d9012d15 	stw	r4,1204(sp)
 8003bf0:	1140000d 	sth	r5,0(r2)
 8003bf4:	003a2006 	br	8002478 <__alt_data_end+0xfc002478>
 8003bf8:	e0c0100c 	andi	r3,fp,64
 8003bfc:	1800a226 	beq	r3,zero,8003e88 <___vfprintf_internal_r+0x1b04>
 8003c00:	d8c12d17 	ldw	r3,1204(sp)
 8003c04:	1480000b 	ldhu	r18,0(r2)
 8003c08:	002b883a 	mov	r21,zero
 8003c0c:	18c00104 	addi	r3,r3,4
 8003c10:	d8c12d15 	stw	r3,1204(sp)
 8003c14:	0005883a 	mov	r2,zero
 8003c18:	9007883a 	mov	r3,r18
 8003c1c:	003c6906 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8003c20:	e0c0100c 	andi	r3,fp,64
 8003c24:	18009026 	beq	r3,zero,8003e68 <___vfprintf_internal_r+0x1ae4>
 8003c28:	1480000b 	ldhu	r18,0(r2)
 8003c2c:	d8812d17 	ldw	r2,1204(sp)
 8003c30:	002b883a 	mov	r21,zero
 8003c34:	9007883a 	mov	r3,r18
 8003c38:	10800104 	addi	r2,r2,4
 8003c3c:	d8812d15 	stw	r2,1204(sp)
 8003c40:	00800044 	movi	r2,1
 8003c44:	003c5f06 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8003c48:	e0c0100c 	andi	r3,fp,64
 8003c4c:	18008026 	beq	r3,zero,8003e50 <___vfprintf_internal_r+0x1acc>
 8003c50:	d9012d17 	ldw	r4,1204(sp)
 8003c54:	1480000b 	ldhu	r18,0(r2)
 8003c58:	002b883a 	mov	r21,zero
 8003c5c:	21000104 	addi	r4,r4,4
 8003c60:	d9012d15 	stw	r4,1204(sp)
 8003c64:	003c7906 	br	8002e4c <__alt_data_end+0xfc002e4c>
 8003c68:	e080100c 	andi	r2,fp,64
 8003c6c:	10007126 	beq	r2,zero,8003e34 <___vfprintf_internal_r+0x1ab0>
 8003c70:	1c80000f 	ldh	r18,0(r3)
 8003c74:	d8812d17 	ldw	r2,1204(sp)
 8003c78:	902bd7fa 	srai	r21,r18,31
 8003c7c:	10800104 	addi	r2,r2,4
 8003c80:	d8812d15 	stw	r2,1204(sp)
 8003c84:	a805883a 	mov	r2,r21
 8003c88:	003b1a06 	br	80028f4 <__alt_data_end+0xfc0028f4>
 8003c8c:	e4000007 	ldb	r16,0(fp)
 8003c90:	e005883a 	mov	r2,fp
 8003c94:	003a2306 	br	8002524 <__alt_data_end+0xfc002524>
 8003c98:	00800084 	movi	r2,2
 8003c9c:	003c4906 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8003ca0:	01020074 	movhi	r4,2049
 8003ca4:	2106c884 	addi	r4,r4,6946
 8003ca8:	d9012c15 	stw	r4,1200(sp)
 8003cac:	d9012c17 	ldw	r4,1200(sp)
 8003cb0:	1c47883a 	add	r3,r3,r17
 8003cb4:	10800044 	addi	r2,r2,1
 8003cb8:	41000015 	stw	r4,0(r8)
 8003cbc:	44400115 	stw	r17,4(r8)
 8003cc0:	d8c12015 	stw	r3,1152(sp)
 8003cc4:	d8811f15 	stw	r2,1148(sp)
 8003cc8:	010001c4 	movi	r4,7
 8003ccc:	20becc16 	blt	r4,r2,8003800 <__alt_data_end+0xfc003800>
 8003cd0:	42000204 	addi	r8,r8,8
 8003cd4:	003ed106 	br	800381c <__alt_data_end+0xfc00381c>
 8003cd8:	01020074 	movhi	r4,2049
 8003cdc:	2106c884 	addi	r4,r4,6946
 8003ce0:	d9012c15 	stw	r4,1200(sp)
 8003ce4:	003ba306 	br	8002b74 <__alt_data_end+0xfc002b74>
 8003ce8:	b809883a 	mov	r4,r23
 8003cec:	b00b883a 	mov	r5,r22
 8003cf0:	d9811e04 	addi	r6,sp,1144
 8003cf4:	80097c40 	call	80097c4 <__sprint_r>
 8003cf8:	103aba1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003cfc:	d8c12017 	ldw	r3,1152(sp)
 8003d00:	da000404 	addi	r8,sp,16
 8003d04:	003d6c06 	br	80032b8 <__alt_data_end+0xfc0032b8>
 8003d08:	d8811f17 	ldw	r2,1148(sp)
 8003d0c:	01420074 	movhi	r5,2049
 8003d10:	01000044 	movi	r4,1
 8003d14:	18c00044 	addi	r3,r3,1
 8003d18:	10800044 	addi	r2,r2,1
 8003d1c:	2946c804 	addi	r5,r5,6944
 8003d20:	41000115 	stw	r4,4(r8)
 8003d24:	41400015 	stw	r5,0(r8)
 8003d28:	d8c12015 	stw	r3,1152(sp)
 8003d2c:	d8811f15 	stw	r2,1148(sp)
 8003d30:	010001c4 	movi	r4,7
 8003d34:	20806716 	blt	r4,r2,8003ed4 <___vfprintf_internal_r+0x1b50>
 8003d38:	42000204 	addi	r8,r8,8
 8003d3c:	8000041e 	bne	r16,zero,8003d50 <___vfprintf_internal_r+0x19cc>
 8003d40:	d8813317 	ldw	r2,1228(sp)
 8003d44:	1000021e 	bne	r2,zero,8003d50 <___vfprintf_internal_r+0x19cc>
 8003d48:	e080004c 	andi	r2,fp,1
 8003d4c:	103ba026 	beq	r2,zero,8002bd0 <__alt_data_end+0xfc002bd0>
 8003d50:	d9013817 	ldw	r4,1248(sp)
 8003d54:	d8811f17 	ldw	r2,1148(sp)
 8003d58:	d9413517 	ldw	r5,1236(sp)
 8003d5c:	1907883a 	add	r3,r3,r4
 8003d60:	10800044 	addi	r2,r2,1
 8003d64:	41000115 	stw	r4,4(r8)
 8003d68:	41400015 	stw	r5,0(r8)
 8003d6c:	d8c12015 	stw	r3,1152(sp)
 8003d70:	d8811f15 	stw	r2,1148(sp)
 8003d74:	010001c4 	movi	r4,7
 8003d78:	20815716 	blt	r4,r2,80042d8 <___vfprintf_internal_r+0x1f54>
 8003d7c:	42000204 	addi	r8,r8,8
 8003d80:	0421c83a 	sub	r16,zero,r16
 8003d84:	0400810e 	bge	zero,r16,8003f8c <___vfprintf_internal_r+0x1c08>
 8003d88:	04400404 	movi	r17,16
 8003d8c:	8c00bd0e 	bge	r17,r16,8004084 <___vfprintf_internal_r+0x1d00>
 8003d90:	01420074 	movhi	r5,2049
 8003d94:	2946c884 	addi	r5,r5,6946
 8003d98:	d9412c15 	stw	r5,1200(sp)
 8003d9c:	04c001c4 	movi	r19,7
 8003da0:	00000306 	br	8003db0 <___vfprintf_internal_r+0x1a2c>
 8003da4:	42000204 	addi	r8,r8,8
 8003da8:	843ffc04 	addi	r16,r16,-16
 8003dac:	8c00b80e 	bge	r17,r16,8004090 <___vfprintf_internal_r+0x1d0c>
 8003db0:	18c00404 	addi	r3,r3,16
 8003db4:	10800044 	addi	r2,r2,1
 8003db8:	45000015 	stw	r20,0(r8)
 8003dbc:	44400115 	stw	r17,4(r8)
 8003dc0:	d8c12015 	stw	r3,1152(sp)
 8003dc4:	d8811f15 	stw	r2,1148(sp)
 8003dc8:	98bff60e 	bge	r19,r2,8003da4 <__alt_data_end+0xfc003da4>
 8003dcc:	b809883a 	mov	r4,r23
 8003dd0:	b00b883a 	mov	r5,r22
 8003dd4:	d9811e04 	addi	r6,sp,1144
 8003dd8:	80097c40 	call	80097c4 <__sprint_r>
 8003ddc:	103a811e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003de0:	d8c12017 	ldw	r3,1152(sp)
 8003de4:	d8811f17 	ldw	r2,1148(sp)
 8003de8:	da000404 	addi	r8,sp,16
 8003dec:	003fee06 	br	8003da8 <__alt_data_end+0xfc003da8>
 8003df0:	008011c4 	movi	r2,71
 8003df4:	1400db16 	blt	r2,r16,8004164 <___vfprintf_internal_r+0x1de0>
 8003df8:	01020074 	movhi	r4,2049
 8003dfc:	2106ba04 	addi	r4,r4,6888
 8003e00:	d9013115 	stw	r4,1220(sp)
 8003e04:	00c000c4 	movi	r3,3
 8003e08:	00bfdfc4 	movi	r2,-129
 8003e0c:	d8c12b15 	stw	r3,1196(sp)
 8003e10:	e0b8703a 	and	fp,fp,r2
 8003e14:	dcc12783 	ldbu	r19,1182(sp)
 8003e18:	dc812d15 	stw	r18,1204(sp)
 8003e1c:	1823883a 	mov	r17,r3
 8003e20:	d8013215 	stw	zero,1224(sp)
 8003e24:	d8013415 	stw	zero,1232(sp)
 8003e28:	003ad606 	br	8002984 <__alt_data_end+0xfc002984>
 8003e2c:	4823883a 	mov	r17,r9
 8003e30:	003cc906 	br	8003158 <__alt_data_end+0xfc003158>
 8003e34:	1c800017 	ldw	r18,0(r3)
 8003e38:	d8c12d17 	ldw	r3,1204(sp)
 8003e3c:	902bd7fa 	srai	r21,r18,31
 8003e40:	18c00104 	addi	r3,r3,4
 8003e44:	d8c12d15 	stw	r3,1204(sp)
 8003e48:	a805883a 	mov	r2,r21
 8003e4c:	003aa906 	br	80028f4 <__alt_data_end+0xfc0028f4>
 8003e50:	d9412d17 	ldw	r5,1204(sp)
 8003e54:	14800017 	ldw	r18,0(r2)
 8003e58:	002b883a 	mov	r21,zero
 8003e5c:	29400104 	addi	r5,r5,4
 8003e60:	d9412d15 	stw	r5,1204(sp)
 8003e64:	003bf906 	br	8002e4c <__alt_data_end+0xfc002e4c>
 8003e68:	d8c12d17 	ldw	r3,1204(sp)
 8003e6c:	14800017 	ldw	r18,0(r2)
 8003e70:	002b883a 	mov	r21,zero
 8003e74:	18c00104 	addi	r3,r3,4
 8003e78:	d8c12d15 	stw	r3,1204(sp)
 8003e7c:	00800044 	movi	r2,1
 8003e80:	9007883a 	mov	r3,r18
 8003e84:	003bcf06 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8003e88:	d9012d17 	ldw	r4,1204(sp)
 8003e8c:	14800017 	ldw	r18,0(r2)
 8003e90:	002b883a 	mov	r21,zero
 8003e94:	21000104 	addi	r4,r4,4
 8003e98:	d9012d15 	stw	r4,1204(sp)
 8003e9c:	0005883a 	mov	r2,zero
 8003ea0:	9007883a 	mov	r3,r18
 8003ea4:	003bc706 	br	8002dc4 <__alt_data_end+0xfc002dc4>
 8003ea8:	d9412d17 	ldw	r5,1204(sp)
 8003eac:	d8c12f17 	ldw	r3,1212(sp)
 8003eb0:	28800017 	ldw	r2,0(r5)
 8003eb4:	29400104 	addi	r5,r5,4
 8003eb8:	d9412d15 	stw	r5,1204(sp)
 8003ebc:	10c00015 	stw	r3,0(r2)
 8003ec0:	00396d06 	br	8002478 <__alt_data_end+0xfc002478>
 8003ec4:	01020074 	movhi	r4,2049
 8003ec8:	2106b804 	addi	r4,r4,6880
 8003ecc:	d9013115 	stw	r4,1220(sp)
 8003ed0:	003ba206 	br	8002d5c <__alt_data_end+0xfc002d5c>
 8003ed4:	b809883a 	mov	r4,r23
 8003ed8:	b00b883a 	mov	r5,r22
 8003edc:	d9811e04 	addi	r6,sp,1144
 8003ee0:	80097c40 	call	80097c4 <__sprint_r>
 8003ee4:	103a3f1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003ee8:	dc012617 	ldw	r16,1176(sp)
 8003eec:	d8c12017 	ldw	r3,1152(sp)
 8003ef0:	da000404 	addi	r8,sp,16
 8003ef4:	003f9106 	br	8003d3c <__alt_data_end+0xfc003d3c>
 8003ef8:	e0800044 	addi	r2,fp,1
 8003efc:	9cc00814 	ori	r19,r19,32
 8003f00:	e4000047 	ldb	r16,1(fp)
 8003f04:	00398706 	br	8002524 <__alt_data_end+0xfc002524>
 8003f08:	d8812e17 	ldw	r2,1208(sp)
 8003f0c:	d8c12d15 	stw	r3,1204(sp)
 8003f10:	0085c83a 	sub	r2,zero,r2
 8003f14:	d8812e15 	stw	r2,1208(sp)
 8003f18:	e005883a 	mov	r2,fp
 8003f1c:	003a3a06 	br	8002808 <__alt_data_end+0xfc002808>
 8003f20:	b809883a 	mov	r4,r23
 8003f24:	b00b883a 	mov	r5,r22
 8003f28:	d9811e04 	addi	r6,sp,1144
 8003f2c:	80097c40 	call	80097c4 <__sprint_r>
 8003f30:	103a2c1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003f34:	d8c12017 	ldw	r3,1152(sp)
 8003f38:	da000404 	addi	r8,sp,16
 8003f3c:	003cf006 	br	8003300 <__alt_data_end+0xfc003300>
 8003f40:	d8c12817 	ldw	r3,1184(sp)
 8003f44:	d9013117 	ldw	r4,1220(sp)
 8003f48:	1923c83a 	sub	r17,r3,r4
 8003f4c:	003a8806 	br	8002970 <__alt_data_end+0xfc002970>
 8003f50:	da013f15 	stw	r8,1276(sp)
 8003f54:	80022ec0 	call	80022ec <strlen>
 8003f58:	1023883a 	mov	r17,r2
 8003f5c:	da013f17 	ldw	r8,1276(sp)
 8003f60:	883c7f0e 	bge	r17,zero,8003160 <__alt_data_end+0xfc003160>
 8003f64:	0005883a 	mov	r2,zero
 8003f68:	003c7d06 	br	8003160 <__alt_data_end+0xfc003160>
 8003f6c:	b809883a 	mov	r4,r23
 8003f70:	b00b883a 	mov	r5,r22
 8003f74:	d9811e04 	addi	r6,sp,1144
 8003f78:	80097c40 	call	80097c4 <__sprint_r>
 8003f7c:	103a191e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8003f80:	d8c12017 	ldw	r3,1152(sp)
 8003f84:	d8811f17 	ldw	r2,1148(sp)
 8003f88:	da000404 	addi	r8,sp,16
 8003f8c:	d9413317 	ldw	r5,1228(sp)
 8003f90:	d9013117 	ldw	r4,1220(sp)
 8003f94:	10800044 	addi	r2,r2,1
 8003f98:	28c7883a 	add	r3,r5,r3
 8003f9c:	41000015 	stw	r4,0(r8)
 8003fa0:	41400115 	stw	r5,4(r8)
 8003fa4:	d8c12015 	stw	r3,1152(sp)
 8003fa8:	d8811f15 	stw	r2,1148(sp)
 8003fac:	010001c4 	movi	r4,7
 8003fb0:	20bb060e 	bge	r4,r2,8002bcc <__alt_data_end+0xfc002bcc>
 8003fb4:	003d6206 	br	8003540 <__alt_data_end+0xfc003540>
 8003fb8:	01020074 	movhi	r4,2049
 8003fbc:	2106cc84 	addi	r4,r4,6962
 8003fc0:	d9013615 	stw	r4,1240(sp)
 8003fc4:	003aa306 	br	8002a54 <__alt_data_end+0xfc002a54>
 8003fc8:	d8812604 	addi	r2,sp,1176
 8003fcc:	d8800115 	stw	r2,4(sp)
 8003fd0:	d9413717 	ldw	r5,1244(sp)
 8003fd4:	d8812504 	addi	r2,sp,1172
 8003fd8:	d8800215 	stw	r2,8(sp)
 8003fdc:	d8812104 	addi	r2,sp,1156
 8003fe0:	da400015 	stw	r9,0(sp)
 8003fe4:	d8800315 	stw	r2,12(sp)
 8003fe8:	b809883a 	mov	r4,r23
 8003fec:	880d883a 	mov	r6,r17
 8003ff0:	01c000c4 	movi	r7,3
 8003ff4:	da013f15 	stw	r8,1276(sp)
 8003ff8:	da413e15 	stw	r9,1272(sp)
 8003ffc:	80047fc0 	call	80047fc <_dtoa_r>
 8004000:	da413e17 	ldw	r9,1272(sp)
 8004004:	da013f17 	ldw	r8,1276(sp)
 8004008:	d8813115 	stw	r2,1220(sp)
 800400c:	482b883a 	mov	r21,r9
 8004010:	d8c13117 	ldw	r3,1220(sp)
 8004014:	00801184 	movi	r2,70
 8004018:	1d55883a 	add	r10,r3,r21
 800401c:	98bebb1e 	bne	r19,r2,8003b0c <__alt_data_end+0xfc003b0c>
 8004020:	19000007 	ldb	r4,0(r3)
 8004024:	00800c04 	movi	r2,48
 8004028:	2080dd26 	beq	r4,r2,80043a0 <___vfprintf_internal_r+0x201c>
 800402c:	d8c12617 	ldw	r3,1176(sp)
 8004030:	50d5883a 	add	r10,r10,r3
 8004034:	003eb506 	br	8003b0c <__alt_data_end+0xfc003b0c>
 8004038:	0023883a 	mov	r17,zero
 800403c:	003d9b06 	br	80036ac <__alt_data_end+0xfc0036ac>
 8004040:	b809883a 	mov	r4,r23
 8004044:	b00b883a 	mov	r5,r22
 8004048:	d9811e04 	addi	r6,sp,1144
 800404c:	80097c40 	call	80097c4 <__sprint_r>
 8004050:	1039e41e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8004054:	d8c12017 	ldw	r3,1152(sp)
 8004058:	da000404 	addi	r8,sp,16
 800405c:	003d9206 	br	80036a8 <__alt_data_end+0xfc0036a8>
 8004060:	b809883a 	mov	r4,r23
 8004064:	b00b883a 	mov	r5,r22
 8004068:	d9811e04 	addi	r6,sp,1144
 800406c:	80097c40 	call	80097c4 <__sprint_r>
 8004070:	1039dc1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 8004074:	d8812617 	ldw	r2,1176(sp)
 8004078:	d8c12017 	ldw	r3,1152(sp)
 800407c:	da000404 	addi	r8,sp,16
 8004080:	003dfb06 	br	8003870 <__alt_data_end+0xfc003870>
 8004084:	01020074 	movhi	r4,2049
 8004088:	2106c884 	addi	r4,r4,6946
 800408c:	d9012c15 	stw	r4,1200(sp)
 8004090:	d9012c17 	ldw	r4,1200(sp)
 8004094:	1c07883a 	add	r3,r3,r16
 8004098:	10800044 	addi	r2,r2,1
 800409c:	41000015 	stw	r4,0(r8)
 80040a0:	44000115 	stw	r16,4(r8)
 80040a4:	d8c12015 	stw	r3,1152(sp)
 80040a8:	d8811f15 	stw	r2,1148(sp)
 80040ac:	010001c4 	movi	r4,7
 80040b0:	20bfae16 	blt	r4,r2,8003f6c <__alt_data_end+0xfc003f6c>
 80040b4:	42000204 	addi	r8,r8,8
 80040b8:	003fb406 	br	8003f8c <__alt_data_end+0xfc003f8c>
 80040bc:	0021883a 	mov	r16,zero
 80040c0:	003dfd06 	br	80038b8 <__alt_data_end+0xfc0038b8>
 80040c4:	01420074 	movhi	r5,2049
 80040c8:	2946cc84 	addi	r5,r5,6962
 80040cc:	d9413615 	stw	r5,1240(sp)
 80040d0:	003ae306 	br	8002c60 <__alt_data_end+0xfc002c60>
 80040d4:	b809883a 	mov	r4,r23
 80040d8:	b00b883a 	mov	r5,r22
 80040dc:	d9811e04 	addi	r6,sp,1144
 80040e0:	80097c40 	call	80097c4 <__sprint_r>
 80040e4:	1039bf1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80040e8:	d8812617 	ldw	r2,1176(sp)
 80040ec:	d9413317 	ldw	r5,1228(sp)
 80040f0:	d8c12017 	ldw	r3,1152(sp)
 80040f4:	da000404 	addi	r8,sp,16
 80040f8:	2885c83a 	sub	r2,r5,r2
 80040fc:	003ded06 	br	80038b4 <__alt_data_end+0xfc0038b4>
 8004100:	00800184 	movi	r2,6
 8004104:	1240012e 	bgeu	r2,r9,800410c <___vfprintf_internal_r+0x1d88>
 8004108:	1013883a 	mov	r9,r2
 800410c:	4823883a 	mov	r17,r9
 8004110:	4805883a 	mov	r2,r9
 8004114:	4800b216 	blt	r9,zero,80043e0 <___vfprintf_internal_r+0x205c>
 8004118:	01420074 	movhi	r5,2049
 800411c:	2946c604 	addi	r5,r5,6936
 8004120:	d8812b15 	stw	r2,1196(sp)
 8004124:	dc812d15 	stw	r18,1204(sp)
 8004128:	d8013215 	stw	zero,1224(sp)
 800412c:	d8013415 	stw	zero,1232(sp)
 8004130:	d9413115 	stw	r5,1220(sp)
 8004134:	0005883a 	mov	r2,zero
 8004138:	003a1906 	br	80029a0 <__alt_data_end+0xfc0029a0>
 800413c:	04c00b44 	movi	r19,45
 8004140:	dcc12785 	stb	r19,1182(sp)
 8004144:	003b0006 	br	8002d48 <__alt_data_end+0xfc002d48>
 8004148:	d8c12d17 	ldw	r3,1204(sp)
 800414c:	d9012f17 	ldw	r4,1212(sp)
 8004150:	18800017 	ldw	r2,0(r3)
 8004154:	18c00104 	addi	r3,r3,4
 8004158:	d8c12d15 	stw	r3,1204(sp)
 800415c:	11000015 	stw	r4,0(r2)
 8004160:	0038c506 	br	8002478 <__alt_data_end+0xfc002478>
 8004164:	01420074 	movhi	r5,2049
 8004168:	2946bb04 	addi	r5,r5,6892
 800416c:	d9413115 	stw	r5,1220(sp)
 8004170:	003f2406 	br	8003e04 <__alt_data_end+0xfc003e04>
 8004174:	00800b44 	movi	r2,45
 8004178:	d8812785 	stb	r2,1182(sp)
 800417c:	df012b15 	stw	fp,1196(sp)
 8004180:	d8013215 	stw	zero,1224(sp)
 8004184:	df012d17 	ldw	fp,1204(sp)
 8004188:	00800b44 	movi	r2,45
 800418c:	dc812d15 	stw	r18,1204(sp)
 8004190:	003a0006 	br	8002994 <__alt_data_end+0xfc002994>
 8004194:	d8c12617 	ldw	r3,1176(sp)
 8004198:	00bfff44 	movi	r2,-3
 800419c:	18800a16 	blt	r3,r2,80041c8 <___vfprintf_internal_r+0x1e44>
 80041a0:	48c00916 	blt	r9,r3,80041c8 <___vfprintf_internal_r+0x1e44>
 80041a4:	d8c13415 	stw	r3,1232(sp)
 80041a8:	040019c4 	movi	r16,103
 80041ac:	003e7606 	br	8003b88 <__alt_data_end+0xfc003b88>
 80041b0:	01020074 	movhi	r4,2049
 80041b4:	2106c884 	addi	r4,r4,6946
 80041b8:	d9012c15 	stw	r4,1200(sp)
 80041bc:	003c8e06 	br	80033f8 <__alt_data_end+0xfc0033f8>
 80041c0:	5005883a 	mov	r2,r10
 80041c4:	003e6506 	br	8003b5c <__alt_data_end+0xfc003b5c>
 80041c8:	843fff84 	addi	r16,r16,-2
 80041cc:	1d7fffc4 	addi	r21,r3,-1
 80041d0:	dd412615 	stw	r21,1176(sp)
 80041d4:	dc0122c5 	stb	r16,1163(sp)
 80041d8:	a8009216 	blt	r21,zero,8004424 <___vfprintf_internal_r+0x20a0>
 80041dc:	00800ac4 	movi	r2,43
 80041e0:	d8812305 	stb	r2,1164(sp)
 80041e4:	00800244 	movi	r2,9
 80041e8:	1540660e 	bge	r2,r21,8004384 <___vfprintf_internal_r+0x2000>
 80041ec:	dcc122c4 	addi	r19,sp,1163
 80041f0:	dc012c15 	stw	r16,1200(sp)
 80041f4:	4023883a 	mov	r17,r8
 80041f8:	9821883a 	mov	r16,r19
 80041fc:	a809883a 	mov	r4,r21
 8004200:	01400284 	movi	r5,10
 8004204:	800c28c0 	call	800c28c <__modsi3>
 8004208:	10800c04 	addi	r2,r2,48
 800420c:	843fffc4 	addi	r16,r16,-1
 8004210:	a809883a 	mov	r4,r21
 8004214:	01400284 	movi	r5,10
 8004218:	80800005 	stb	r2,0(r16)
 800421c:	800c2380 	call	800c238 <__divsi3>
 8004220:	01000244 	movi	r4,9
 8004224:	102b883a 	mov	r21,r2
 8004228:	20bff416 	blt	r4,r2,80041fc <__alt_data_end+0xfc0041fc>
 800422c:	8811883a 	mov	r8,r17
 8004230:	10800c04 	addi	r2,r2,48
 8004234:	8023883a 	mov	r17,r16
 8004238:	897fffc4 	addi	r5,r17,-1
 800423c:	88bfffc5 	stb	r2,-1(r17)
 8004240:	dc012c17 	ldw	r16,1200(sp)
 8004244:	2cc08a2e 	bgeu	r5,r19,8004470 <___vfprintf_internal_r+0x20ec>
 8004248:	d9812384 	addi	r6,sp,1166
 800424c:	344dc83a 	sub	r6,r6,r17
 8004250:	d9012344 	addi	r4,sp,1165
 8004254:	998d883a 	add	r6,r19,r6
 8004258:	00000106 	br	8004260 <___vfprintf_internal_r+0x1edc>
 800425c:	28800003 	ldbu	r2,0(r5)
 8004260:	20800005 	stb	r2,0(r4)
 8004264:	21000044 	addi	r4,r4,1
 8004268:	29400044 	addi	r5,r5,1
 800426c:	21bffb1e 	bne	r4,r6,800425c <__alt_data_end+0xfc00425c>
 8004270:	d8812304 	addi	r2,sp,1164
 8004274:	1445c83a 	sub	r2,r2,r17
 8004278:	d9412344 	addi	r5,sp,1165
 800427c:	2885883a 	add	r2,r5,r2
 8004280:	14e7c83a 	sub	r19,r2,r19
 8004284:	d8813317 	ldw	r2,1228(sp)
 8004288:	d8c13317 	ldw	r3,1228(sp)
 800428c:	dcc13a15 	stw	r19,1256(sp)
 8004290:	14e3883a 	add	r17,r2,r19
 8004294:	00800044 	movi	r2,1
 8004298:	10c0550e 	bge	r2,r3,80043f0 <___vfprintf_internal_r+0x206c>
 800429c:	8c400044 	addi	r17,r17,1
 80042a0:	8839883a 	mov	fp,r17
 80042a4:	88005016 	blt	r17,zero,80043e8 <___vfprintf_internal_r+0x2064>
 80042a8:	d8013415 	stw	zero,1232(sp)
 80042ac:	003e3f06 	br	8003bac <__alt_data_end+0xfc003bac>
 80042b0:	da412b15 	stw	r9,1196(sp)
 80042b4:	dcc12783 	ldbu	r19,1182(sp)
 80042b8:	4823883a 	mov	r17,r9
 80042bc:	dc812d15 	stw	r18,1204(sp)
 80042c0:	d8013215 	stw	zero,1224(sp)
 80042c4:	d8013415 	stw	zero,1232(sp)
 80042c8:	0039ae06 	br	8002984 <__alt_data_end+0xfc002984>
 80042cc:	483de91e 	bne	r9,zero,8003a74 <__alt_data_end+0xfc003a74>
 80042d0:	8813883a 	mov	r9,r17
 80042d4:	003de706 	br	8003a74 <__alt_data_end+0xfc003a74>
 80042d8:	b809883a 	mov	r4,r23
 80042dc:	b00b883a 	mov	r5,r22
 80042e0:	d9811e04 	addi	r6,sp,1144
 80042e4:	80097c40 	call	80097c4 <__sprint_r>
 80042e8:	10393e1e 	bne	r2,zero,80027e4 <__alt_data_end+0xfc0027e4>
 80042ec:	dc012617 	ldw	r16,1176(sp)
 80042f0:	d8c12017 	ldw	r3,1152(sp)
 80042f4:	d8811f17 	ldw	r2,1148(sp)
 80042f8:	da000404 	addi	r8,sp,16
 80042fc:	003ea006 	br	8003d80 <__alt_data_end+0xfc003d80>
 8004300:	00c00b44 	movi	r3,45
 8004304:	2460003c 	xorhi	r17,r4,32768
 8004308:	d8c12b05 	stb	r3,1196(sp)
 800430c:	003ddf06 	br	8003a8c <__alt_data_end+0xfc003a8c>
 8004310:	02400184 	movi	r9,6
 8004314:	003dd706 	br	8003a74 <__alt_data_end+0xfc003a74>
 8004318:	4d400044 	addi	r21,r9,1
 800431c:	003de206 	br	8003aa8 <__alt_data_end+0xfc003aa8>
 8004320:	d8c13417 	ldw	r3,1232(sp)
 8004324:	00c0490e 	bge	zero,r3,800444c <___vfprintf_internal_r+0x20c8>
 8004328:	04400044 	movi	r17,1
 800432c:	d9013317 	ldw	r4,1228(sp)
 8004330:	8923883a 	add	r17,r17,r4
 8004334:	8839883a 	mov	fp,r17
 8004338:	883e1c0e 	bge	r17,zero,8003bac <__alt_data_end+0xfc003bac>
 800433c:	0039883a 	mov	fp,zero
 8004340:	003e1a06 	br	8003bac <__alt_data_end+0xfc003bac>
 8004344:	00c03b0e 	bge	zero,r3,8004434 <___vfprintf_internal_r+0x20b0>
 8004348:	4800021e 	bne	r9,zero,8004354 <___vfprintf_internal_r+0x1fd0>
 800434c:	e080004c 	andi	r2,fp,1
 8004350:	10000626 	beq	r2,zero,800436c <___vfprintf_internal_r+0x1fe8>
 8004354:	d8c13417 	ldw	r3,1232(sp)
 8004358:	4a400044 	addi	r9,r9,1
 800435c:	1a63883a 	add	r17,r3,r9
 8004360:	8839883a 	mov	fp,r17
 8004364:	883e110e 	bge	r17,zero,8003bac <__alt_data_end+0xfc003bac>
 8004368:	003ff406 	br	800433c <__alt_data_end+0xfc00433c>
 800436c:	1839883a 	mov	fp,r3
 8004370:	18004116 	blt	r3,zero,8004478 <___vfprintf_internal_r+0x20f4>
 8004374:	dc413417 	ldw	r17,1232(sp)
 8004378:	003e0c06 	br	8003bac <__alt_data_end+0xfc003bac>
 800437c:	d8812117 	ldw	r2,1156(sp)
 8004380:	003df606 	br	8003b5c <__alt_data_end+0xfc003b5c>
 8004384:	00800c04 	movi	r2,48
 8004388:	a8c00c04 	addi	r3,r21,48
 800438c:	d8812345 	stb	r2,1165(sp)
 8004390:	d8c12385 	stb	r3,1166(sp)
 8004394:	d88123c4 	addi	r2,sp,1167
 8004398:	dcc122c4 	addi	r19,sp,1163
 800439c:	003fb806 	br	8004280 <__alt_data_end+0xfc004280>
 80043a0:	d9013717 	ldw	r4,1244(sp)
 80043a4:	880b883a 	mov	r5,r17
 80043a8:	000d883a 	mov	r6,zero
 80043ac:	000f883a 	mov	r7,zero
 80043b0:	da013f15 	stw	r8,1276(sp)
 80043b4:	da413e15 	stw	r9,1272(sp)
 80043b8:	da813d15 	stw	r10,1268(sp)
 80043bc:	800d53c0 	call	800d53c <__eqdf2>
 80043c0:	da013f17 	ldw	r8,1276(sp)
 80043c4:	da413e17 	ldw	r9,1272(sp)
 80043c8:	da813d17 	ldw	r10,1268(sp)
 80043cc:	103f1726 	beq	r2,zero,800402c <__alt_data_end+0xfc00402c>
 80043d0:	00800044 	movi	r2,1
 80043d4:	1547c83a 	sub	r3,r2,r21
 80043d8:	d8c12615 	stw	r3,1176(sp)
 80043dc:	003f1406 	br	8004030 <__alt_data_end+0xfc004030>
 80043e0:	0005883a 	mov	r2,zero
 80043e4:	003f4c06 	br	8004118 <__alt_data_end+0xfc004118>
 80043e8:	0039883a 	mov	fp,zero
 80043ec:	003fae06 	br	80042a8 <__alt_data_end+0xfc0042a8>
 80043f0:	e084703a 	and	r2,fp,r2
 80043f4:	103faa26 	beq	r2,zero,80042a0 <__alt_data_end+0xfc0042a0>
 80043f8:	003fa806 	br	800429c <__alt_data_end+0xfc00429c>
 80043fc:	d9412d17 	ldw	r5,1204(sp)
 8004400:	2a400017 	ldw	r9,0(r5)
 8004404:	28c00104 	addi	r3,r5,4
 8004408:	d8c12d15 	stw	r3,1204(sp)
 800440c:	483ebc0e 	bge	r9,zero,8003f00 <__alt_data_end+0xfc003f00>
 8004410:	027fffc4 	movi	r9,-1
 8004414:	e4000047 	ldb	r16,1(fp)
 8004418:	00384206 	br	8002524 <__alt_data_end+0xfc002524>
 800441c:	043fffc4 	movi	r16,-1
 8004420:	0038ce06 	br	800275c <__alt_data_end+0xfc00275c>
 8004424:	00800b44 	movi	r2,45
 8004428:	056bc83a 	sub	r21,zero,r21
 800442c:	d8812305 	stb	r2,1164(sp)
 8004430:	003f6c06 	br	80041e4 <__alt_data_end+0xfc0041e4>
 8004434:	4800081e 	bne	r9,zero,8004458 <___vfprintf_internal_r+0x20d4>
 8004438:	e080004c 	andi	r2,fp,1
 800443c:	1000061e 	bne	r2,zero,8004458 <___vfprintf_internal_r+0x20d4>
 8004440:	07000044 	movi	fp,1
 8004444:	e023883a 	mov	r17,fp
 8004448:	003dd806 	br	8003bac <__alt_data_end+0xfc003bac>
 800444c:	04400084 	movi	r17,2
 8004450:	88e3c83a 	sub	r17,r17,r3
 8004454:	003fb506 	br	800432c <__alt_data_end+0xfc00432c>
 8004458:	4c400084 	addi	r17,r9,2
 800445c:	8839883a 	mov	fp,r17
 8004460:	883dd20e 	bge	r17,zero,8003bac <__alt_data_end+0xfc003bac>
 8004464:	003fb506 	br	800433c <__alt_data_end+0xfc00433c>
 8004468:	d8c12617 	ldw	r3,1176(sp)
 800446c:	003f5706 	br	80041cc <__alt_data_end+0xfc0041cc>
 8004470:	d8812344 	addi	r2,sp,1165
 8004474:	003f8206 	br	8004280 <__alt_data_end+0xfc004280>
 8004478:	0039883a 	mov	fp,zero
 800447c:	003fbd06 	br	8004374 <__alt_data_end+0xfc004374>

08004480 <__vfprintf_internal>:
 8004480:	2007883a 	mov	r3,r4
 8004484:	01020074 	movhi	r4,2049
 8004488:	210e2304 	addi	r4,r4,14476
 800448c:	21000017 	ldw	r4,0(r4)
 8004490:	2805883a 	mov	r2,r5
 8004494:	300f883a 	mov	r7,r6
 8004498:	180b883a 	mov	r5,r3
 800449c:	100d883a 	mov	r6,r2
 80044a0:	80023841 	jmpi	8002384 <___vfprintf_internal_r>

080044a4 <__swsetup_r>:
 80044a4:	00820074 	movhi	r2,2049
 80044a8:	defffd04 	addi	sp,sp,-12
 80044ac:	108e2304 	addi	r2,r2,14476
 80044b0:	dc400115 	stw	r17,4(sp)
 80044b4:	2023883a 	mov	r17,r4
 80044b8:	11000017 	ldw	r4,0(r2)
 80044bc:	dc000015 	stw	r16,0(sp)
 80044c0:	dfc00215 	stw	ra,8(sp)
 80044c4:	2821883a 	mov	r16,r5
 80044c8:	20000226 	beq	r4,zero,80044d4 <__swsetup_r+0x30>
 80044cc:	20c00e17 	ldw	r3,56(r4)
 80044d0:	18002e26 	beq	r3,zero,800458c <__swsetup_r+0xe8>
 80044d4:	8080030b 	ldhu	r2,12(r16)
 80044d8:	10c0020c 	andi	r3,r2,8
 80044dc:	100d883a 	mov	r6,r2
 80044e0:	18000f26 	beq	r3,zero,8004520 <__swsetup_r+0x7c>
 80044e4:	80c00417 	ldw	r3,16(r16)
 80044e8:	18001526 	beq	r3,zero,8004540 <__swsetup_r+0x9c>
 80044ec:	1100004c 	andi	r4,r2,1
 80044f0:	20001c1e 	bne	r4,zero,8004564 <__swsetup_r+0xc0>
 80044f4:	1080008c 	andi	r2,r2,2
 80044f8:	1000261e 	bne	r2,zero,8004594 <__swsetup_r+0xf0>
 80044fc:	80800517 	ldw	r2,20(r16)
 8004500:	80800215 	stw	r2,8(r16)
 8004504:	18001c26 	beq	r3,zero,8004578 <__swsetup_r+0xd4>
 8004508:	0005883a 	mov	r2,zero
 800450c:	dfc00217 	ldw	ra,8(sp)
 8004510:	dc400117 	ldw	r17,4(sp)
 8004514:	dc000017 	ldw	r16,0(sp)
 8004518:	dec00304 	addi	sp,sp,12
 800451c:	f800283a 	ret
 8004520:	3080040c 	andi	r2,r6,16
 8004524:	10001726 	beq	r2,zero,8004584 <__swsetup_r+0xe0>
 8004528:	3080010c 	andi	r2,r6,4
 800452c:	10001b1e 	bne	r2,zero,800459c <__swsetup_r+0xf8>
 8004530:	80c00417 	ldw	r3,16(r16)
 8004534:	30800214 	ori	r2,r6,8
 8004538:	8080030d 	sth	r2,12(r16)
 800453c:	183feb1e 	bne	r3,zero,80044ec <__alt_data_end+0xfc0044ec>
 8004540:	1140a00c 	andi	r5,r2,640
 8004544:	01008004 	movi	r4,512
 8004548:	293fe826 	beq	r5,r4,80044ec <__alt_data_end+0xfc0044ec>
 800454c:	8809883a 	mov	r4,r17
 8004550:	800b883a 	mov	r5,r16
 8004554:	80070380 	call	8007038 <__smakebuf_r>
 8004558:	8080030b 	ldhu	r2,12(r16)
 800455c:	80c00417 	ldw	r3,16(r16)
 8004560:	003fe206 	br	80044ec <__alt_data_end+0xfc0044ec>
 8004564:	80800517 	ldw	r2,20(r16)
 8004568:	80000215 	stw	zero,8(r16)
 800456c:	0085c83a 	sub	r2,zero,r2
 8004570:	80800615 	stw	r2,24(r16)
 8004574:	183fe41e 	bne	r3,zero,8004508 <__alt_data_end+0xfc004508>
 8004578:	8080030b 	ldhu	r2,12(r16)
 800457c:	1080200c 	andi	r2,r2,128
 8004580:	103fe226 	beq	r2,zero,800450c <__alt_data_end+0xfc00450c>
 8004584:	00bfffc4 	movi	r2,-1
 8004588:	003fe006 	br	800450c <__alt_data_end+0xfc00450c>
 800458c:	80064e00 	call	80064e0 <__sinit>
 8004590:	003fd006 	br	80044d4 <__alt_data_end+0xfc0044d4>
 8004594:	0005883a 	mov	r2,zero
 8004598:	003fd906 	br	8004500 <__alt_data_end+0xfc004500>
 800459c:	81400c17 	ldw	r5,48(r16)
 80045a0:	28000626 	beq	r5,zero,80045bc <__swsetup_r+0x118>
 80045a4:	80801004 	addi	r2,r16,64
 80045a8:	28800326 	beq	r5,r2,80045b8 <__swsetup_r+0x114>
 80045ac:	8809883a 	mov	r4,r17
 80045b0:	80066540 	call	8006654 <_free_r>
 80045b4:	8180030b 	ldhu	r6,12(r16)
 80045b8:	80000c15 	stw	zero,48(r16)
 80045bc:	80c00417 	ldw	r3,16(r16)
 80045c0:	00bff6c4 	movi	r2,-37
 80045c4:	118c703a 	and	r6,r2,r6
 80045c8:	80000115 	stw	zero,4(r16)
 80045cc:	80c00015 	stw	r3,0(r16)
 80045d0:	003fd806 	br	8004534 <__alt_data_end+0xfc004534>

080045d4 <quorem>:
 80045d4:	defff204 	addi	sp,sp,-56
 80045d8:	ddc00b15 	stw	r23,44(sp)
 80045dc:	20800417 	ldw	r2,16(r4)
 80045e0:	2dc00417 	ldw	r23,16(r5)
 80045e4:	dfc00d15 	stw	ra,52(sp)
 80045e8:	df000c15 	stw	fp,48(sp)
 80045ec:	dd800a15 	stw	r22,40(sp)
 80045f0:	dd400915 	stw	r21,36(sp)
 80045f4:	dd000815 	stw	r20,32(sp)
 80045f8:	dcc00715 	stw	r19,28(sp)
 80045fc:	dc800615 	stw	r18,24(sp)
 8004600:	dc400515 	stw	r17,20(sp)
 8004604:	dc000415 	stw	r16,16(sp)
 8004608:	15c07a16 	blt	r2,r23,80047f4 <quorem+0x220>
 800460c:	bdffffc4 	addi	r23,r23,-1
 8004610:	bde9883a 	add	r20,r23,r23
 8004614:	28c00504 	addi	r3,r5,20
 8004618:	a529883a 	add	r20,r20,r20
 800461c:	1d39883a 	add	fp,r3,r20
 8004620:	24c00504 	addi	r19,r4,20
 8004624:	d9400215 	stw	r5,8(sp)
 8004628:	9d29883a 	add	r20,r19,r20
 800462c:	e1400017 	ldw	r5,0(fp)
 8004630:	d9000015 	stw	r4,0(sp)
 8004634:	a1000017 	ldw	r4,0(r20)
 8004638:	29400044 	addi	r5,r5,1
 800463c:	d8c00115 	stw	r3,4(sp)
 8004640:	dd000315 	stw	r20,12(sp)
 8004644:	800c2e80 	call	800c2e8 <__udivsi3>
 8004648:	1025883a 	mov	r18,r2
 800464c:	10003026 	beq	r2,zero,8004710 <quorem+0x13c>
 8004650:	dc400117 	ldw	r17,4(sp)
 8004654:	9829883a 	mov	r20,r19
 8004658:	002d883a 	mov	r22,zero
 800465c:	0021883a 	mov	r16,zero
 8004660:	8d400017 	ldw	r21,0(r17)
 8004664:	900b883a 	mov	r5,r18
 8004668:	8c400104 	addi	r17,r17,4
 800466c:	a93fffcc 	andi	r4,r21,65535
 8004670:	800c2f80 	call	800c2f8 <__mulsi3>
 8004674:	a808d43a 	srli	r4,r21,16
 8004678:	900b883a 	mov	r5,r18
 800467c:	b0ad883a 	add	r22,r22,r2
 8004680:	800c2f80 	call	800c2f8 <__mulsi3>
 8004684:	a1000017 	ldw	r4,0(r20)
 8004688:	b00cd43a 	srli	r6,r22,16
 800468c:	b0ffffcc 	andi	r3,r22,65535
 8004690:	217fffcc 	andi	r5,r4,65535
 8004694:	2c21883a 	add	r16,r5,r16
 8004698:	80c7c83a 	sub	r3,r16,r3
 800469c:	2008d43a 	srli	r4,r4,16
 80046a0:	3085883a 	add	r2,r6,r2
 80046a4:	1821d43a 	srai	r16,r3,16
 80046a8:	117fffcc 	andi	r5,r2,65535
 80046ac:	2149c83a 	sub	r4,r4,r5
 80046b0:	2421883a 	add	r16,r4,r16
 80046b4:	8008943a 	slli	r4,r16,16
 80046b8:	18ffffcc 	andi	r3,r3,65535
 80046bc:	102cd43a 	srli	r22,r2,16
 80046c0:	20c8b03a 	or	r4,r4,r3
 80046c4:	a1000015 	stw	r4,0(r20)
 80046c8:	8021d43a 	srai	r16,r16,16
 80046cc:	a5000104 	addi	r20,r20,4
 80046d0:	e47fe32e 	bgeu	fp,r17,8004660 <__alt_data_end+0xfc004660>
 80046d4:	d8c00317 	ldw	r3,12(sp)
 80046d8:	18800017 	ldw	r2,0(r3)
 80046dc:	10000c1e 	bne	r2,zero,8004710 <quorem+0x13c>
 80046e0:	18bfff04 	addi	r2,r3,-4
 80046e4:	9880082e 	bgeu	r19,r2,8004708 <quorem+0x134>
 80046e8:	18ffff17 	ldw	r3,-4(r3)
 80046ec:	18000326 	beq	r3,zero,80046fc <quorem+0x128>
 80046f0:	00000506 	br	8004708 <quorem+0x134>
 80046f4:	10c00017 	ldw	r3,0(r2)
 80046f8:	1800031e 	bne	r3,zero,8004708 <quorem+0x134>
 80046fc:	10bfff04 	addi	r2,r2,-4
 8004700:	bdffffc4 	addi	r23,r23,-1
 8004704:	98bffb36 	bltu	r19,r2,80046f4 <__alt_data_end+0xfc0046f4>
 8004708:	d8c00017 	ldw	r3,0(sp)
 800470c:	1dc00415 	stw	r23,16(r3)
 8004710:	d9000017 	ldw	r4,0(sp)
 8004714:	d9400217 	ldw	r5,8(sp)
 8004718:	80087b40 	call	80087b4 <__mcmp>
 800471c:	10002816 	blt	r2,zero,80047c0 <quorem+0x1ec>
 8004720:	dc400117 	ldw	r17,4(sp)
 8004724:	94800044 	addi	r18,r18,1
 8004728:	980d883a 	mov	r6,r19
 800472c:	0007883a 	mov	r3,zero
 8004730:	31000017 	ldw	r4,0(r6)
 8004734:	89400017 	ldw	r5,0(r17)
 8004738:	31800104 	addi	r6,r6,4
 800473c:	20bfffcc 	andi	r2,r4,65535
 8004740:	10c7883a 	add	r3,r2,r3
 8004744:	28bfffcc 	andi	r2,r5,65535
 8004748:	1885c83a 	sub	r2,r3,r2
 800474c:	280ad43a 	srli	r5,r5,16
 8004750:	2008d43a 	srli	r4,r4,16
 8004754:	1007d43a 	srai	r3,r2,16
 8004758:	10bfffcc 	andi	r2,r2,65535
 800475c:	2149c83a 	sub	r4,r4,r5
 8004760:	20c9883a 	add	r4,r4,r3
 8004764:	200a943a 	slli	r5,r4,16
 8004768:	8c400104 	addi	r17,r17,4
 800476c:	2007d43a 	srai	r3,r4,16
 8004770:	2884b03a 	or	r2,r5,r2
 8004774:	30bfff15 	stw	r2,-4(r6)
 8004778:	e47fed2e 	bgeu	fp,r17,8004730 <__alt_data_end+0xfc004730>
 800477c:	bdc5883a 	add	r2,r23,r23
 8004780:	1085883a 	add	r2,r2,r2
 8004784:	9887883a 	add	r3,r19,r2
 8004788:	18800017 	ldw	r2,0(r3)
 800478c:	10000c1e 	bne	r2,zero,80047c0 <quorem+0x1ec>
 8004790:	18bfff04 	addi	r2,r3,-4
 8004794:	9880082e 	bgeu	r19,r2,80047b8 <quorem+0x1e4>
 8004798:	18ffff17 	ldw	r3,-4(r3)
 800479c:	18000326 	beq	r3,zero,80047ac <quorem+0x1d8>
 80047a0:	00000506 	br	80047b8 <quorem+0x1e4>
 80047a4:	10c00017 	ldw	r3,0(r2)
 80047a8:	1800031e 	bne	r3,zero,80047b8 <quorem+0x1e4>
 80047ac:	10bfff04 	addi	r2,r2,-4
 80047b0:	bdffffc4 	addi	r23,r23,-1
 80047b4:	98bffb36 	bltu	r19,r2,80047a4 <__alt_data_end+0xfc0047a4>
 80047b8:	d8c00017 	ldw	r3,0(sp)
 80047bc:	1dc00415 	stw	r23,16(r3)
 80047c0:	9005883a 	mov	r2,r18
 80047c4:	dfc00d17 	ldw	ra,52(sp)
 80047c8:	df000c17 	ldw	fp,48(sp)
 80047cc:	ddc00b17 	ldw	r23,44(sp)
 80047d0:	dd800a17 	ldw	r22,40(sp)
 80047d4:	dd400917 	ldw	r21,36(sp)
 80047d8:	dd000817 	ldw	r20,32(sp)
 80047dc:	dcc00717 	ldw	r19,28(sp)
 80047e0:	dc800617 	ldw	r18,24(sp)
 80047e4:	dc400517 	ldw	r17,20(sp)
 80047e8:	dc000417 	ldw	r16,16(sp)
 80047ec:	dec00e04 	addi	sp,sp,56
 80047f0:	f800283a 	ret
 80047f4:	0005883a 	mov	r2,zero
 80047f8:	003ff206 	br	80047c4 <__alt_data_end+0xfc0047c4>

080047fc <_dtoa_r>:
 80047fc:	20801017 	ldw	r2,64(r4)
 8004800:	deffde04 	addi	sp,sp,-136
 8004804:	dd401d15 	stw	r21,116(sp)
 8004808:	dcc01b15 	stw	r19,108(sp)
 800480c:	dc801a15 	stw	r18,104(sp)
 8004810:	dc401915 	stw	r17,100(sp)
 8004814:	dc001815 	stw	r16,96(sp)
 8004818:	dfc02115 	stw	ra,132(sp)
 800481c:	df002015 	stw	fp,128(sp)
 8004820:	ddc01f15 	stw	r23,124(sp)
 8004824:	dd801e15 	stw	r22,120(sp)
 8004828:	dd001c15 	stw	r20,112(sp)
 800482c:	d9c00315 	stw	r7,12(sp)
 8004830:	2021883a 	mov	r16,r4
 8004834:	302b883a 	mov	r21,r6
 8004838:	2825883a 	mov	r18,r5
 800483c:	dc402417 	ldw	r17,144(sp)
 8004840:	3027883a 	mov	r19,r6
 8004844:	10000826 	beq	r2,zero,8004868 <_dtoa_r+0x6c>
 8004848:	21801117 	ldw	r6,68(r4)
 800484c:	00c00044 	movi	r3,1
 8004850:	100b883a 	mov	r5,r2
 8004854:	1986983a 	sll	r3,r3,r6
 8004858:	11800115 	stw	r6,4(r2)
 800485c:	10c00215 	stw	r3,8(r2)
 8004860:	8007ee00 	call	8007ee0 <_Bfree>
 8004864:	80001015 	stw	zero,64(r16)
 8004868:	a8002d16 	blt	r21,zero,8004920 <_dtoa_r+0x124>
 800486c:	88000015 	stw	zero,0(r17)
 8004870:	a8dffc2c 	andhi	r3,r21,32752
 8004874:	009ffc34 	movhi	r2,32752
 8004878:	18801b26 	beq	r3,r2,80048e8 <_dtoa_r+0xec>
 800487c:	9009883a 	mov	r4,r18
 8004880:	980b883a 	mov	r5,r19
 8004884:	000d883a 	mov	r6,zero
 8004888:	000f883a 	mov	r7,zero
 800488c:	800d53c0 	call	800d53c <__eqdf2>
 8004890:	10002a1e 	bne	r2,zero,800493c <_dtoa_r+0x140>
 8004894:	d8c02317 	ldw	r3,140(sp)
 8004898:	d9002517 	ldw	r4,148(sp)
 800489c:	00800044 	movi	r2,1
 80048a0:	18800015 	stw	r2,0(r3)
 80048a4:	2001a226 	beq	r4,zero,8004f30 <_dtoa_r+0x734>
 80048a8:	00820074 	movhi	r2,2049
 80048ac:	1086c844 	addi	r2,r2,6945
 80048b0:	20800015 	stw	r2,0(r4)
 80048b4:	10bfffc4 	addi	r2,r2,-1
 80048b8:	dfc02117 	ldw	ra,132(sp)
 80048bc:	df002017 	ldw	fp,128(sp)
 80048c0:	ddc01f17 	ldw	r23,124(sp)
 80048c4:	dd801e17 	ldw	r22,120(sp)
 80048c8:	dd401d17 	ldw	r21,116(sp)
 80048cc:	dd001c17 	ldw	r20,112(sp)
 80048d0:	dcc01b17 	ldw	r19,108(sp)
 80048d4:	dc801a17 	ldw	r18,104(sp)
 80048d8:	dc401917 	ldw	r17,100(sp)
 80048dc:	dc001817 	ldw	r16,96(sp)
 80048e0:	dec02204 	addi	sp,sp,136
 80048e4:	f800283a 	ret
 80048e8:	d8c02317 	ldw	r3,140(sp)
 80048ec:	0089c3c4 	movi	r2,9999
 80048f0:	18800015 	stw	r2,0(r3)
 80048f4:	90017c26 	beq	r18,zero,8004ee8 <_dtoa_r+0x6ec>
 80048f8:	00820074 	movhi	r2,2049
 80048fc:	1086d404 	addi	r2,r2,6992
 8004900:	d9002517 	ldw	r4,148(sp)
 8004904:	203fec26 	beq	r4,zero,80048b8 <__alt_data_end+0xfc0048b8>
 8004908:	10c000c7 	ldb	r3,3(r2)
 800490c:	18017d1e 	bne	r3,zero,8004f04 <_dtoa_r+0x708>
 8004910:	10c000c4 	addi	r3,r2,3
 8004914:	d9802517 	ldw	r6,148(sp)
 8004918:	30c00015 	stw	r3,0(r6)
 800491c:	003fe606 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004920:	04e00034 	movhi	r19,32768
 8004924:	9cffffc4 	addi	r19,r19,-1
 8004928:	00800044 	movi	r2,1
 800492c:	ace6703a 	and	r19,r21,r19
 8004930:	88800015 	stw	r2,0(r17)
 8004934:	982b883a 	mov	r21,r19
 8004938:	003fcd06 	br	8004870 <__alt_data_end+0xfc004870>
 800493c:	d8800204 	addi	r2,sp,8
 8004940:	a822d53a 	srli	r17,r21,20
 8004944:	d8800015 	stw	r2,0(sp)
 8004948:	8009883a 	mov	r4,r16
 800494c:	900b883a 	mov	r5,r18
 8004950:	980d883a 	mov	r6,r19
 8004954:	d9c00104 	addi	r7,sp,4
 8004958:	8008b280 	call	8008b28 <__d2b>
 800495c:	1039883a 	mov	fp,r2
 8004960:	88016a1e 	bne	r17,zero,8004f0c <_dtoa_r+0x710>
 8004964:	dd000217 	ldw	r20,8(sp)
 8004968:	dc400117 	ldw	r17,4(sp)
 800496c:	00befbc4 	movi	r2,-1041
 8004970:	a463883a 	add	r17,r20,r17
 8004974:	8882ea16 	blt	r17,r2,8005520 <_dtoa_r+0xd24>
 8004978:	00bf0384 	movi	r2,-1010
 800497c:	1445c83a 	sub	r2,r2,r17
 8004980:	89010484 	addi	r4,r17,1042
 8004984:	a8aa983a 	sll	r21,r21,r2
 8004988:	9108d83a 	srl	r4,r18,r4
 800498c:	a908b03a 	or	r4,r21,r4
 8004990:	800ea140 	call	800ea14 <__floatunsidf>
 8004994:	017f8434 	movhi	r5,65040
 8004998:	01800044 	movi	r6,1
 800499c:	1009883a 	mov	r4,r2
 80049a0:	194b883a 	add	r5,r3,r5
 80049a4:	8c7fffc4 	addi	r17,r17,-1
 80049a8:	d9800f15 	stw	r6,60(sp)
 80049ac:	000d883a 	mov	r6,zero
 80049b0:	01cffe34 	movhi	r7,16376
 80049b4:	800dfec0 	call	800dfec <__subdf3>
 80049b8:	0198dbf4 	movhi	r6,25455
 80049bc:	01cff4f4 	movhi	r7,16339
 80049c0:	1009883a 	mov	r4,r2
 80049c4:	180b883a 	mov	r5,r3
 80049c8:	3190d844 	addi	r6,r6,17249
 80049cc:	39e1e9c4 	addi	r7,r7,-30809
 80049d0:	800d7800 	call	800d780 <__muldf3>
 80049d4:	01a2d874 	movhi	r6,35681
 80049d8:	01cff1f4 	movhi	r7,16327
 80049dc:	180b883a 	mov	r5,r3
 80049e0:	31b22cc4 	addi	r6,r6,-14157
 80049e4:	39e28a04 	addi	r7,r7,-30168
 80049e8:	1009883a 	mov	r4,r2
 80049ec:	800c3200 	call	800c320 <__adddf3>
 80049f0:	8809883a 	mov	r4,r17
 80049f4:	102d883a 	mov	r22,r2
 80049f8:	182b883a 	mov	r21,r3
 80049fc:	800e9440 	call	800e944 <__floatsidf>
 8004a00:	019427f4 	movhi	r6,20639
 8004a04:	01cff4f4 	movhi	r7,16339
 8004a08:	1009883a 	mov	r4,r2
 8004a0c:	180b883a 	mov	r5,r3
 8004a10:	319e7ec4 	addi	r6,r6,31227
 8004a14:	39d104c4 	addi	r7,r7,17427
 8004a18:	800d7800 	call	800d780 <__muldf3>
 8004a1c:	b009883a 	mov	r4,r22
 8004a20:	a80b883a 	mov	r5,r21
 8004a24:	100d883a 	mov	r6,r2
 8004a28:	180f883a 	mov	r7,r3
 8004a2c:	800c3200 	call	800c320 <__adddf3>
 8004a30:	1009883a 	mov	r4,r2
 8004a34:	180b883a 	mov	r5,r3
 8004a38:	102d883a 	mov	r22,r2
 8004a3c:	182b883a 	mov	r21,r3
 8004a40:	800e8bc0 	call	800e8bc <__fixdfsi>
 8004a44:	b009883a 	mov	r4,r22
 8004a48:	a80b883a 	mov	r5,r21
 8004a4c:	000d883a 	mov	r6,zero
 8004a50:	000f883a 	mov	r7,zero
 8004a54:	d8800515 	stw	r2,20(sp)
 8004a58:	800d6a00 	call	800d6a0 <__ledf2>
 8004a5c:	10023116 	blt	r2,zero,8005324 <_dtoa_r+0xb28>
 8004a60:	d8c00517 	ldw	r3,20(sp)
 8004a64:	00800584 	movi	r2,22
 8004a68:	10c21f36 	bltu	r2,r3,80052e8 <_dtoa_r+0xaec>
 8004a6c:	180490fa 	slli	r2,r3,3
 8004a70:	00c20074 	movhi	r3,2049
 8004a74:	18c6f004 	addi	r3,r3,7104
 8004a78:	1885883a 	add	r2,r3,r2
 8004a7c:	11000017 	ldw	r4,0(r2)
 8004a80:	11400117 	ldw	r5,4(r2)
 8004a84:	900d883a 	mov	r6,r18
 8004a88:	980f883a 	mov	r7,r19
 8004a8c:	800d5c00 	call	800d5c0 <__gedf2>
 8004a90:	0082a70e 	bge	zero,r2,8005530 <_dtoa_r+0xd34>
 8004a94:	d9000517 	ldw	r4,20(sp)
 8004a98:	d8000c15 	stw	zero,48(sp)
 8004a9c:	213fffc4 	addi	r4,r4,-1
 8004aa0:	d9000515 	stw	r4,20(sp)
 8004aa4:	a463c83a 	sub	r17,r20,r17
 8004aa8:	8dbfffc4 	addi	r22,r17,-1
 8004aac:	b0021916 	blt	r22,zero,8005314 <_dtoa_r+0xb18>
 8004ab0:	d8000815 	stw	zero,32(sp)
 8004ab4:	d8800517 	ldw	r2,20(sp)
 8004ab8:	10020e16 	blt	r2,zero,80052f4 <_dtoa_r+0xaf8>
 8004abc:	b0ad883a 	add	r22,r22,r2
 8004ac0:	d8800a15 	stw	r2,40(sp)
 8004ac4:	d8000915 	stw	zero,36(sp)
 8004ac8:	d8c00317 	ldw	r3,12(sp)
 8004acc:	00800244 	movi	r2,9
 8004ad0:	10c11a36 	bltu	r2,r3,8004f3c <_dtoa_r+0x740>
 8004ad4:	00800144 	movi	r2,5
 8004ad8:	10c4fc0e 	bge	r2,r3,8005ecc <_dtoa_r+0x16d0>
 8004adc:	18ffff04 	addi	r3,r3,-4
 8004ae0:	d8c00315 	stw	r3,12(sp)
 8004ae4:	0029883a 	mov	r20,zero
 8004ae8:	d9800317 	ldw	r6,12(sp)
 8004aec:	008000c4 	movi	r2,3
 8004af0:	3083bd26 	beq	r6,r2,80059e8 <_dtoa_r+0x11ec>
 8004af4:	1183670e 	bge	r2,r6,8005894 <_dtoa_r+0x1098>
 8004af8:	d8c00317 	ldw	r3,12(sp)
 8004afc:	00800104 	movi	r2,4
 8004b00:	1882e726 	beq	r3,r2,80056a0 <_dtoa_r+0xea4>
 8004b04:	00800144 	movi	r2,5
 8004b08:	1884f21e 	bne	r3,r2,8005ed4 <_dtoa_r+0x16d8>
 8004b0c:	00800044 	movi	r2,1
 8004b10:	d8800b15 	stw	r2,44(sp)
 8004b14:	d8c02217 	ldw	r3,136(sp)
 8004b18:	d9000517 	ldw	r4,20(sp)
 8004b1c:	1907883a 	add	r3,r3,r4
 8004b20:	19800044 	addi	r6,r3,1
 8004b24:	d8c00d15 	stw	r3,52(sp)
 8004b28:	d9800615 	stw	r6,24(sp)
 8004b2c:	0183c30e 	bge	zero,r6,8005a3c <_dtoa_r+0x1240>
 8004b30:	d9800617 	ldw	r6,24(sp)
 8004b34:	3023883a 	mov	r17,r6
 8004b38:	80001115 	stw	zero,68(r16)
 8004b3c:	008005c4 	movi	r2,23
 8004b40:	1184f62e 	bgeu	r2,r6,8005f1c <_dtoa_r+0x1720>
 8004b44:	00c00044 	movi	r3,1
 8004b48:	00800104 	movi	r2,4
 8004b4c:	1085883a 	add	r2,r2,r2
 8004b50:	11000504 	addi	r4,r2,20
 8004b54:	180b883a 	mov	r5,r3
 8004b58:	18c00044 	addi	r3,r3,1
 8004b5c:	313ffb2e 	bgeu	r6,r4,8004b4c <__alt_data_end+0xfc004b4c>
 8004b60:	81401115 	stw	r5,68(r16)
 8004b64:	8009883a 	mov	r4,r16
 8004b68:	8007e380 	call	8007e38 <_Balloc>
 8004b6c:	d8800715 	stw	r2,28(sp)
 8004b70:	80801015 	stw	r2,64(r16)
 8004b74:	00800384 	movi	r2,14
 8004b78:	1440fd36 	bltu	r2,r17,8004f70 <_dtoa_r+0x774>
 8004b7c:	a000fc26 	beq	r20,zero,8004f70 <_dtoa_r+0x774>
 8004b80:	d8800517 	ldw	r2,20(sp)
 8004b84:	0083b90e 	bge	zero,r2,8005a6c <_dtoa_r+0x1270>
 8004b88:	d8c00517 	ldw	r3,20(sp)
 8004b8c:	108003cc 	andi	r2,r2,15
 8004b90:	100490fa 	slli	r2,r2,3
 8004b94:	182fd13a 	srai	r23,r3,4
 8004b98:	00c20074 	movhi	r3,2049
 8004b9c:	18c6f004 	addi	r3,r3,7104
 8004ba0:	1885883a 	add	r2,r3,r2
 8004ba4:	b8c0040c 	andi	r3,r23,16
 8004ba8:	12c00017 	ldw	r11,0(r2)
 8004bac:	12800117 	ldw	r10,4(r2)
 8004bb0:	18039726 	beq	r3,zero,8005a10 <_dtoa_r+0x1214>
 8004bb4:	00820074 	movhi	r2,2049
 8004bb8:	1086e604 	addi	r2,r2,7064
 8004bbc:	11800817 	ldw	r6,32(r2)
 8004bc0:	11c00917 	ldw	r7,36(r2)
 8004bc4:	9009883a 	mov	r4,r18
 8004bc8:	980b883a 	mov	r5,r19
 8004bcc:	da801615 	stw	r10,88(sp)
 8004bd0:	dac01515 	stw	r11,84(sp)
 8004bd4:	800cbbc0 	call	800cbbc <__divdf3>
 8004bd8:	da801617 	ldw	r10,88(sp)
 8004bdc:	dac01517 	ldw	r11,84(sp)
 8004be0:	bdc003cc 	andi	r23,r23,15
 8004be4:	044000c4 	movi	r17,3
 8004be8:	d8800e15 	stw	r2,56(sp)
 8004bec:	182b883a 	mov	r21,r3
 8004bf0:	b8001126 	beq	r23,zero,8004c38 <_dtoa_r+0x43c>
 8004bf4:	05020074 	movhi	r20,2049
 8004bf8:	a506e604 	addi	r20,r20,7064
 8004bfc:	5805883a 	mov	r2,r11
 8004c00:	5007883a 	mov	r3,r10
 8004c04:	b980004c 	andi	r6,r23,1
 8004c08:	1009883a 	mov	r4,r2
 8004c0c:	b82fd07a 	srai	r23,r23,1
 8004c10:	180b883a 	mov	r5,r3
 8004c14:	30000426 	beq	r6,zero,8004c28 <_dtoa_r+0x42c>
 8004c18:	a1800017 	ldw	r6,0(r20)
 8004c1c:	a1c00117 	ldw	r7,4(r20)
 8004c20:	8c400044 	addi	r17,r17,1
 8004c24:	800d7800 	call	800d780 <__muldf3>
 8004c28:	a5000204 	addi	r20,r20,8
 8004c2c:	b83ff51e 	bne	r23,zero,8004c04 <__alt_data_end+0xfc004c04>
 8004c30:	1017883a 	mov	r11,r2
 8004c34:	1815883a 	mov	r10,r3
 8004c38:	d9000e17 	ldw	r4,56(sp)
 8004c3c:	a80b883a 	mov	r5,r21
 8004c40:	580d883a 	mov	r6,r11
 8004c44:	500f883a 	mov	r7,r10
 8004c48:	800cbbc0 	call	800cbbc <__divdf3>
 8004c4c:	1029883a 	mov	r20,r2
 8004c50:	182b883a 	mov	r21,r3
 8004c54:	d9800c17 	ldw	r6,48(sp)
 8004c58:	30000626 	beq	r6,zero,8004c74 <_dtoa_r+0x478>
 8004c5c:	a009883a 	mov	r4,r20
 8004c60:	a80b883a 	mov	r5,r21
 8004c64:	000d883a 	mov	r6,zero
 8004c68:	01cffc34 	movhi	r7,16368
 8004c6c:	800d6a00 	call	800d6a0 <__ledf2>
 8004c70:	10043216 	blt	r2,zero,8005d3c <_dtoa_r+0x1540>
 8004c74:	8809883a 	mov	r4,r17
 8004c78:	800e9440 	call	800e944 <__floatsidf>
 8004c7c:	1009883a 	mov	r4,r2
 8004c80:	180b883a 	mov	r5,r3
 8004c84:	a00d883a 	mov	r6,r20
 8004c88:	a80f883a 	mov	r7,r21
 8004c8c:	800d7800 	call	800d780 <__muldf3>
 8004c90:	000d883a 	mov	r6,zero
 8004c94:	1009883a 	mov	r4,r2
 8004c98:	180b883a 	mov	r5,r3
 8004c9c:	01d00734 	movhi	r7,16412
 8004ca0:	800c3200 	call	800c320 <__adddf3>
 8004ca4:	1023883a 	mov	r17,r2
 8004ca8:	d9800617 	ldw	r6,24(sp)
 8004cac:	00bf3034 	movhi	r2,64704
 8004cb0:	1885883a 	add	r2,r3,r2
 8004cb4:	d8800e15 	stw	r2,56(sp)
 8004cb8:	30032e26 	beq	r6,zero,8005974 <_dtoa_r+0x1178>
 8004cbc:	d8c00517 	ldw	r3,20(sp)
 8004cc0:	da800617 	ldw	r10,24(sp)
 8004cc4:	d8c01215 	stw	r3,72(sp)
 8004cc8:	d9000b17 	ldw	r4,44(sp)
 8004ccc:	2003b026 	beq	r4,zero,8005b90 <_dtoa_r+0x1394>
 8004cd0:	50bfffc4 	addi	r2,r10,-1
 8004cd4:	100490fa 	slli	r2,r2,3
 8004cd8:	00c20074 	movhi	r3,2049
 8004cdc:	18c6f004 	addi	r3,r3,7104
 8004ce0:	1885883a 	add	r2,r3,r2
 8004ce4:	11800017 	ldw	r6,0(r2)
 8004ce8:	11c00117 	ldw	r7,4(r2)
 8004cec:	d8800717 	ldw	r2,28(sp)
 8004cf0:	0009883a 	mov	r4,zero
 8004cf4:	014ff834 	movhi	r5,16352
 8004cf8:	da801615 	stw	r10,88(sp)
 8004cfc:	15c00044 	addi	r23,r2,1
 8004d00:	800cbbc0 	call	800cbbc <__divdf3>
 8004d04:	d9c00e17 	ldw	r7,56(sp)
 8004d08:	880d883a 	mov	r6,r17
 8004d0c:	1009883a 	mov	r4,r2
 8004d10:	180b883a 	mov	r5,r3
 8004d14:	800dfec0 	call	800dfec <__subdf3>
 8004d18:	a80b883a 	mov	r5,r21
 8004d1c:	a009883a 	mov	r4,r20
 8004d20:	d8c01015 	stw	r3,64(sp)
 8004d24:	d8800e15 	stw	r2,56(sp)
 8004d28:	800e8bc0 	call	800e8bc <__fixdfsi>
 8004d2c:	1009883a 	mov	r4,r2
 8004d30:	d8801715 	stw	r2,92(sp)
 8004d34:	800e9440 	call	800e944 <__floatsidf>
 8004d38:	a009883a 	mov	r4,r20
 8004d3c:	a80b883a 	mov	r5,r21
 8004d40:	100d883a 	mov	r6,r2
 8004d44:	180f883a 	mov	r7,r3
 8004d48:	800dfec0 	call	800dfec <__subdf3>
 8004d4c:	da001717 	ldw	r8,92(sp)
 8004d50:	1829883a 	mov	r20,r3
 8004d54:	d8c00717 	ldw	r3,28(sp)
 8004d58:	d9000e17 	ldw	r4,56(sp)
 8004d5c:	d9401017 	ldw	r5,64(sp)
 8004d60:	42000c04 	addi	r8,r8,48
 8004d64:	1023883a 	mov	r17,r2
 8004d68:	1a000005 	stb	r8,0(r3)
 8004d6c:	880d883a 	mov	r6,r17
 8004d70:	a00f883a 	mov	r7,r20
 8004d74:	402b883a 	mov	r21,r8
 8004d78:	800d5c00 	call	800d5c0 <__gedf2>
 8004d7c:	00844516 	blt	zero,r2,8005e94 <_dtoa_r+0x1698>
 8004d80:	0009883a 	mov	r4,zero
 8004d84:	014ffc34 	movhi	r5,16368
 8004d88:	880d883a 	mov	r6,r17
 8004d8c:	a00f883a 	mov	r7,r20
 8004d90:	800dfec0 	call	800dfec <__subdf3>
 8004d94:	d9000e17 	ldw	r4,56(sp)
 8004d98:	d9401017 	ldw	r5,64(sp)
 8004d9c:	100d883a 	mov	r6,r2
 8004da0:	180f883a 	mov	r7,r3
 8004da4:	800d5c00 	call	800d5c0 <__gedf2>
 8004da8:	da801617 	ldw	r10,88(sp)
 8004dac:	00843616 	blt	zero,r2,8005e88 <_dtoa_r+0x168c>
 8004db0:	00800044 	movi	r2,1
 8004db4:	12806e0e 	bge	r2,r10,8004f70 <_dtoa_r+0x774>
 8004db8:	d9000717 	ldw	r4,28(sp)
 8004dbc:	dd801315 	stw	r22,76(sp)
 8004dc0:	dc001115 	stw	r16,68(sp)
 8004dc4:	2295883a 	add	r10,r4,r10
 8004dc8:	dcc01415 	stw	r19,80(sp)
 8004dcc:	502d883a 	mov	r22,r10
 8004dd0:	dcc01017 	ldw	r19,64(sp)
 8004dd4:	b821883a 	mov	r16,r23
 8004dd8:	dc801015 	stw	r18,64(sp)
 8004ddc:	dc800e17 	ldw	r18,56(sp)
 8004de0:	00000906 	br	8004e08 <_dtoa_r+0x60c>
 8004de4:	800dfec0 	call	800dfec <__subdf3>
 8004de8:	1009883a 	mov	r4,r2
 8004dec:	180b883a 	mov	r5,r3
 8004df0:	900d883a 	mov	r6,r18
 8004df4:	980f883a 	mov	r7,r19
 8004df8:	800d6a00 	call	800d6a0 <__ledf2>
 8004dfc:	10040e16 	blt	r2,zero,8005e38 <_dtoa_r+0x163c>
 8004e00:	b821883a 	mov	r16,r23
 8004e04:	bd841026 	beq	r23,r22,8005e48 <_dtoa_r+0x164c>
 8004e08:	9009883a 	mov	r4,r18
 8004e0c:	980b883a 	mov	r5,r19
 8004e10:	000d883a 	mov	r6,zero
 8004e14:	01d00934 	movhi	r7,16420
 8004e18:	800d7800 	call	800d780 <__muldf3>
 8004e1c:	000d883a 	mov	r6,zero
 8004e20:	01d00934 	movhi	r7,16420
 8004e24:	8809883a 	mov	r4,r17
 8004e28:	a00b883a 	mov	r5,r20
 8004e2c:	1025883a 	mov	r18,r2
 8004e30:	1827883a 	mov	r19,r3
 8004e34:	800d7800 	call	800d780 <__muldf3>
 8004e38:	180b883a 	mov	r5,r3
 8004e3c:	1009883a 	mov	r4,r2
 8004e40:	1823883a 	mov	r17,r3
 8004e44:	1029883a 	mov	r20,r2
 8004e48:	800e8bc0 	call	800e8bc <__fixdfsi>
 8004e4c:	1009883a 	mov	r4,r2
 8004e50:	102b883a 	mov	r21,r2
 8004e54:	800e9440 	call	800e944 <__floatsidf>
 8004e58:	a009883a 	mov	r4,r20
 8004e5c:	880b883a 	mov	r5,r17
 8004e60:	100d883a 	mov	r6,r2
 8004e64:	180f883a 	mov	r7,r3
 8004e68:	800dfec0 	call	800dfec <__subdf3>
 8004e6c:	ad400c04 	addi	r21,r21,48
 8004e70:	1009883a 	mov	r4,r2
 8004e74:	180b883a 	mov	r5,r3
 8004e78:	900d883a 	mov	r6,r18
 8004e7c:	980f883a 	mov	r7,r19
 8004e80:	85400005 	stb	r21,0(r16)
 8004e84:	1023883a 	mov	r17,r2
 8004e88:	1829883a 	mov	r20,r3
 8004e8c:	800d6a00 	call	800d6a0 <__ledf2>
 8004e90:	bdc00044 	addi	r23,r23,1
 8004e94:	0009883a 	mov	r4,zero
 8004e98:	014ffc34 	movhi	r5,16368
 8004e9c:	880d883a 	mov	r6,r17
 8004ea0:	a00f883a 	mov	r7,r20
 8004ea4:	103fcf0e 	bge	r2,zero,8004de4 <__alt_data_end+0xfc004de4>
 8004ea8:	d9801217 	ldw	r6,72(sp)
 8004eac:	dc001117 	ldw	r16,68(sp)
 8004eb0:	d9800515 	stw	r6,20(sp)
 8004eb4:	8009883a 	mov	r4,r16
 8004eb8:	e00b883a 	mov	r5,fp
 8004ebc:	8007ee00 	call	8007ee0 <_Bfree>
 8004ec0:	d8c00517 	ldw	r3,20(sp)
 8004ec4:	d9002317 	ldw	r4,140(sp)
 8004ec8:	d9802517 	ldw	r6,148(sp)
 8004ecc:	b8000005 	stb	zero,0(r23)
 8004ed0:	18800044 	addi	r2,r3,1
 8004ed4:	20800015 	stw	r2,0(r4)
 8004ed8:	30027226 	beq	r6,zero,80058a4 <_dtoa_r+0x10a8>
 8004edc:	35c00015 	stw	r23,0(r6)
 8004ee0:	d8800717 	ldw	r2,28(sp)
 8004ee4:	003e7406 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004ee8:	00800434 	movhi	r2,16
 8004eec:	10bfffc4 	addi	r2,r2,-1
 8004ef0:	a8aa703a 	and	r21,r21,r2
 8004ef4:	a83e801e 	bne	r21,zero,80048f8 <__alt_data_end+0xfc0048f8>
 8004ef8:	00820074 	movhi	r2,2049
 8004efc:	1086d104 	addi	r2,r2,6980
 8004f00:	003e7f06 	br	8004900 <__alt_data_end+0xfc004900>
 8004f04:	10c00204 	addi	r3,r2,8
 8004f08:	003e8206 	br	8004914 <__alt_data_end+0xfc004914>
 8004f0c:	01400434 	movhi	r5,16
 8004f10:	297fffc4 	addi	r5,r5,-1
 8004f14:	994a703a 	and	r5,r19,r5
 8004f18:	9009883a 	mov	r4,r18
 8004f1c:	8c7f0044 	addi	r17,r17,-1023
 8004f20:	294ffc34 	orhi	r5,r5,16368
 8004f24:	dd000217 	ldw	r20,8(sp)
 8004f28:	d8000f15 	stw	zero,60(sp)
 8004f2c:	003e9f06 	br	80049ac <__alt_data_end+0xfc0049ac>
 8004f30:	00820074 	movhi	r2,2049
 8004f34:	1086c804 	addi	r2,r2,6944
 8004f38:	003e5f06 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004f3c:	80001115 	stw	zero,68(r16)
 8004f40:	8009883a 	mov	r4,r16
 8004f44:	000b883a 	mov	r5,zero
 8004f48:	8007e380 	call	8007e38 <_Balloc>
 8004f4c:	01bfffc4 	movi	r6,-1
 8004f50:	d8800715 	stw	r2,28(sp)
 8004f54:	80801015 	stw	r2,64(r16)
 8004f58:	00800044 	movi	r2,1
 8004f5c:	d9800615 	stw	r6,24(sp)
 8004f60:	d8800b15 	stw	r2,44(sp)
 8004f64:	d8002215 	stw	zero,136(sp)
 8004f68:	d9800d15 	stw	r6,52(sp)
 8004f6c:	d8000315 	stw	zero,12(sp)
 8004f70:	d8800117 	ldw	r2,4(sp)
 8004f74:	10008e16 	blt	r2,zero,80051b0 <_dtoa_r+0x9b4>
 8004f78:	d9000517 	ldw	r4,20(sp)
 8004f7c:	00c00384 	movi	r3,14
 8004f80:	19008b16 	blt	r3,r4,80051b0 <_dtoa_r+0x9b4>
 8004f84:	200490fa 	slli	r2,r4,3
 8004f88:	00c20074 	movhi	r3,2049
 8004f8c:	d9802217 	ldw	r6,136(sp)
 8004f90:	18c6f004 	addi	r3,r3,7104
 8004f94:	1885883a 	add	r2,r3,r2
 8004f98:	14400017 	ldw	r17,0(r2)
 8004f9c:	15000117 	ldw	r20,4(r2)
 8004fa0:	3001c716 	blt	r6,zero,80056c0 <_dtoa_r+0xec4>
 8004fa4:	880d883a 	mov	r6,r17
 8004fa8:	a00f883a 	mov	r7,r20
 8004fac:	9009883a 	mov	r4,r18
 8004fb0:	980b883a 	mov	r5,r19
 8004fb4:	800cbbc0 	call	800cbbc <__divdf3>
 8004fb8:	180b883a 	mov	r5,r3
 8004fbc:	1009883a 	mov	r4,r2
 8004fc0:	800e8bc0 	call	800e8bc <__fixdfsi>
 8004fc4:	1009883a 	mov	r4,r2
 8004fc8:	102d883a 	mov	r22,r2
 8004fcc:	800e9440 	call	800e944 <__floatsidf>
 8004fd0:	1009883a 	mov	r4,r2
 8004fd4:	180b883a 	mov	r5,r3
 8004fd8:	880d883a 	mov	r6,r17
 8004fdc:	a00f883a 	mov	r7,r20
 8004fe0:	800d7800 	call	800d780 <__muldf3>
 8004fe4:	9009883a 	mov	r4,r18
 8004fe8:	980b883a 	mov	r5,r19
 8004fec:	100d883a 	mov	r6,r2
 8004ff0:	180f883a 	mov	r7,r3
 8004ff4:	800dfec0 	call	800dfec <__subdf3>
 8004ff8:	d9000717 	ldw	r4,28(sp)
 8004ffc:	d9800617 	ldw	r6,24(sp)
 8005000:	180b883a 	mov	r5,r3
 8005004:	b0c00c04 	addi	r3,r22,48
 8005008:	20c00005 	stb	r3,0(r4)
 800500c:	25c00044 	addi	r23,r4,1
 8005010:	01000044 	movi	r4,1
 8005014:	1011883a 	mov	r8,r2
 8005018:	2807883a 	mov	r3,r5
 800501c:	31003d26 	beq	r6,r4,8005114 <_dtoa_r+0x918>
 8005020:	000d883a 	mov	r6,zero
 8005024:	01d00934 	movhi	r7,16420
 8005028:	1009883a 	mov	r4,r2
 800502c:	800d7800 	call	800d780 <__muldf3>
 8005030:	1009883a 	mov	r4,r2
 8005034:	180b883a 	mov	r5,r3
 8005038:	000d883a 	mov	r6,zero
 800503c:	000f883a 	mov	r7,zero
 8005040:	1027883a 	mov	r19,r2
 8005044:	182b883a 	mov	r21,r3
 8005048:	800d53c0 	call	800d53c <__eqdf2>
 800504c:	103f9926 	beq	r2,zero,8004eb4 <__alt_data_end+0xfc004eb4>
 8005050:	d8c00617 	ldw	r3,24(sp)
 8005054:	d9000717 	ldw	r4,28(sp)
 8005058:	b825883a 	mov	r18,r23
 800505c:	18bfffc4 	addi	r2,r3,-1
 8005060:	20ad883a 	add	r22,r4,r2
 8005064:	dc000315 	stw	r16,12(sp)
 8005068:	00000a06 	br	8005094 <_dtoa_r+0x898>
 800506c:	800d7800 	call	800d780 <__muldf3>
 8005070:	1009883a 	mov	r4,r2
 8005074:	180b883a 	mov	r5,r3
 8005078:	000d883a 	mov	r6,zero
 800507c:	000f883a 	mov	r7,zero
 8005080:	1027883a 	mov	r19,r2
 8005084:	182b883a 	mov	r21,r3
 8005088:	b825883a 	mov	r18,r23
 800508c:	800d53c0 	call	800d53c <__eqdf2>
 8005090:	10022626 	beq	r2,zero,800592c <_dtoa_r+0x1130>
 8005094:	880d883a 	mov	r6,r17
 8005098:	a00f883a 	mov	r7,r20
 800509c:	9809883a 	mov	r4,r19
 80050a0:	a80b883a 	mov	r5,r21
 80050a4:	800cbbc0 	call	800cbbc <__divdf3>
 80050a8:	180b883a 	mov	r5,r3
 80050ac:	1009883a 	mov	r4,r2
 80050b0:	800e8bc0 	call	800e8bc <__fixdfsi>
 80050b4:	1009883a 	mov	r4,r2
 80050b8:	1021883a 	mov	r16,r2
 80050bc:	800e9440 	call	800e944 <__floatsidf>
 80050c0:	1009883a 	mov	r4,r2
 80050c4:	180b883a 	mov	r5,r3
 80050c8:	880d883a 	mov	r6,r17
 80050cc:	a00f883a 	mov	r7,r20
 80050d0:	800d7800 	call	800d780 <__muldf3>
 80050d4:	9809883a 	mov	r4,r19
 80050d8:	a80b883a 	mov	r5,r21
 80050dc:	100d883a 	mov	r6,r2
 80050e0:	180f883a 	mov	r7,r3
 80050e4:	800dfec0 	call	800dfec <__subdf3>
 80050e8:	82000c04 	addi	r8,r16,48
 80050ec:	92000005 	stb	r8,0(r18)
 80050f0:	1009883a 	mov	r4,r2
 80050f4:	180b883a 	mov	r5,r3
 80050f8:	000d883a 	mov	r6,zero
 80050fc:	01d00934 	movhi	r7,16420
 8005100:	1011883a 	mov	r8,r2
 8005104:	bdc00044 	addi	r23,r23,1
 8005108:	95bfd81e 	bne	r18,r22,800506c <__alt_data_end+0xfc00506c>
 800510c:	802d883a 	mov	r22,r16
 8005110:	dc000317 	ldw	r16,12(sp)
 8005114:	4009883a 	mov	r4,r8
 8005118:	180b883a 	mov	r5,r3
 800511c:	400d883a 	mov	r6,r8
 8005120:	180f883a 	mov	r7,r3
 8005124:	800c3200 	call	800c320 <__adddf3>
 8005128:	8809883a 	mov	r4,r17
 800512c:	a00b883a 	mov	r5,r20
 8005130:	100d883a 	mov	r6,r2
 8005134:	180f883a 	mov	r7,r3
 8005138:	1027883a 	mov	r19,r2
 800513c:	1825883a 	mov	r18,r3
 8005140:	800d6a00 	call	800d6a0 <__ledf2>
 8005144:	10000816 	blt	r2,zero,8005168 <_dtoa_r+0x96c>
 8005148:	8809883a 	mov	r4,r17
 800514c:	a00b883a 	mov	r5,r20
 8005150:	980d883a 	mov	r6,r19
 8005154:	900f883a 	mov	r7,r18
 8005158:	800d53c0 	call	800d53c <__eqdf2>
 800515c:	103f551e 	bne	r2,zero,8004eb4 <__alt_data_end+0xfc004eb4>
 8005160:	b580004c 	andi	r22,r22,1
 8005164:	b03f5326 	beq	r22,zero,8004eb4 <__alt_data_end+0xfc004eb4>
 8005168:	bd7fffc3 	ldbu	r21,-1(r23)
 800516c:	b8bfffc4 	addi	r2,r23,-1
 8005170:	1007883a 	mov	r3,r2
 8005174:	01400e44 	movi	r5,57
 8005178:	d9800717 	ldw	r6,28(sp)
 800517c:	00000506 	br	8005194 <_dtoa_r+0x998>
 8005180:	18ffffc4 	addi	r3,r3,-1
 8005184:	30825e26 	beq	r6,r2,8005b00 <_dtoa_r+0x1304>
 8005188:	1d400003 	ldbu	r21,0(r3)
 800518c:	102f883a 	mov	r23,r2
 8005190:	10bfffc4 	addi	r2,r2,-1
 8005194:	a9003fcc 	andi	r4,r21,255
 8005198:	2100201c 	xori	r4,r4,128
 800519c:	213fe004 	addi	r4,r4,-128
 80051a0:	217ff726 	beq	r4,r5,8005180 <__alt_data_end+0xfc005180>
 80051a4:	aa000044 	addi	r8,r21,1
 80051a8:	12000005 	stb	r8,0(r2)
 80051ac:	003f4106 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 80051b0:	d8c00b17 	ldw	r3,44(sp)
 80051b4:	18006726 	beq	r3,zero,8005354 <_dtoa_r+0xb58>
 80051b8:	d9000317 	ldw	r4,12(sp)
 80051bc:	00c00044 	movi	r3,1
 80051c0:	19016a0e 	bge	r3,r4,800576c <_dtoa_r+0xf70>
 80051c4:	d8800617 	ldw	r2,24(sp)
 80051c8:	d8c00917 	ldw	r3,36(sp)
 80051cc:	157fffc4 	addi	r21,r2,-1
 80051d0:	1d420716 	blt	r3,r21,80059f0 <_dtoa_r+0x11f4>
 80051d4:	1d6bc83a 	sub	r21,r3,r21
 80051d8:	d8800617 	ldw	r2,24(sp)
 80051dc:	1002c716 	blt	r2,zero,8005cfc <_dtoa_r+0x1500>
 80051e0:	dd000817 	ldw	r20,32(sp)
 80051e4:	d8800617 	ldw	r2,24(sp)
 80051e8:	d9800817 	ldw	r6,32(sp)
 80051ec:	8009883a 	mov	r4,r16
 80051f0:	01400044 	movi	r5,1
 80051f4:	308d883a 	add	r6,r6,r2
 80051f8:	d9800815 	stw	r6,32(sp)
 80051fc:	b0ad883a 	add	r22,r22,r2
 8005200:	80082600 	call	8008260 <__i2b>
 8005204:	1023883a 	mov	r17,r2
 8005208:	a0000826 	beq	r20,zero,800522c <_dtoa_r+0xa30>
 800520c:	0580070e 	bge	zero,r22,800522c <_dtoa_r+0xa30>
 8005210:	b005883a 	mov	r2,r22
 8005214:	a5812016 	blt	r20,r22,8005698 <_dtoa_r+0xe9c>
 8005218:	d8c00817 	ldw	r3,32(sp)
 800521c:	a0a9c83a 	sub	r20,r20,r2
 8005220:	b0adc83a 	sub	r22,r22,r2
 8005224:	1887c83a 	sub	r3,r3,r2
 8005228:	d8c00815 	stw	r3,32(sp)
 800522c:	d9000917 	ldw	r4,36(sp)
 8005230:	0100140e 	bge	zero,r4,8005284 <_dtoa_r+0xa88>
 8005234:	d9800b17 	ldw	r6,44(sp)
 8005238:	3001e526 	beq	r6,zero,80059d0 <_dtoa_r+0x11d4>
 800523c:	05400e0e 	bge	zero,r21,8005278 <_dtoa_r+0xa7c>
 8005240:	880b883a 	mov	r5,r17
 8005244:	8009883a 	mov	r4,r16
 8005248:	a80d883a 	mov	r6,r21
 800524c:	800852c0 	call	800852c <__pow5mult>
 8005250:	e00d883a 	mov	r6,fp
 8005254:	8009883a 	mov	r4,r16
 8005258:	100b883a 	mov	r5,r2
 800525c:	1023883a 	mov	r17,r2
 8005260:	800829c0 	call	800829c <__multiply>
 8005264:	102f883a 	mov	r23,r2
 8005268:	e00b883a 	mov	r5,fp
 800526c:	8009883a 	mov	r4,r16
 8005270:	8007ee00 	call	8007ee0 <_Bfree>
 8005274:	b839883a 	mov	fp,r23
 8005278:	d8800917 	ldw	r2,36(sp)
 800527c:	154dc83a 	sub	r6,r2,r21
 8005280:	3001281e 	bne	r6,zero,8005724 <_dtoa_r+0xf28>
 8005284:	05c00044 	movi	r23,1
 8005288:	8009883a 	mov	r4,r16
 800528c:	b80b883a 	mov	r5,r23
 8005290:	80082600 	call	8008260 <__i2b>
 8005294:	d8c00a17 	ldw	r3,40(sp)
 8005298:	102b883a 	mov	r21,r2
 800529c:	00c0310e 	bge	zero,r3,8005364 <_dtoa_r+0xb68>
 80052a0:	8009883a 	mov	r4,r16
 80052a4:	100b883a 	mov	r5,r2
 80052a8:	180d883a 	mov	r6,r3
 80052ac:	800852c0 	call	800852c <__pow5mult>
 80052b0:	d9000317 	ldw	r4,12(sp)
 80052b4:	102b883a 	mov	r21,r2
 80052b8:	b9011f0e 	bge	r23,r4,8005738 <_dtoa_r+0xf3c>
 80052bc:	0027883a 	mov	r19,zero
 80052c0:	a8800417 	ldw	r2,16(r21)
 80052c4:	10800104 	addi	r2,r2,4
 80052c8:	1085883a 	add	r2,r2,r2
 80052cc:	1085883a 	add	r2,r2,r2
 80052d0:	a885883a 	add	r2,r21,r2
 80052d4:	11000017 	ldw	r4,0(r2)
 80052d8:	80081480 	call	8008148 <__hi0bits>
 80052dc:	00c00804 	movi	r3,32
 80052e0:	1885c83a 	sub	r2,r3,r2
 80052e4:	00002506 	br	800537c <_dtoa_r+0xb80>
 80052e8:	01800044 	movi	r6,1
 80052ec:	d9800c15 	stw	r6,48(sp)
 80052f0:	003dec06 	br	8004aa4 <__alt_data_end+0xfc004aa4>
 80052f4:	d8c00817 	ldw	r3,32(sp)
 80052f8:	d9000517 	ldw	r4,20(sp)
 80052fc:	d8000a15 	stw	zero,40(sp)
 8005300:	1907c83a 	sub	r3,r3,r4
 8005304:	010dc83a 	sub	r6,zero,r4
 8005308:	d8c00815 	stw	r3,32(sp)
 800530c:	d9800915 	stw	r6,36(sp)
 8005310:	003ded06 	br	8004ac8 <__alt_data_end+0xfc004ac8>
 8005314:	05adc83a 	sub	r22,zero,r22
 8005318:	dd800815 	stw	r22,32(sp)
 800531c:	002d883a 	mov	r22,zero
 8005320:	003de406 	br	8004ab4 <__alt_data_end+0xfc004ab4>
 8005324:	d9000517 	ldw	r4,20(sp)
 8005328:	800e9440 	call	800e944 <__floatsidf>
 800532c:	1009883a 	mov	r4,r2
 8005330:	180b883a 	mov	r5,r3
 8005334:	b00d883a 	mov	r6,r22
 8005338:	a80f883a 	mov	r7,r21
 800533c:	800d53c0 	call	800d53c <__eqdf2>
 8005340:	103dc726 	beq	r2,zero,8004a60 <__alt_data_end+0xfc004a60>
 8005344:	d8800517 	ldw	r2,20(sp)
 8005348:	10bfffc4 	addi	r2,r2,-1
 800534c:	d8800515 	stw	r2,20(sp)
 8005350:	003dc306 	br	8004a60 <__alt_data_end+0xfc004a60>
 8005354:	dd400917 	ldw	r21,36(sp)
 8005358:	dd000817 	ldw	r20,32(sp)
 800535c:	0023883a 	mov	r17,zero
 8005360:	003fa906 	br	8005208 <__alt_data_end+0xfc005208>
 8005364:	d9800317 	ldw	r6,12(sp)
 8005368:	b981670e 	bge	r23,r6,8005908 <_dtoa_r+0x110c>
 800536c:	0027883a 	mov	r19,zero
 8005370:	d8c00a17 	ldw	r3,40(sp)
 8005374:	183fd21e 	bne	r3,zero,80052c0 <__alt_data_end+0xfc0052c0>
 8005378:	00800044 	movi	r2,1
 800537c:	1585883a 	add	r2,r2,r22
 8005380:	108007cc 	andi	r2,r2,31
 8005384:	10005f26 	beq	r2,zero,8005504 <_dtoa_r+0xd08>
 8005388:	00c00804 	movi	r3,32
 800538c:	1887c83a 	sub	r3,r3,r2
 8005390:	01000104 	movi	r4,4
 8005394:	20c2dd0e 	bge	r4,r3,8005f0c <_dtoa_r+0x1710>
 8005398:	d9000817 	ldw	r4,32(sp)
 800539c:	00c00704 	movi	r3,28
 80053a0:	1885c83a 	sub	r2,r3,r2
 80053a4:	2089883a 	add	r4,r4,r2
 80053a8:	d9000815 	stw	r4,32(sp)
 80053ac:	a0a9883a 	add	r20,r20,r2
 80053b0:	b0ad883a 	add	r22,r22,r2
 80053b4:	d8800817 	ldw	r2,32(sp)
 80053b8:	0080050e 	bge	zero,r2,80053d0 <_dtoa_r+0xbd4>
 80053bc:	e00b883a 	mov	r5,fp
 80053c0:	8009883a 	mov	r4,r16
 80053c4:	100d883a 	mov	r6,r2
 80053c8:	800866c0 	call	800866c <__lshift>
 80053cc:	1039883a 	mov	fp,r2
 80053d0:	0580050e 	bge	zero,r22,80053e8 <_dtoa_r+0xbec>
 80053d4:	a80b883a 	mov	r5,r21
 80053d8:	8009883a 	mov	r4,r16
 80053dc:	b00d883a 	mov	r6,r22
 80053e0:	800866c0 	call	800866c <__lshift>
 80053e4:	102b883a 	mov	r21,r2
 80053e8:	d8c00c17 	ldw	r3,48(sp)
 80053ec:	1801161e 	bne	r3,zero,8005848 <_dtoa_r+0x104c>
 80053f0:	d8c00617 	ldw	r3,24(sp)
 80053f4:	00c12d0e 	bge	zero,r3,80058ac <_dtoa_r+0x10b0>
 80053f8:	d8c00b17 	ldw	r3,44(sp)
 80053fc:	1800571e 	bne	r3,zero,800555c <_dtoa_r+0xd60>
 8005400:	dc800717 	ldw	r18,28(sp)
 8005404:	dcc00617 	ldw	r19,24(sp)
 8005408:	9029883a 	mov	r20,r18
 800540c:	00000206 	br	8005418 <_dtoa_r+0xc1c>
 8005410:	8007f080 	call	8007f08 <__multadd>
 8005414:	1039883a 	mov	fp,r2
 8005418:	e009883a 	mov	r4,fp
 800541c:	a80b883a 	mov	r5,r21
 8005420:	80045d40 	call	80045d4 <quorem>
 8005424:	10800c04 	addi	r2,r2,48
 8005428:	90800005 	stb	r2,0(r18)
 800542c:	94800044 	addi	r18,r18,1
 8005430:	9507c83a 	sub	r3,r18,r20
 8005434:	8009883a 	mov	r4,r16
 8005438:	e00b883a 	mov	r5,fp
 800543c:	01800284 	movi	r6,10
 8005440:	000f883a 	mov	r7,zero
 8005444:	1cfff216 	blt	r3,r19,8005410 <__alt_data_end+0xfc005410>
 8005448:	1011883a 	mov	r8,r2
 800544c:	d8800617 	ldw	r2,24(sp)
 8005450:	00822e0e 	bge	zero,r2,8005d0c <_dtoa_r+0x1510>
 8005454:	d9000717 	ldw	r4,28(sp)
 8005458:	0025883a 	mov	r18,zero
 800545c:	20af883a 	add	r23,r4,r2
 8005460:	e00b883a 	mov	r5,fp
 8005464:	01800044 	movi	r6,1
 8005468:	8009883a 	mov	r4,r16
 800546c:	da001715 	stw	r8,92(sp)
 8005470:	800866c0 	call	800866c <__lshift>
 8005474:	1009883a 	mov	r4,r2
 8005478:	a80b883a 	mov	r5,r21
 800547c:	1039883a 	mov	fp,r2
 8005480:	80087b40 	call	80087b4 <__mcmp>
 8005484:	da001717 	ldw	r8,92(sp)
 8005488:	00816e0e 	bge	zero,r2,8005a44 <_dtoa_r+0x1248>
 800548c:	b93fffc3 	ldbu	r4,-1(r23)
 8005490:	b8bfffc4 	addi	r2,r23,-1
 8005494:	1007883a 	mov	r3,r2
 8005498:	01800e44 	movi	r6,57
 800549c:	d9c00717 	ldw	r7,28(sp)
 80054a0:	00000506 	br	80054b8 <_dtoa_r+0xcbc>
 80054a4:	18ffffc4 	addi	r3,r3,-1
 80054a8:	38811926 	beq	r7,r2,8005910 <_dtoa_r+0x1114>
 80054ac:	19000003 	ldbu	r4,0(r3)
 80054b0:	102f883a 	mov	r23,r2
 80054b4:	10bfffc4 	addi	r2,r2,-1
 80054b8:	21403fcc 	andi	r5,r4,255
 80054bc:	2940201c 	xori	r5,r5,128
 80054c0:	297fe004 	addi	r5,r5,-128
 80054c4:	29bff726 	beq	r5,r6,80054a4 <__alt_data_end+0xfc0054a4>
 80054c8:	21000044 	addi	r4,r4,1
 80054cc:	11000005 	stb	r4,0(r2)
 80054d0:	8009883a 	mov	r4,r16
 80054d4:	a80b883a 	mov	r5,r21
 80054d8:	8007ee00 	call	8007ee0 <_Bfree>
 80054dc:	883e7526 	beq	r17,zero,8004eb4 <__alt_data_end+0xfc004eb4>
 80054e0:	90000426 	beq	r18,zero,80054f4 <_dtoa_r+0xcf8>
 80054e4:	94400326 	beq	r18,r17,80054f4 <_dtoa_r+0xcf8>
 80054e8:	8009883a 	mov	r4,r16
 80054ec:	900b883a 	mov	r5,r18
 80054f0:	8007ee00 	call	8007ee0 <_Bfree>
 80054f4:	8009883a 	mov	r4,r16
 80054f8:	880b883a 	mov	r5,r17
 80054fc:	8007ee00 	call	8007ee0 <_Bfree>
 8005500:	003e6c06 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 8005504:	00800704 	movi	r2,28
 8005508:	d9800817 	ldw	r6,32(sp)
 800550c:	a0a9883a 	add	r20,r20,r2
 8005510:	b0ad883a 	add	r22,r22,r2
 8005514:	308d883a 	add	r6,r6,r2
 8005518:	d9800815 	stw	r6,32(sp)
 800551c:	003fa506 	br	80053b4 <__alt_data_end+0xfc0053b4>
 8005520:	013efb84 	movi	r4,-1042
 8005524:	246bc83a 	sub	r21,r4,r17
 8005528:	9548983a 	sll	r4,r18,r21
 800552c:	003d1806 	br	8004990 <__alt_data_end+0xfc004990>
 8005530:	d8000c15 	stw	zero,48(sp)
 8005534:	003d5b06 	br	8004aa4 <__alt_data_end+0xfc004aa4>
 8005538:	880b883a 	mov	r5,r17
 800553c:	8009883a 	mov	r4,r16
 8005540:	01800284 	movi	r6,10
 8005544:	000f883a 	mov	r7,zero
 8005548:	8007f080 	call	8007f08 <__multadd>
 800554c:	1023883a 	mov	r17,r2
 8005550:	d8800d17 	ldw	r2,52(sp)
 8005554:	0082550e 	bge	zero,r2,8005eac <_dtoa_r+0x16b0>
 8005558:	d8800615 	stw	r2,24(sp)
 800555c:	0500050e 	bge	zero,r20,8005574 <_dtoa_r+0xd78>
 8005560:	880b883a 	mov	r5,r17
 8005564:	8009883a 	mov	r4,r16
 8005568:	a00d883a 	mov	r6,r20
 800556c:	800866c0 	call	800866c <__lshift>
 8005570:	1023883a 	mov	r17,r2
 8005574:	98016a1e 	bne	r19,zero,8005b20 <_dtoa_r+0x1324>
 8005578:	8829883a 	mov	r20,r17
 800557c:	d9000617 	ldw	r4,24(sp)
 8005580:	dcc00717 	ldw	r19,28(sp)
 8005584:	9480004c 	andi	r18,r18,1
 8005588:	20bfffc4 	addi	r2,r4,-1
 800558c:	9885883a 	add	r2,r19,r2
 8005590:	d8800415 	stw	r2,16(sp)
 8005594:	dc800615 	stw	r18,24(sp)
 8005598:	e009883a 	mov	r4,fp
 800559c:	a80b883a 	mov	r5,r21
 80055a0:	80045d40 	call	80045d4 <quorem>
 80055a4:	e009883a 	mov	r4,fp
 80055a8:	880b883a 	mov	r5,r17
 80055ac:	102f883a 	mov	r23,r2
 80055b0:	80087b40 	call	80087b4 <__mcmp>
 80055b4:	8009883a 	mov	r4,r16
 80055b8:	a80b883a 	mov	r5,r21
 80055bc:	a00d883a 	mov	r6,r20
 80055c0:	102d883a 	mov	r22,r2
 80055c4:	80088140 	call	8008814 <__mdiff>
 80055c8:	1007883a 	mov	r3,r2
 80055cc:	10800317 	ldw	r2,12(r2)
 80055d0:	bc800c04 	addi	r18,r23,48
 80055d4:	1000971e 	bne	r2,zero,8005834 <_dtoa_r+0x1038>
 80055d8:	180b883a 	mov	r5,r3
 80055dc:	e009883a 	mov	r4,fp
 80055e0:	d8c01515 	stw	r3,84(sp)
 80055e4:	80087b40 	call	80087b4 <__mcmp>
 80055e8:	d8c01517 	ldw	r3,84(sp)
 80055ec:	8009883a 	mov	r4,r16
 80055f0:	d8801515 	stw	r2,84(sp)
 80055f4:	180b883a 	mov	r5,r3
 80055f8:	8007ee00 	call	8007ee0 <_Bfree>
 80055fc:	d8801517 	ldw	r2,84(sp)
 8005600:	1000041e 	bne	r2,zero,8005614 <_dtoa_r+0xe18>
 8005604:	d9800317 	ldw	r6,12(sp)
 8005608:	3000021e 	bne	r6,zero,8005614 <_dtoa_r+0xe18>
 800560c:	d8c00617 	ldw	r3,24(sp)
 8005610:	18007626 	beq	r3,zero,80057ec <_dtoa_r+0xff0>
 8005614:	b0005b16 	blt	r22,zero,8005784 <_dtoa_r+0xf88>
 8005618:	b000041e 	bne	r22,zero,800562c <_dtoa_r+0xe30>
 800561c:	d9000317 	ldw	r4,12(sp)
 8005620:	2000021e 	bne	r4,zero,800562c <_dtoa_r+0xe30>
 8005624:	d8c00617 	ldw	r3,24(sp)
 8005628:	18005626 	beq	r3,zero,8005784 <_dtoa_r+0xf88>
 800562c:	00814d16 	blt	zero,r2,8005b64 <_dtoa_r+0x1368>
 8005630:	d8c00417 	ldw	r3,16(sp)
 8005634:	9d800044 	addi	r22,r19,1
 8005638:	9c800005 	stb	r18,0(r19)
 800563c:	b02f883a 	mov	r23,r22
 8005640:	98c14c26 	beq	r19,r3,8005b74 <_dtoa_r+0x1378>
 8005644:	e00b883a 	mov	r5,fp
 8005648:	8009883a 	mov	r4,r16
 800564c:	01800284 	movi	r6,10
 8005650:	000f883a 	mov	r7,zero
 8005654:	8007f080 	call	8007f08 <__multadd>
 8005658:	1039883a 	mov	fp,r2
 800565c:	8d006d26 	beq	r17,r20,8005814 <_dtoa_r+0x1018>
 8005660:	880b883a 	mov	r5,r17
 8005664:	01800284 	movi	r6,10
 8005668:	000f883a 	mov	r7,zero
 800566c:	8009883a 	mov	r4,r16
 8005670:	8007f080 	call	8007f08 <__multadd>
 8005674:	a00b883a 	mov	r5,r20
 8005678:	8009883a 	mov	r4,r16
 800567c:	01800284 	movi	r6,10
 8005680:	000f883a 	mov	r7,zero
 8005684:	1023883a 	mov	r17,r2
 8005688:	8007f080 	call	8007f08 <__multadd>
 800568c:	1029883a 	mov	r20,r2
 8005690:	b027883a 	mov	r19,r22
 8005694:	003fc006 	br	8005598 <__alt_data_end+0xfc005598>
 8005698:	a005883a 	mov	r2,r20
 800569c:	003ede06 	br	8005218 <__alt_data_end+0xfc005218>
 80056a0:	01000044 	movi	r4,1
 80056a4:	d9000b15 	stw	r4,44(sp)
 80056a8:	d9802217 	ldw	r6,136(sp)
 80056ac:	0180dc0e 	bge	zero,r6,8005a20 <_dtoa_r+0x1224>
 80056b0:	3023883a 	mov	r17,r6
 80056b4:	d9800d15 	stw	r6,52(sp)
 80056b8:	d9800615 	stw	r6,24(sp)
 80056bc:	003d1e06 	br	8004b38 <__alt_data_end+0xfc004b38>
 80056c0:	d8800617 	ldw	r2,24(sp)
 80056c4:	00be3716 	blt	zero,r2,8004fa4 <__alt_data_end+0xfc004fa4>
 80056c8:	1000be1e 	bne	r2,zero,80059c4 <_dtoa_r+0x11c8>
 80056cc:	8809883a 	mov	r4,r17
 80056d0:	a00b883a 	mov	r5,r20
 80056d4:	000d883a 	mov	r6,zero
 80056d8:	01d00534 	movhi	r7,16404
 80056dc:	800d7800 	call	800d780 <__muldf3>
 80056e0:	1009883a 	mov	r4,r2
 80056e4:	180b883a 	mov	r5,r3
 80056e8:	900d883a 	mov	r6,r18
 80056ec:	980f883a 	mov	r7,r19
 80056f0:	800d5c00 	call	800d5c0 <__gedf2>
 80056f4:	002b883a 	mov	r21,zero
 80056f8:	0023883a 	mov	r17,zero
 80056fc:	10007a16 	blt	r2,zero,80058e8 <_dtoa_r+0x10ec>
 8005700:	d9002217 	ldw	r4,136(sp)
 8005704:	ddc00717 	ldw	r23,28(sp)
 8005708:	0108303a 	nor	r4,zero,r4
 800570c:	d9000515 	stw	r4,20(sp)
 8005710:	8009883a 	mov	r4,r16
 8005714:	a80b883a 	mov	r5,r21
 8005718:	8007ee00 	call	8007ee0 <_Bfree>
 800571c:	883f751e 	bne	r17,zero,80054f4 <__alt_data_end+0xfc0054f4>
 8005720:	003de406 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 8005724:	e00b883a 	mov	r5,fp
 8005728:	8009883a 	mov	r4,r16
 800572c:	800852c0 	call	800852c <__pow5mult>
 8005730:	1039883a 	mov	fp,r2
 8005734:	003ed306 	br	8005284 <__alt_data_end+0xfc005284>
 8005738:	903ee01e 	bne	r18,zero,80052bc <__alt_data_end+0xfc0052bc>
 800573c:	00800434 	movhi	r2,16
 8005740:	10bfffc4 	addi	r2,r2,-1
 8005744:	9884703a 	and	r2,r19,r2
 8005748:	103f081e 	bne	r2,zero,800536c <__alt_data_end+0xfc00536c>
 800574c:	9cdffc2c 	andhi	r19,r19,32752
 8005750:	983f0626 	beq	r19,zero,800536c <__alt_data_end+0xfc00536c>
 8005754:	d8800817 	ldw	r2,32(sp)
 8005758:	b5800044 	addi	r22,r22,1
 800575c:	04c00044 	movi	r19,1
 8005760:	10800044 	addi	r2,r2,1
 8005764:	d8800815 	stw	r2,32(sp)
 8005768:	003f0106 	br	8005370 <__alt_data_end+0xfc005370>
 800576c:	d9800f17 	ldw	r6,60(sp)
 8005770:	30016826 	beq	r6,zero,8005d14 <_dtoa_r+0x1518>
 8005774:	10810cc4 	addi	r2,r2,1075
 8005778:	dd400917 	ldw	r21,36(sp)
 800577c:	dd000817 	ldw	r20,32(sp)
 8005780:	003e9906 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005784:	9011883a 	mov	r8,r18
 8005788:	4007883a 	mov	r3,r8
 800578c:	e02d883a 	mov	r22,fp
 8005790:	0080100e 	bge	zero,r2,80057d4 <_dtoa_r+0xfd8>
 8005794:	01800044 	movi	r6,1
 8005798:	8009883a 	mov	r4,r16
 800579c:	e00b883a 	mov	r5,fp
 80057a0:	da001515 	stw	r8,84(sp)
 80057a4:	da001715 	stw	r8,92(sp)
 80057a8:	800866c0 	call	800866c <__lshift>
 80057ac:	1009883a 	mov	r4,r2
 80057b0:	a80b883a 	mov	r5,r21
 80057b4:	102d883a 	mov	r22,r2
 80057b8:	80087b40 	call	80087b4 <__mcmp>
 80057bc:	d8c01517 	ldw	r3,84(sp)
 80057c0:	da001717 	ldw	r8,92(sp)
 80057c4:	0081a50e 	bge	zero,r2,8005e5c <_dtoa_r+0x1660>
 80057c8:	00800e44 	movi	r2,57
 80057cc:	40817b26 	beq	r8,r2,8005dbc <_dtoa_r+0x15c0>
 80057d0:	40c00044 	addi	r3,r8,1
 80057d4:	8825883a 	mov	r18,r17
 80057d8:	9dc00044 	addi	r23,r19,1
 80057dc:	98c00005 	stb	r3,0(r19)
 80057e0:	a023883a 	mov	r17,r20
 80057e4:	b039883a 	mov	fp,r22
 80057e8:	003f3906 	br	80054d0 <__alt_data_end+0xfc0054d0>
 80057ec:	00800e44 	movi	r2,57
 80057f0:	9011883a 	mov	r8,r18
 80057f4:	90817226 	beq	r18,r2,8005dc0 <_dtoa_r+0x15c4>
 80057f8:	0580010e 	bge	zero,r22,8005800 <_dtoa_r+0x1004>
 80057fc:	ba000c44 	addi	r8,r23,49
 8005800:	8825883a 	mov	r18,r17
 8005804:	9dc00044 	addi	r23,r19,1
 8005808:	9a000005 	stb	r8,0(r19)
 800580c:	a023883a 	mov	r17,r20
 8005810:	003f2f06 	br	80054d0 <__alt_data_end+0xfc0054d0>
 8005814:	880b883a 	mov	r5,r17
 8005818:	8009883a 	mov	r4,r16
 800581c:	01800284 	movi	r6,10
 8005820:	000f883a 	mov	r7,zero
 8005824:	8007f080 	call	8007f08 <__multadd>
 8005828:	1023883a 	mov	r17,r2
 800582c:	1029883a 	mov	r20,r2
 8005830:	003f9706 	br	8005690 <__alt_data_end+0xfc005690>
 8005834:	8009883a 	mov	r4,r16
 8005838:	180b883a 	mov	r5,r3
 800583c:	8007ee00 	call	8007ee0 <_Bfree>
 8005840:	00800044 	movi	r2,1
 8005844:	003f7306 	br	8005614 <__alt_data_end+0xfc005614>
 8005848:	e009883a 	mov	r4,fp
 800584c:	a80b883a 	mov	r5,r21
 8005850:	80087b40 	call	80087b4 <__mcmp>
 8005854:	103ee60e 	bge	r2,zero,80053f0 <__alt_data_end+0xfc0053f0>
 8005858:	8009883a 	mov	r4,r16
 800585c:	e00b883a 	mov	r5,fp
 8005860:	01800284 	movi	r6,10
 8005864:	000f883a 	mov	r7,zero
 8005868:	8007f080 	call	8007f08 <__multadd>
 800586c:	d9000517 	ldw	r4,20(sp)
 8005870:	d9800b17 	ldw	r6,44(sp)
 8005874:	1039883a 	mov	fp,r2
 8005878:	213fffc4 	addi	r4,r4,-1
 800587c:	d9000515 	stw	r4,20(sp)
 8005880:	303f2d1e 	bne	r6,zero,8005538 <__alt_data_end+0xfc005538>
 8005884:	d9000d17 	ldw	r4,52(sp)
 8005888:	0101780e 	bge	zero,r4,8005e6c <_dtoa_r+0x1670>
 800588c:	d9000615 	stw	r4,24(sp)
 8005890:	003edb06 	br	8005400 <__alt_data_end+0xfc005400>
 8005894:	00800084 	movi	r2,2
 8005898:	30818e1e 	bne	r6,r2,8005ed4 <_dtoa_r+0x16d8>
 800589c:	d8000b15 	stw	zero,44(sp)
 80058a0:	003f8106 	br	80056a8 <__alt_data_end+0xfc0056a8>
 80058a4:	d8800717 	ldw	r2,28(sp)
 80058a8:	003c0306 	br	80048b8 <__alt_data_end+0xfc0048b8>
 80058ac:	d9000317 	ldw	r4,12(sp)
 80058b0:	00800084 	movi	r2,2
 80058b4:	113ed00e 	bge	r2,r4,80053f8 <__alt_data_end+0xfc0053f8>
 80058b8:	d8c00617 	ldw	r3,24(sp)
 80058bc:	183f901e 	bne	r3,zero,8005700 <__alt_data_end+0xfc005700>
 80058c0:	a80b883a 	mov	r5,r21
 80058c4:	8009883a 	mov	r4,r16
 80058c8:	01800144 	movi	r6,5
 80058cc:	000f883a 	mov	r7,zero
 80058d0:	8007f080 	call	8007f08 <__multadd>
 80058d4:	e009883a 	mov	r4,fp
 80058d8:	100b883a 	mov	r5,r2
 80058dc:	102b883a 	mov	r21,r2
 80058e0:	80087b40 	call	80087b4 <__mcmp>
 80058e4:	00bf860e 	bge	zero,r2,8005700 <__alt_data_end+0xfc005700>
 80058e8:	d9800717 	ldw	r6,28(sp)
 80058ec:	00800c44 	movi	r2,49
 80058f0:	30800005 	stb	r2,0(r6)
 80058f4:	d8800517 	ldw	r2,20(sp)
 80058f8:	35c00044 	addi	r23,r6,1
 80058fc:	10800044 	addi	r2,r2,1
 8005900:	d8800515 	stw	r2,20(sp)
 8005904:	003f8206 	br	8005710 <__alt_data_end+0xfc005710>
 8005908:	903e981e 	bne	r18,zero,800536c <__alt_data_end+0xfc00536c>
 800590c:	003f8b06 	br	800573c <__alt_data_end+0xfc00573c>
 8005910:	d9800517 	ldw	r6,20(sp)
 8005914:	d8c00717 	ldw	r3,28(sp)
 8005918:	00800c44 	movi	r2,49
 800591c:	31800044 	addi	r6,r6,1
 8005920:	d9800515 	stw	r6,20(sp)
 8005924:	18800005 	stb	r2,0(r3)
 8005928:	003ee906 	br	80054d0 <__alt_data_end+0xfc0054d0>
 800592c:	dc000317 	ldw	r16,12(sp)
 8005930:	003d6006 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 8005934:	8809883a 	mov	r4,r17
 8005938:	800e9440 	call	800e944 <__floatsidf>
 800593c:	a009883a 	mov	r4,r20
 8005940:	a80b883a 	mov	r5,r21
 8005944:	100d883a 	mov	r6,r2
 8005948:	180f883a 	mov	r7,r3
 800594c:	800d7800 	call	800d780 <__muldf3>
 8005950:	1009883a 	mov	r4,r2
 8005954:	180b883a 	mov	r5,r3
 8005958:	000d883a 	mov	r6,zero
 800595c:	01d00734 	movhi	r7,16412
 8005960:	800c3200 	call	800c320 <__adddf3>
 8005964:	1023883a 	mov	r17,r2
 8005968:	00bf3034 	movhi	r2,64704
 800596c:	1885883a 	add	r2,r3,r2
 8005970:	d8800e15 	stw	r2,56(sp)
 8005974:	a009883a 	mov	r4,r20
 8005978:	a80b883a 	mov	r5,r21
 800597c:	000d883a 	mov	r6,zero
 8005980:	01d00534 	movhi	r7,16404
 8005984:	800dfec0 	call	800dfec <__subdf3>
 8005988:	d9c00e17 	ldw	r7,56(sp)
 800598c:	1009883a 	mov	r4,r2
 8005990:	180b883a 	mov	r5,r3
 8005994:	880d883a 	mov	r6,r17
 8005998:	102b883a 	mov	r21,r2
 800599c:	1829883a 	mov	r20,r3
 80059a0:	800d5c00 	call	800d5c0 <__gedf2>
 80059a4:	00807716 	blt	zero,r2,8005b84 <_dtoa_r+0x1388>
 80059a8:	d8800e17 	ldw	r2,56(sp)
 80059ac:	a809883a 	mov	r4,r21
 80059b0:	a00b883a 	mov	r5,r20
 80059b4:	11e0003c 	xorhi	r7,r2,32768
 80059b8:	880d883a 	mov	r6,r17
 80059bc:	800d6a00 	call	800d6a0 <__ledf2>
 80059c0:	103d6b0e 	bge	r2,zero,8004f70 <__alt_data_end+0xfc004f70>
 80059c4:	002b883a 	mov	r21,zero
 80059c8:	0023883a 	mov	r17,zero
 80059cc:	003f4c06 	br	8005700 <__alt_data_end+0xfc005700>
 80059d0:	d9800917 	ldw	r6,36(sp)
 80059d4:	e00b883a 	mov	r5,fp
 80059d8:	8009883a 	mov	r4,r16
 80059dc:	800852c0 	call	800852c <__pow5mult>
 80059e0:	1039883a 	mov	fp,r2
 80059e4:	003e2706 	br	8005284 <__alt_data_end+0xfc005284>
 80059e8:	d8000b15 	stw	zero,44(sp)
 80059ec:	003c4906 	br	8004b14 <__alt_data_end+0xfc004b14>
 80059f0:	d9000917 	ldw	r4,36(sp)
 80059f4:	d9800a17 	ldw	r6,40(sp)
 80059f8:	dd400915 	stw	r21,36(sp)
 80059fc:	a905c83a 	sub	r2,r21,r4
 8005a00:	308d883a 	add	r6,r6,r2
 8005a04:	d9800a15 	stw	r6,40(sp)
 8005a08:	002b883a 	mov	r21,zero
 8005a0c:	003df206 	br	80051d8 <__alt_data_end+0xfc0051d8>
 8005a10:	dc800e15 	stw	r18,56(sp)
 8005a14:	982b883a 	mov	r21,r19
 8005a18:	04400084 	movi	r17,2
 8005a1c:	003c7406 	br	8004bf0 <__alt_data_end+0xfc004bf0>
 8005a20:	04400044 	movi	r17,1
 8005a24:	dc400d15 	stw	r17,52(sp)
 8005a28:	dc400615 	stw	r17,24(sp)
 8005a2c:	dc402215 	stw	r17,136(sp)
 8005a30:	80001115 	stw	zero,68(r16)
 8005a34:	000b883a 	mov	r5,zero
 8005a38:	003c4a06 	br	8004b64 <__alt_data_end+0xfc004b64>
 8005a3c:	3023883a 	mov	r17,r6
 8005a40:	003ffb06 	br	8005a30 <__alt_data_end+0xfc005a30>
 8005a44:	1000021e 	bne	r2,zero,8005a50 <_dtoa_r+0x1254>
 8005a48:	4200004c 	andi	r8,r8,1
 8005a4c:	403e8f1e 	bne	r8,zero,800548c <__alt_data_end+0xfc00548c>
 8005a50:	01000c04 	movi	r4,48
 8005a54:	00000106 	br	8005a5c <_dtoa_r+0x1260>
 8005a58:	102f883a 	mov	r23,r2
 8005a5c:	b8bfffc4 	addi	r2,r23,-1
 8005a60:	10c00007 	ldb	r3,0(r2)
 8005a64:	193ffc26 	beq	r3,r4,8005a58 <__alt_data_end+0xfc005a58>
 8005a68:	003e9906 	br	80054d0 <__alt_data_end+0xfc0054d0>
 8005a6c:	d9000517 	ldw	r4,20(sp)
 8005a70:	012fc83a 	sub	r23,zero,r4
 8005a74:	b800ad26 	beq	r23,zero,8005d2c <_dtoa_r+0x1530>
 8005a78:	b88003cc 	andi	r2,r23,15
 8005a7c:	100490fa 	slli	r2,r2,3
 8005a80:	00c20074 	movhi	r3,2049
 8005a84:	18c6f004 	addi	r3,r3,7104
 8005a88:	1885883a 	add	r2,r3,r2
 8005a8c:	11800017 	ldw	r6,0(r2)
 8005a90:	11c00117 	ldw	r7,4(r2)
 8005a94:	b82fd13a 	srai	r23,r23,4
 8005a98:	9009883a 	mov	r4,r18
 8005a9c:	980b883a 	mov	r5,r19
 8005aa0:	800d7800 	call	800d780 <__muldf3>
 8005aa4:	1029883a 	mov	r20,r2
 8005aa8:	182b883a 	mov	r21,r3
 8005aac:	b800f426 	beq	r23,zero,8005e80 <_dtoa_r+0x1684>
 8005ab0:	02020074 	movhi	r8,2049
 8005ab4:	4206e604 	addi	r8,r8,7064
 8005ab8:	8029883a 	mov	r20,r16
 8005abc:	04400084 	movi	r17,2
 8005ac0:	4021883a 	mov	r16,r8
 8005ac4:	b980004c 	andi	r6,r23,1
 8005ac8:	1009883a 	mov	r4,r2
 8005acc:	b82fd07a 	srai	r23,r23,1
 8005ad0:	180b883a 	mov	r5,r3
 8005ad4:	30000426 	beq	r6,zero,8005ae8 <_dtoa_r+0x12ec>
 8005ad8:	81800017 	ldw	r6,0(r16)
 8005adc:	81c00117 	ldw	r7,4(r16)
 8005ae0:	8c400044 	addi	r17,r17,1
 8005ae4:	800d7800 	call	800d780 <__muldf3>
 8005ae8:	84000204 	addi	r16,r16,8
 8005aec:	b83ff51e 	bne	r23,zero,8005ac4 <__alt_data_end+0xfc005ac4>
 8005af0:	a021883a 	mov	r16,r20
 8005af4:	182b883a 	mov	r21,r3
 8005af8:	1029883a 	mov	r20,r2
 8005afc:	003c5506 	br	8004c54 <__alt_data_end+0xfc004c54>
 8005b00:	d9800517 	ldw	r6,20(sp)
 8005b04:	d9000717 	ldw	r4,28(sp)
 8005b08:	00c00c04 	movi	r3,48
 8005b0c:	31800044 	addi	r6,r6,1
 8005b10:	d9800515 	stw	r6,20(sp)
 8005b14:	20c00005 	stb	r3,0(r4)
 8005b18:	02000c44 	movi	r8,49
 8005b1c:	003da206 	br	80051a8 <__alt_data_end+0xfc0051a8>
 8005b20:	89400117 	ldw	r5,4(r17)
 8005b24:	8009883a 	mov	r4,r16
 8005b28:	8007e380 	call	8007e38 <_Balloc>
 8005b2c:	89800417 	ldw	r6,16(r17)
 8005b30:	11000304 	addi	r4,r2,12
 8005b34:	89400304 	addi	r5,r17,12
 8005b38:	31800084 	addi	r6,r6,2
 8005b3c:	318d883a 	add	r6,r6,r6
 8005b40:	318d883a 	add	r6,r6,r6
 8005b44:	1027883a 	mov	r19,r2
 8005b48:	8007a800 	call	8007a80 <memcpy>
 8005b4c:	8009883a 	mov	r4,r16
 8005b50:	980b883a 	mov	r5,r19
 8005b54:	01800044 	movi	r6,1
 8005b58:	800866c0 	call	800866c <__lshift>
 8005b5c:	1029883a 	mov	r20,r2
 8005b60:	003e8606 	br	800557c <__alt_data_end+0xfc00557c>
 8005b64:	00800e44 	movi	r2,57
 8005b68:	90809526 	beq	r18,r2,8005dc0 <_dtoa_r+0x15c4>
 8005b6c:	92000044 	addi	r8,r18,1
 8005b70:	003f2306 	br	8005800 <__alt_data_end+0xfc005800>
 8005b74:	9011883a 	mov	r8,r18
 8005b78:	8825883a 	mov	r18,r17
 8005b7c:	a023883a 	mov	r17,r20
 8005b80:	003e3706 	br	8005460 <__alt_data_end+0xfc005460>
 8005b84:	002b883a 	mov	r21,zero
 8005b88:	0023883a 	mov	r17,zero
 8005b8c:	003f5606 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005b90:	51bfffc4 	addi	r6,r10,-1
 8005b94:	300490fa 	slli	r2,r6,3
 8005b98:	00c20074 	movhi	r3,2049
 8005b9c:	18c6f004 	addi	r3,r3,7104
 8005ba0:	1885883a 	add	r2,r3,r2
 8005ba4:	d9c00e17 	ldw	r7,56(sp)
 8005ba8:	11000017 	ldw	r4,0(r2)
 8005bac:	11400117 	ldw	r5,4(r2)
 8005bb0:	d8800717 	ldw	r2,28(sp)
 8005bb4:	d9801015 	stw	r6,64(sp)
 8005bb8:	880d883a 	mov	r6,r17
 8005bbc:	da801615 	stw	r10,88(sp)
 8005bc0:	15c00044 	addi	r23,r2,1
 8005bc4:	800d7800 	call	800d780 <__muldf3>
 8005bc8:	a80b883a 	mov	r5,r21
 8005bcc:	a009883a 	mov	r4,r20
 8005bd0:	d8c01115 	stw	r3,68(sp)
 8005bd4:	d8800e15 	stw	r2,56(sp)
 8005bd8:	800e8bc0 	call	800e8bc <__fixdfsi>
 8005bdc:	1009883a 	mov	r4,r2
 8005be0:	1023883a 	mov	r17,r2
 8005be4:	800e9440 	call	800e944 <__floatsidf>
 8005be8:	a009883a 	mov	r4,r20
 8005bec:	a80b883a 	mov	r5,r21
 8005bf0:	100d883a 	mov	r6,r2
 8005bf4:	180f883a 	mov	r7,r3
 8005bf8:	800dfec0 	call	800dfec <__subdf3>
 8005bfc:	1813883a 	mov	r9,r3
 8005c00:	d8c00717 	ldw	r3,28(sp)
 8005c04:	8c400c04 	addi	r17,r17,48
 8005c08:	1011883a 	mov	r8,r2
 8005c0c:	1c400005 	stb	r17,0(r3)
 8005c10:	da801617 	ldw	r10,88(sp)
 8005c14:	00800044 	movi	r2,1
 8005c18:	50802326 	beq	r10,r2,8005ca8 <_dtoa_r+0x14ac>
 8005c1c:	d8800717 	ldw	r2,28(sp)
 8005c20:	b82b883a 	mov	r21,r23
 8005c24:	dc001315 	stw	r16,76(sp)
 8005c28:	12a9883a 	add	r20,r2,r10
 8005c2c:	4807883a 	mov	r3,r9
 8005c30:	4005883a 	mov	r2,r8
 8005c34:	dc801415 	stw	r18,80(sp)
 8005c38:	000d883a 	mov	r6,zero
 8005c3c:	01d00934 	movhi	r7,16420
 8005c40:	1009883a 	mov	r4,r2
 8005c44:	180b883a 	mov	r5,r3
 8005c48:	800d7800 	call	800d780 <__muldf3>
 8005c4c:	180b883a 	mov	r5,r3
 8005c50:	1009883a 	mov	r4,r2
 8005c54:	1821883a 	mov	r16,r3
 8005c58:	1025883a 	mov	r18,r2
 8005c5c:	800e8bc0 	call	800e8bc <__fixdfsi>
 8005c60:	1009883a 	mov	r4,r2
 8005c64:	1023883a 	mov	r17,r2
 8005c68:	800e9440 	call	800e944 <__floatsidf>
 8005c6c:	9009883a 	mov	r4,r18
 8005c70:	800b883a 	mov	r5,r16
 8005c74:	100d883a 	mov	r6,r2
 8005c78:	180f883a 	mov	r7,r3
 8005c7c:	8c400c04 	addi	r17,r17,48
 8005c80:	800dfec0 	call	800dfec <__subdf3>
 8005c84:	ad400044 	addi	r21,r21,1
 8005c88:	ac7fffc5 	stb	r17,-1(r21)
 8005c8c:	ad3fea1e 	bne	r21,r20,8005c38 <__alt_data_end+0xfc005c38>
 8005c90:	1813883a 	mov	r9,r3
 8005c94:	d8c01017 	ldw	r3,64(sp)
 8005c98:	dc001317 	ldw	r16,76(sp)
 8005c9c:	dc801417 	ldw	r18,80(sp)
 8005ca0:	1011883a 	mov	r8,r2
 8005ca4:	b8ef883a 	add	r23,r23,r3
 8005ca8:	d9000e17 	ldw	r4,56(sp)
 8005cac:	d9401117 	ldw	r5,68(sp)
 8005cb0:	000d883a 	mov	r6,zero
 8005cb4:	01cff834 	movhi	r7,16352
 8005cb8:	da001715 	stw	r8,92(sp)
 8005cbc:	da401515 	stw	r9,84(sp)
 8005cc0:	800c3200 	call	800c320 <__adddf3>
 8005cc4:	da001717 	ldw	r8,92(sp)
 8005cc8:	da401517 	ldw	r9,84(sp)
 8005ccc:	1009883a 	mov	r4,r2
 8005cd0:	400d883a 	mov	r6,r8
 8005cd4:	480f883a 	mov	r7,r9
 8005cd8:	180b883a 	mov	r5,r3
 8005cdc:	800d6a00 	call	800d6a0 <__ledf2>
 8005ce0:	da001717 	ldw	r8,92(sp)
 8005ce4:	da401517 	ldw	r9,84(sp)
 8005ce8:	10003b0e 	bge	r2,zero,8005dd8 <_dtoa_r+0x15dc>
 8005cec:	d9001217 	ldw	r4,72(sp)
 8005cf0:	bd7fffc3 	ldbu	r21,-1(r23)
 8005cf4:	d9000515 	stw	r4,20(sp)
 8005cf8:	003d1c06 	br	800516c <__alt_data_end+0xfc00516c>
 8005cfc:	d8c00817 	ldw	r3,32(sp)
 8005d00:	18a9c83a 	sub	r20,r3,r2
 8005d04:	0005883a 	mov	r2,zero
 8005d08:	003d3706 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005d0c:	00800044 	movi	r2,1
 8005d10:	003dd006 	br	8005454 <__alt_data_end+0xfc005454>
 8005d14:	d8c00217 	ldw	r3,8(sp)
 8005d18:	00800d84 	movi	r2,54
 8005d1c:	dd400917 	ldw	r21,36(sp)
 8005d20:	10c5c83a 	sub	r2,r2,r3
 8005d24:	dd000817 	ldw	r20,32(sp)
 8005d28:	003d2f06 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005d2c:	9029883a 	mov	r20,r18
 8005d30:	982b883a 	mov	r21,r19
 8005d34:	04400084 	movi	r17,2
 8005d38:	003bc606 	br	8004c54 <__alt_data_end+0xfc004c54>
 8005d3c:	d8800617 	ldw	r2,24(sp)
 8005d40:	103efc26 	beq	r2,zero,8005934 <__alt_data_end+0xfc005934>
 8005d44:	d8c00d17 	ldw	r3,52(sp)
 8005d48:	00fc890e 	bge	zero,r3,8004f70 <__alt_data_end+0xfc004f70>
 8005d4c:	a80b883a 	mov	r5,r21
 8005d50:	a009883a 	mov	r4,r20
 8005d54:	000d883a 	mov	r6,zero
 8005d58:	01d00934 	movhi	r7,16420
 8005d5c:	800d7800 	call	800d780 <__muldf3>
 8005d60:	89000044 	addi	r4,r17,1
 8005d64:	1029883a 	mov	r20,r2
 8005d68:	182b883a 	mov	r21,r3
 8005d6c:	800e9440 	call	800e944 <__floatsidf>
 8005d70:	a009883a 	mov	r4,r20
 8005d74:	a80b883a 	mov	r5,r21
 8005d78:	100d883a 	mov	r6,r2
 8005d7c:	180f883a 	mov	r7,r3
 8005d80:	800d7800 	call	800d780 <__muldf3>
 8005d84:	1009883a 	mov	r4,r2
 8005d88:	180b883a 	mov	r5,r3
 8005d8c:	000d883a 	mov	r6,zero
 8005d90:	01d00734 	movhi	r7,16412
 8005d94:	800c3200 	call	800c320 <__adddf3>
 8005d98:	d9000517 	ldw	r4,20(sp)
 8005d9c:	1023883a 	mov	r17,r2
 8005da0:	00bf3034 	movhi	r2,64704
 8005da4:	213fffc4 	addi	r4,r4,-1
 8005da8:	1885883a 	add	r2,r3,r2
 8005dac:	d9001215 	stw	r4,72(sp)
 8005db0:	d8800e15 	stw	r2,56(sp)
 8005db4:	da800d17 	ldw	r10,52(sp)
 8005db8:	003bc306 	br	8004cc8 <__alt_data_end+0xfc004cc8>
 8005dbc:	b039883a 	mov	fp,r22
 8005dc0:	01000e44 	movi	r4,57
 8005dc4:	8825883a 	mov	r18,r17
 8005dc8:	9dc00044 	addi	r23,r19,1
 8005dcc:	99000005 	stb	r4,0(r19)
 8005dd0:	a023883a 	mov	r17,r20
 8005dd4:	003dae06 	br	8005490 <__alt_data_end+0xfc005490>
 8005dd8:	d9800e17 	ldw	r6,56(sp)
 8005ddc:	d9c01117 	ldw	r7,68(sp)
 8005de0:	0009883a 	mov	r4,zero
 8005de4:	014ff834 	movhi	r5,16352
 8005de8:	da001715 	stw	r8,92(sp)
 8005dec:	da401515 	stw	r9,84(sp)
 8005df0:	800dfec0 	call	800dfec <__subdf3>
 8005df4:	da001717 	ldw	r8,92(sp)
 8005df8:	da401517 	ldw	r9,84(sp)
 8005dfc:	1009883a 	mov	r4,r2
 8005e00:	180b883a 	mov	r5,r3
 8005e04:	400d883a 	mov	r6,r8
 8005e08:	480f883a 	mov	r7,r9
 8005e0c:	800d5c00 	call	800d5c0 <__gedf2>
 8005e10:	00bc570e 	bge	zero,r2,8004f70 <__alt_data_end+0xfc004f70>
 8005e14:	01000c04 	movi	r4,48
 8005e18:	00000106 	br	8005e20 <_dtoa_r+0x1624>
 8005e1c:	102f883a 	mov	r23,r2
 8005e20:	b8bfffc4 	addi	r2,r23,-1
 8005e24:	10c00007 	ldb	r3,0(r2)
 8005e28:	193ffc26 	beq	r3,r4,8005e1c <__alt_data_end+0xfc005e1c>
 8005e2c:	d9801217 	ldw	r6,72(sp)
 8005e30:	d9800515 	stw	r6,20(sp)
 8005e34:	003c1f06 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 8005e38:	d8801217 	ldw	r2,72(sp)
 8005e3c:	dc001117 	ldw	r16,68(sp)
 8005e40:	d8800515 	stw	r2,20(sp)
 8005e44:	003cc906 	br	800516c <__alt_data_end+0xfc00516c>
 8005e48:	dd801317 	ldw	r22,76(sp)
 8005e4c:	dc001117 	ldw	r16,68(sp)
 8005e50:	dcc01417 	ldw	r19,80(sp)
 8005e54:	dc801017 	ldw	r18,64(sp)
 8005e58:	003c4506 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005e5c:	103e5d1e 	bne	r2,zero,80057d4 <__alt_data_end+0xfc0057d4>
 8005e60:	4080004c 	andi	r2,r8,1
 8005e64:	103e5b26 	beq	r2,zero,80057d4 <__alt_data_end+0xfc0057d4>
 8005e68:	003e5706 	br	80057c8 <__alt_data_end+0xfc0057c8>
 8005e6c:	d8c00317 	ldw	r3,12(sp)
 8005e70:	00800084 	movi	r2,2
 8005e74:	10c00a16 	blt	r2,r3,8005ea0 <_dtoa_r+0x16a4>
 8005e78:	d9000d17 	ldw	r4,52(sp)
 8005e7c:	003e8306 	br	800588c <__alt_data_end+0xfc00588c>
 8005e80:	04400084 	movi	r17,2
 8005e84:	003b7306 	br	8004c54 <__alt_data_end+0xfc004c54>
 8005e88:	d9801217 	ldw	r6,72(sp)
 8005e8c:	d9800515 	stw	r6,20(sp)
 8005e90:	003cb606 	br	800516c <__alt_data_end+0xfc00516c>
 8005e94:	d9001217 	ldw	r4,72(sp)
 8005e98:	d9000515 	stw	r4,20(sp)
 8005e9c:	003c0506 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 8005ea0:	d9800d17 	ldw	r6,52(sp)
 8005ea4:	d9800615 	stw	r6,24(sp)
 8005ea8:	003e8306 	br	80058b8 <__alt_data_end+0xfc0058b8>
 8005eac:	d9800317 	ldw	r6,12(sp)
 8005eb0:	00800084 	movi	r2,2
 8005eb4:	11800216 	blt	r2,r6,8005ec0 <_dtoa_r+0x16c4>
 8005eb8:	d8800d17 	ldw	r2,52(sp)
 8005ebc:	003da606 	br	8005558 <__alt_data_end+0xfc005558>
 8005ec0:	d8800d17 	ldw	r2,52(sp)
 8005ec4:	d8800615 	stw	r2,24(sp)
 8005ec8:	003e7b06 	br	80058b8 <__alt_data_end+0xfc0058b8>
 8005ecc:	05000044 	movi	r20,1
 8005ed0:	003b0506 	br	8004ae8 <__alt_data_end+0xfc004ae8>
 8005ed4:	8009883a 	mov	r4,r16
 8005ed8:	80001115 	stw	zero,68(r16)
 8005edc:	000b883a 	mov	r5,zero
 8005ee0:	8007e380 	call	8007e38 <_Balloc>
 8005ee4:	d8800715 	stw	r2,28(sp)
 8005ee8:	d8c00717 	ldw	r3,28(sp)
 8005eec:	00bfffc4 	movi	r2,-1
 8005ef0:	01000044 	movi	r4,1
 8005ef4:	d8800615 	stw	r2,24(sp)
 8005ef8:	80c01015 	stw	r3,64(r16)
 8005efc:	d9000b15 	stw	r4,44(sp)
 8005f00:	d8002215 	stw	zero,136(sp)
 8005f04:	d8800d15 	stw	r2,52(sp)
 8005f08:	003c1906 	br	8004f70 <__alt_data_end+0xfc004f70>
 8005f0c:	193d2926 	beq	r3,r4,80053b4 <__alt_data_end+0xfc0053b4>
 8005f10:	00c00f04 	movi	r3,60
 8005f14:	1885c83a 	sub	r2,r3,r2
 8005f18:	003d7b06 	br	8005508 <__alt_data_end+0xfc005508>
 8005f1c:	000b883a 	mov	r5,zero
 8005f20:	003b1006 	br	8004b64 <__alt_data_end+0xfc004b64>

08005f24 <_fflush_r>:
 8005f24:	defffb04 	addi	sp,sp,-20
 8005f28:	dcc00315 	stw	r19,12(sp)
 8005f2c:	dc000015 	stw	r16,0(sp)
 8005f30:	dfc00415 	stw	ra,16(sp)
 8005f34:	dc800215 	stw	r18,8(sp)
 8005f38:	dc400115 	stw	r17,4(sp)
 8005f3c:	2027883a 	mov	r19,r4
 8005f40:	2821883a 	mov	r16,r5
 8005f44:	20000226 	beq	r4,zero,8005f50 <_fflush_r+0x2c>
 8005f48:	20800e17 	ldw	r2,56(r4)
 8005f4c:	10005326 	beq	r2,zero,800609c <_fflush_r+0x178>
 8005f50:	8080030b 	ldhu	r2,12(r16)
 8005f54:	10ffffcc 	andi	r3,r2,65535
 8005f58:	18e0001c 	xori	r3,r3,32768
 8005f5c:	18e00004 	addi	r3,r3,-32768
 8005f60:	18002c26 	beq	r3,zero,8006014 <_fflush_r+0xf0>
 8005f64:	10c0020c 	andi	r3,r2,8
 8005f68:	1800321e 	bne	r3,zero,8006034 <_fflush_r+0x110>
 8005f6c:	80c00117 	ldw	r3,4(r16)
 8005f70:	10820014 	ori	r2,r2,2048
 8005f74:	8080030d 	sth	r2,12(r16)
 8005f78:	00c0570e 	bge	zero,r3,80060d8 <_fflush_r+0x1b4>
 8005f7c:	82000a17 	ldw	r8,40(r16)
 8005f80:	40002426 	beq	r8,zero,8006014 <_fflush_r+0xf0>
 8005f84:	9c400017 	ldw	r17,0(r19)
 8005f88:	10c4000c 	andi	r3,r2,4096
 8005f8c:	98000015 	stw	zero,0(r19)
 8005f90:	18004626 	beq	r3,zero,80060ac <_fflush_r+0x188>
 8005f94:	81801417 	ldw	r6,80(r16)
 8005f98:	10c0010c 	andi	r3,r2,4
 8005f9c:	18000626 	beq	r3,zero,8005fb8 <_fflush_r+0x94>
 8005fa0:	80c00117 	ldw	r3,4(r16)
 8005fa4:	80800c17 	ldw	r2,48(r16)
 8005fa8:	30cdc83a 	sub	r6,r6,r3
 8005fac:	10000226 	beq	r2,zero,8005fb8 <_fflush_r+0x94>
 8005fb0:	80800f17 	ldw	r2,60(r16)
 8005fb4:	308dc83a 	sub	r6,r6,r2
 8005fb8:	81400717 	ldw	r5,28(r16)
 8005fbc:	9809883a 	mov	r4,r19
 8005fc0:	000f883a 	mov	r7,zero
 8005fc4:	403ee83a 	callr	r8
 8005fc8:	00ffffc4 	movi	r3,-1
 8005fcc:	10c04526 	beq	r2,r3,80060e4 <_fflush_r+0x1c0>
 8005fd0:	80c0030b 	ldhu	r3,12(r16)
 8005fd4:	81000417 	ldw	r4,16(r16)
 8005fd8:	80000115 	stw	zero,4(r16)
 8005fdc:	197dffcc 	andi	r5,r3,63487
 8005fe0:	8140030d 	sth	r5,12(r16)
 8005fe4:	81000015 	stw	r4,0(r16)
 8005fe8:	18c4000c 	andi	r3,r3,4096
 8005fec:	18000126 	beq	r3,zero,8005ff4 <_fflush_r+0xd0>
 8005ff0:	80801415 	stw	r2,80(r16)
 8005ff4:	81400c17 	ldw	r5,48(r16)
 8005ff8:	9c400015 	stw	r17,0(r19)
 8005ffc:	28000526 	beq	r5,zero,8006014 <_fflush_r+0xf0>
 8006000:	80801004 	addi	r2,r16,64
 8006004:	28800226 	beq	r5,r2,8006010 <_fflush_r+0xec>
 8006008:	9809883a 	mov	r4,r19
 800600c:	80066540 	call	8006654 <_free_r>
 8006010:	80000c15 	stw	zero,48(r16)
 8006014:	0005883a 	mov	r2,zero
 8006018:	dfc00417 	ldw	ra,16(sp)
 800601c:	dcc00317 	ldw	r19,12(sp)
 8006020:	dc800217 	ldw	r18,8(sp)
 8006024:	dc400117 	ldw	r17,4(sp)
 8006028:	dc000017 	ldw	r16,0(sp)
 800602c:	dec00504 	addi	sp,sp,20
 8006030:	f800283a 	ret
 8006034:	84800417 	ldw	r18,16(r16)
 8006038:	903ff626 	beq	r18,zero,8006014 <__alt_data_end+0xfc006014>
 800603c:	84400017 	ldw	r17,0(r16)
 8006040:	108000cc 	andi	r2,r2,3
 8006044:	84800015 	stw	r18,0(r16)
 8006048:	8ca3c83a 	sub	r17,r17,r18
 800604c:	10001526 	beq	r2,zero,80060a4 <_fflush_r+0x180>
 8006050:	0005883a 	mov	r2,zero
 8006054:	80800215 	stw	r2,8(r16)
 8006058:	04400316 	blt	zero,r17,8006068 <_fflush_r+0x144>
 800605c:	003fed06 	br	8006014 <__alt_data_end+0xfc006014>
 8006060:	90a5883a 	add	r18,r18,r2
 8006064:	047feb0e 	bge	zero,r17,8006014 <__alt_data_end+0xfc006014>
 8006068:	80800917 	ldw	r2,36(r16)
 800606c:	81400717 	ldw	r5,28(r16)
 8006070:	880f883a 	mov	r7,r17
 8006074:	900d883a 	mov	r6,r18
 8006078:	9809883a 	mov	r4,r19
 800607c:	103ee83a 	callr	r2
 8006080:	88a3c83a 	sub	r17,r17,r2
 8006084:	00bff616 	blt	zero,r2,8006060 <__alt_data_end+0xfc006060>
 8006088:	80c0030b 	ldhu	r3,12(r16)
 800608c:	00bfffc4 	movi	r2,-1
 8006090:	18c01014 	ori	r3,r3,64
 8006094:	80c0030d 	sth	r3,12(r16)
 8006098:	003fdf06 	br	8006018 <__alt_data_end+0xfc006018>
 800609c:	80064e00 	call	80064e0 <__sinit>
 80060a0:	003fab06 	br	8005f50 <__alt_data_end+0xfc005f50>
 80060a4:	80800517 	ldw	r2,20(r16)
 80060a8:	003fea06 	br	8006054 <__alt_data_end+0xfc006054>
 80060ac:	81400717 	ldw	r5,28(r16)
 80060b0:	000d883a 	mov	r6,zero
 80060b4:	9809883a 	mov	r4,r19
 80060b8:	01c00044 	movi	r7,1
 80060bc:	403ee83a 	callr	r8
 80060c0:	100d883a 	mov	r6,r2
 80060c4:	00bfffc4 	movi	r2,-1
 80060c8:	30801326 	beq	r6,r2,8006118 <_fflush_r+0x1f4>
 80060cc:	8080030b 	ldhu	r2,12(r16)
 80060d0:	82000a17 	ldw	r8,40(r16)
 80060d4:	003fb006 	br	8005f98 <__alt_data_end+0xfc005f98>
 80060d8:	80c00f17 	ldw	r3,60(r16)
 80060dc:	00ffa716 	blt	zero,r3,8005f7c <__alt_data_end+0xfc005f7c>
 80060e0:	003fcc06 	br	8006014 <__alt_data_end+0xfc006014>
 80060e4:	98c00017 	ldw	r3,0(r19)
 80060e8:	183fb926 	beq	r3,zero,8005fd0 <__alt_data_end+0xfc005fd0>
 80060ec:	01000744 	movi	r4,29
 80060f0:	19000226 	beq	r3,r4,80060fc <_fflush_r+0x1d8>
 80060f4:	01000584 	movi	r4,22
 80060f8:	1900101e 	bne	r3,r4,800613c <_fflush_r+0x218>
 80060fc:	8080030b 	ldhu	r2,12(r16)
 8006100:	80c00417 	ldw	r3,16(r16)
 8006104:	80000115 	stw	zero,4(r16)
 8006108:	10bdffcc 	andi	r2,r2,63487
 800610c:	8080030d 	sth	r2,12(r16)
 8006110:	80c00015 	stw	r3,0(r16)
 8006114:	003fb706 	br	8005ff4 <__alt_data_end+0xfc005ff4>
 8006118:	98800017 	ldw	r2,0(r19)
 800611c:	103feb26 	beq	r2,zero,80060cc <__alt_data_end+0xfc0060cc>
 8006120:	00c00744 	movi	r3,29
 8006124:	10c00226 	beq	r2,r3,8006130 <_fflush_r+0x20c>
 8006128:	00c00584 	movi	r3,22
 800612c:	10ffd61e 	bne	r2,r3,8006088 <__alt_data_end+0xfc006088>
 8006130:	9c400015 	stw	r17,0(r19)
 8006134:	0005883a 	mov	r2,zero
 8006138:	003fb706 	br	8006018 <__alt_data_end+0xfc006018>
 800613c:	80c0030b 	ldhu	r3,12(r16)
 8006140:	18c01014 	ori	r3,r3,64
 8006144:	80c0030d 	sth	r3,12(r16)
 8006148:	003fb306 	br	8006018 <__alt_data_end+0xfc006018>

0800614c <fflush>:
 800614c:	20000526 	beq	r4,zero,8006164 <fflush+0x18>
 8006150:	00820074 	movhi	r2,2049
 8006154:	108e2304 	addi	r2,r2,14476
 8006158:	200b883a 	mov	r5,r4
 800615c:	11000017 	ldw	r4,0(r2)
 8006160:	8005f241 	jmpi	8005f24 <_fflush_r>
 8006164:	00820074 	movhi	r2,2049
 8006168:	108e2204 	addi	r2,r2,14472
 800616c:	11000017 	ldw	r4,0(r2)
 8006170:	01420034 	movhi	r5,2048
 8006174:	2957c904 	addi	r5,r5,24356
 8006178:	8006ea01 	jmpi	8006ea0 <_fwalk_reent>

0800617c <__fp_lock>:
 800617c:	0005883a 	mov	r2,zero
 8006180:	f800283a 	ret

08006184 <__fp_unlock>:
 8006184:	0005883a 	mov	r2,zero
 8006188:	f800283a 	ret

0800618c <_cleanup_r>:
 800618c:	01420074 	movhi	r5,2049
 8006190:	296bab04 	addi	r5,r5,-20820
 8006194:	8006de81 	jmpi	8006de8 <_fwalk>

08006198 <__sinit.part.1>:
 8006198:	defff604 	addi	sp,sp,-40
 800619c:	00c20034 	movhi	r3,2048
 80061a0:	dfc00915 	stw	ra,36(sp)
 80061a4:	df000815 	stw	fp,32(sp)
 80061a8:	ddc00715 	stw	r23,28(sp)
 80061ac:	dd800615 	stw	r22,24(sp)
 80061b0:	dd400515 	stw	r21,20(sp)
 80061b4:	dd000415 	stw	r20,16(sp)
 80061b8:	dcc00315 	stw	r19,12(sp)
 80061bc:	dc800215 	stw	r18,8(sp)
 80061c0:	dc400115 	stw	r17,4(sp)
 80061c4:	dc000015 	stw	r16,0(sp)
 80061c8:	18d86304 	addi	r3,r3,24972
 80061cc:	24000117 	ldw	r16,4(r4)
 80061d0:	20c00f15 	stw	r3,60(r4)
 80061d4:	07000044 	movi	fp,1
 80061d8:	00c000c4 	movi	r3,3
 80061dc:	2080bb04 	addi	r2,r4,748
 80061e0:	20c0b915 	stw	r3,740(r4)
 80061e4:	27000e15 	stw	fp,56(r4)
 80061e8:	2080ba15 	stw	r2,744(r4)
 80061ec:	2000b815 	stw	zero,736(r4)
 80061f0:	05c00204 	movi	r23,8
 80061f4:	00800104 	movi	r2,4
 80061f8:	2025883a 	mov	r18,r4
 80061fc:	b80d883a 	mov	r6,r23
 8006200:	81001704 	addi	r4,r16,92
 8006204:	000b883a 	mov	r5,zero
 8006208:	80000015 	stw	zero,0(r16)
 800620c:	80000115 	stw	zero,4(r16)
 8006210:	80000215 	stw	zero,8(r16)
 8006214:	8080030d 	sth	r2,12(r16)
 8006218:	80001915 	stw	zero,100(r16)
 800621c:	8000038d 	sth	zero,14(r16)
 8006220:	80000415 	stw	zero,16(r16)
 8006224:	80000515 	stw	zero,20(r16)
 8006228:	80000615 	stw	zero,24(r16)
 800622c:	8007d140 	call	8007d14 <memset>
 8006230:	05820074 	movhi	r22,2049
 8006234:	94400217 	ldw	r17,8(r18)
 8006238:	05420074 	movhi	r21,2049
 800623c:	05020074 	movhi	r20,2049
 8006240:	04c20074 	movhi	r19,2049
 8006244:	b5a53a04 	addi	r22,r22,-27416
 8006248:	ad655104 	addi	r21,r21,-27324
 800624c:	a5257004 	addi	r20,r20,-27200
 8006250:	9ce58704 	addi	r19,r19,-27108
 8006254:	85800815 	stw	r22,32(r16)
 8006258:	85400915 	stw	r21,36(r16)
 800625c:	85000a15 	stw	r20,40(r16)
 8006260:	84c00b15 	stw	r19,44(r16)
 8006264:	84000715 	stw	r16,28(r16)
 8006268:	00800284 	movi	r2,10
 800626c:	89001704 	addi	r4,r17,92
 8006270:	b80d883a 	mov	r6,r23
 8006274:	000b883a 	mov	r5,zero
 8006278:	88000015 	stw	zero,0(r17)
 800627c:	88000115 	stw	zero,4(r17)
 8006280:	88000215 	stw	zero,8(r17)
 8006284:	8880030d 	sth	r2,12(r17)
 8006288:	88001915 	stw	zero,100(r17)
 800628c:	8f00038d 	sth	fp,14(r17)
 8006290:	88000415 	stw	zero,16(r17)
 8006294:	88000515 	stw	zero,20(r17)
 8006298:	88000615 	stw	zero,24(r17)
 800629c:	8007d140 	call	8007d14 <memset>
 80062a0:	94000317 	ldw	r16,12(r18)
 80062a4:	00800484 	movi	r2,18
 80062a8:	8c400715 	stw	r17,28(r17)
 80062ac:	8d800815 	stw	r22,32(r17)
 80062b0:	8d400915 	stw	r21,36(r17)
 80062b4:	8d000a15 	stw	r20,40(r17)
 80062b8:	8cc00b15 	stw	r19,44(r17)
 80062bc:	8080030d 	sth	r2,12(r16)
 80062c0:	00800084 	movi	r2,2
 80062c4:	80000015 	stw	zero,0(r16)
 80062c8:	80000115 	stw	zero,4(r16)
 80062cc:	80000215 	stw	zero,8(r16)
 80062d0:	80001915 	stw	zero,100(r16)
 80062d4:	8080038d 	sth	r2,14(r16)
 80062d8:	80000415 	stw	zero,16(r16)
 80062dc:	80000515 	stw	zero,20(r16)
 80062e0:	80000615 	stw	zero,24(r16)
 80062e4:	81001704 	addi	r4,r16,92
 80062e8:	000b883a 	mov	r5,zero
 80062ec:	b80d883a 	mov	r6,r23
 80062f0:	8007d140 	call	8007d14 <memset>
 80062f4:	84000715 	stw	r16,28(r16)
 80062f8:	85800815 	stw	r22,32(r16)
 80062fc:	85400915 	stw	r21,36(r16)
 8006300:	85000a15 	stw	r20,40(r16)
 8006304:	84c00b15 	stw	r19,44(r16)
 8006308:	dfc00917 	ldw	ra,36(sp)
 800630c:	df000817 	ldw	fp,32(sp)
 8006310:	ddc00717 	ldw	r23,28(sp)
 8006314:	dd800617 	ldw	r22,24(sp)
 8006318:	dd400517 	ldw	r21,20(sp)
 800631c:	dd000417 	ldw	r20,16(sp)
 8006320:	dcc00317 	ldw	r19,12(sp)
 8006324:	dc800217 	ldw	r18,8(sp)
 8006328:	dc400117 	ldw	r17,4(sp)
 800632c:	dc000017 	ldw	r16,0(sp)
 8006330:	dec00a04 	addi	sp,sp,40
 8006334:	f800283a 	ret

08006338 <__sfmoreglue>:
 8006338:	defffc04 	addi	sp,sp,-16
 800633c:	dc800215 	stw	r18,8(sp)
 8006340:	2825883a 	mov	r18,r5
 8006344:	dc000015 	stw	r16,0(sp)
 8006348:	01401a04 	movi	r5,104
 800634c:	2021883a 	mov	r16,r4
 8006350:	9009883a 	mov	r4,r18
 8006354:	dfc00315 	stw	ra,12(sp)
 8006358:	dc400115 	stw	r17,4(sp)
 800635c:	800c2f80 	call	800c2f8 <__mulsi3>
 8006360:	8009883a 	mov	r4,r16
 8006364:	11400304 	addi	r5,r2,12
 8006368:	1023883a 	mov	r17,r2
 800636c:	80071f00 	call	80071f0 <_malloc_r>
 8006370:	1021883a 	mov	r16,r2
 8006374:	10000726 	beq	r2,zero,8006394 <__sfmoreglue+0x5c>
 8006378:	11000304 	addi	r4,r2,12
 800637c:	10000015 	stw	zero,0(r2)
 8006380:	14800115 	stw	r18,4(r2)
 8006384:	11000215 	stw	r4,8(r2)
 8006388:	000b883a 	mov	r5,zero
 800638c:	880d883a 	mov	r6,r17
 8006390:	8007d140 	call	8007d14 <memset>
 8006394:	8005883a 	mov	r2,r16
 8006398:	dfc00317 	ldw	ra,12(sp)
 800639c:	dc800217 	ldw	r18,8(sp)
 80063a0:	dc400117 	ldw	r17,4(sp)
 80063a4:	dc000017 	ldw	r16,0(sp)
 80063a8:	dec00404 	addi	sp,sp,16
 80063ac:	f800283a 	ret

080063b0 <__sfp>:
 80063b0:	00820074 	movhi	r2,2049
 80063b4:	defffb04 	addi	sp,sp,-20
 80063b8:	108e2204 	addi	r2,r2,14472
 80063bc:	dc800215 	stw	r18,8(sp)
 80063c0:	14800017 	ldw	r18,0(r2)
 80063c4:	dcc00315 	stw	r19,12(sp)
 80063c8:	dfc00415 	stw	ra,16(sp)
 80063cc:	90800e17 	ldw	r2,56(r18)
 80063d0:	dc400115 	stw	r17,4(sp)
 80063d4:	dc000015 	stw	r16,0(sp)
 80063d8:	2027883a 	mov	r19,r4
 80063dc:	1000021e 	bne	r2,zero,80063e8 <__sfp+0x38>
 80063e0:	9009883a 	mov	r4,r18
 80063e4:	80061980 	call	8006198 <__sinit.part.1>
 80063e8:	9480b804 	addi	r18,r18,736
 80063ec:	047fffc4 	movi	r17,-1
 80063f0:	91400117 	ldw	r5,4(r18)
 80063f4:	94000217 	ldw	r16,8(r18)
 80063f8:	297fffc4 	addi	r5,r5,-1
 80063fc:	28000a16 	blt	r5,zero,8006428 <__sfp+0x78>
 8006400:	8080030f 	ldh	r2,12(r16)
 8006404:	10000c26 	beq	r2,zero,8006438 <__sfp+0x88>
 8006408:	80c01d04 	addi	r3,r16,116
 800640c:	00000206 	br	8006418 <__sfp+0x68>
 8006410:	18bfe60f 	ldh	r2,-104(r3)
 8006414:	10000826 	beq	r2,zero,8006438 <__sfp+0x88>
 8006418:	297fffc4 	addi	r5,r5,-1
 800641c:	1c3ffd04 	addi	r16,r3,-12
 8006420:	18c01a04 	addi	r3,r3,104
 8006424:	2c7ffa1e 	bne	r5,r17,8006410 <__alt_data_end+0xfc006410>
 8006428:	90800017 	ldw	r2,0(r18)
 800642c:	10001d26 	beq	r2,zero,80064a4 <__sfp+0xf4>
 8006430:	1025883a 	mov	r18,r2
 8006434:	003fee06 	br	80063f0 <__alt_data_end+0xfc0063f0>
 8006438:	00bfffc4 	movi	r2,-1
 800643c:	8080038d 	sth	r2,14(r16)
 8006440:	00800044 	movi	r2,1
 8006444:	8080030d 	sth	r2,12(r16)
 8006448:	80001915 	stw	zero,100(r16)
 800644c:	80000015 	stw	zero,0(r16)
 8006450:	80000215 	stw	zero,8(r16)
 8006454:	80000115 	stw	zero,4(r16)
 8006458:	80000415 	stw	zero,16(r16)
 800645c:	80000515 	stw	zero,20(r16)
 8006460:	80000615 	stw	zero,24(r16)
 8006464:	81001704 	addi	r4,r16,92
 8006468:	000b883a 	mov	r5,zero
 800646c:	01800204 	movi	r6,8
 8006470:	8007d140 	call	8007d14 <memset>
 8006474:	8005883a 	mov	r2,r16
 8006478:	80000c15 	stw	zero,48(r16)
 800647c:	80000d15 	stw	zero,52(r16)
 8006480:	80001115 	stw	zero,68(r16)
 8006484:	80001215 	stw	zero,72(r16)
 8006488:	dfc00417 	ldw	ra,16(sp)
 800648c:	dcc00317 	ldw	r19,12(sp)
 8006490:	dc800217 	ldw	r18,8(sp)
 8006494:	dc400117 	ldw	r17,4(sp)
 8006498:	dc000017 	ldw	r16,0(sp)
 800649c:	dec00504 	addi	sp,sp,20
 80064a0:	f800283a 	ret
 80064a4:	9809883a 	mov	r4,r19
 80064a8:	01400104 	movi	r5,4
 80064ac:	80063380 	call	8006338 <__sfmoreglue>
 80064b0:	90800015 	stw	r2,0(r18)
 80064b4:	103fde1e 	bne	r2,zero,8006430 <__alt_data_end+0xfc006430>
 80064b8:	00800304 	movi	r2,12
 80064bc:	98800015 	stw	r2,0(r19)
 80064c0:	0005883a 	mov	r2,zero
 80064c4:	003ff006 	br	8006488 <__alt_data_end+0xfc006488>

080064c8 <_cleanup>:
 80064c8:	00820074 	movhi	r2,2049
 80064cc:	108e2204 	addi	r2,r2,14472
 80064d0:	11000017 	ldw	r4,0(r2)
 80064d4:	01420074 	movhi	r5,2049
 80064d8:	296bab04 	addi	r5,r5,-20820
 80064dc:	8006de81 	jmpi	8006de8 <_fwalk>

080064e0 <__sinit>:
 80064e0:	20800e17 	ldw	r2,56(r4)
 80064e4:	10000126 	beq	r2,zero,80064ec <__sinit+0xc>
 80064e8:	f800283a 	ret
 80064ec:	80061981 	jmpi	8006198 <__sinit.part.1>

080064f0 <__sfp_lock_acquire>:
 80064f0:	f800283a 	ret

080064f4 <__sfp_lock_release>:
 80064f4:	f800283a 	ret

080064f8 <__sinit_lock_acquire>:
 80064f8:	f800283a 	ret

080064fc <__sinit_lock_release>:
 80064fc:	f800283a 	ret

08006500 <__fp_lock_all>:
 8006500:	00820074 	movhi	r2,2049
 8006504:	108e2304 	addi	r2,r2,14476
 8006508:	11000017 	ldw	r4,0(r2)
 800650c:	01420034 	movhi	r5,2048
 8006510:	29585f04 	addi	r5,r5,24956
 8006514:	8006de81 	jmpi	8006de8 <_fwalk>

08006518 <__fp_unlock_all>:
 8006518:	00820074 	movhi	r2,2049
 800651c:	108e2304 	addi	r2,r2,14476
 8006520:	11000017 	ldw	r4,0(r2)
 8006524:	01420034 	movhi	r5,2048
 8006528:	29586104 	addi	r5,r5,24964
 800652c:	8006de81 	jmpi	8006de8 <_fwalk>

08006530 <_malloc_trim_r>:
 8006530:	defffb04 	addi	sp,sp,-20
 8006534:	dcc00315 	stw	r19,12(sp)
 8006538:	04c20074 	movhi	r19,2049
 800653c:	dc800215 	stw	r18,8(sp)
 8006540:	dc400115 	stw	r17,4(sp)
 8006544:	dc000015 	stw	r16,0(sp)
 8006548:	dfc00415 	stw	ra,16(sp)
 800654c:	2821883a 	mov	r16,r5
 8006550:	9cc89e04 	addi	r19,r19,8824
 8006554:	2025883a 	mov	r18,r4
 8006558:	800f1000 	call	800f100 <__malloc_lock>
 800655c:	98800217 	ldw	r2,8(r19)
 8006560:	14400117 	ldw	r17,4(r2)
 8006564:	00bfff04 	movi	r2,-4
 8006568:	88a2703a 	and	r17,r17,r2
 800656c:	8c21c83a 	sub	r16,r17,r16
 8006570:	8403fbc4 	addi	r16,r16,4079
 8006574:	8020d33a 	srli	r16,r16,12
 8006578:	0083ffc4 	movi	r2,4095
 800657c:	843fffc4 	addi	r16,r16,-1
 8006580:	8020933a 	slli	r16,r16,12
 8006584:	1400060e 	bge	r2,r16,80065a0 <_malloc_trim_r+0x70>
 8006588:	9009883a 	mov	r4,r18
 800658c:	000b883a 	mov	r5,zero
 8006590:	80094940 	call	8009494 <_sbrk_r>
 8006594:	98c00217 	ldw	r3,8(r19)
 8006598:	1c47883a 	add	r3,r3,r17
 800659c:	10c00a26 	beq	r2,r3,80065c8 <_malloc_trim_r+0x98>
 80065a0:	9009883a 	mov	r4,r18
 80065a4:	800f1200 	call	800f120 <__malloc_unlock>
 80065a8:	0005883a 	mov	r2,zero
 80065ac:	dfc00417 	ldw	ra,16(sp)
 80065b0:	dcc00317 	ldw	r19,12(sp)
 80065b4:	dc800217 	ldw	r18,8(sp)
 80065b8:	dc400117 	ldw	r17,4(sp)
 80065bc:	dc000017 	ldw	r16,0(sp)
 80065c0:	dec00504 	addi	sp,sp,20
 80065c4:	f800283a 	ret
 80065c8:	9009883a 	mov	r4,r18
 80065cc:	040bc83a 	sub	r5,zero,r16
 80065d0:	80094940 	call	8009494 <_sbrk_r>
 80065d4:	00ffffc4 	movi	r3,-1
 80065d8:	10c00d26 	beq	r2,r3,8006610 <_malloc_trim_r+0xe0>
 80065dc:	00c20074 	movhi	r3,2049
 80065e0:	18d4fb04 	addi	r3,r3,21484
 80065e4:	18800017 	ldw	r2,0(r3)
 80065e8:	99000217 	ldw	r4,8(r19)
 80065ec:	8c23c83a 	sub	r17,r17,r16
 80065f0:	8c400054 	ori	r17,r17,1
 80065f4:	1421c83a 	sub	r16,r2,r16
 80065f8:	24400115 	stw	r17,4(r4)
 80065fc:	9009883a 	mov	r4,r18
 8006600:	1c000015 	stw	r16,0(r3)
 8006604:	800f1200 	call	800f120 <__malloc_unlock>
 8006608:	00800044 	movi	r2,1
 800660c:	003fe706 	br	80065ac <__alt_data_end+0xfc0065ac>
 8006610:	9009883a 	mov	r4,r18
 8006614:	000b883a 	mov	r5,zero
 8006618:	80094940 	call	8009494 <_sbrk_r>
 800661c:	99000217 	ldw	r4,8(r19)
 8006620:	014003c4 	movi	r5,15
 8006624:	1107c83a 	sub	r3,r2,r4
 8006628:	28ffdd0e 	bge	r5,r3,80065a0 <__alt_data_end+0xfc0065a0>
 800662c:	01420074 	movhi	r5,2049
 8006630:	294e2504 	addi	r5,r5,14484
 8006634:	29400017 	ldw	r5,0(r5)
 8006638:	18c00054 	ori	r3,r3,1
 800663c:	20c00115 	stw	r3,4(r4)
 8006640:	00c20074 	movhi	r3,2049
 8006644:	1145c83a 	sub	r2,r2,r5
 8006648:	18d4fb04 	addi	r3,r3,21484
 800664c:	18800015 	stw	r2,0(r3)
 8006650:	003fd306 	br	80065a0 <__alt_data_end+0xfc0065a0>

08006654 <_free_r>:
 8006654:	28004c26 	beq	r5,zero,8006788 <_free_r+0x134>
 8006658:	defffd04 	addi	sp,sp,-12
 800665c:	dc400115 	stw	r17,4(sp)
 8006660:	dc000015 	stw	r16,0(sp)
 8006664:	2023883a 	mov	r17,r4
 8006668:	2821883a 	mov	r16,r5
 800666c:	dfc00215 	stw	ra,8(sp)
 8006670:	800f1000 	call	800f100 <__malloc_lock>
 8006674:	813fff17 	ldw	r4,-4(r16)
 8006678:	00bfff84 	movi	r2,-2
 800667c:	02420074 	movhi	r9,2049
 8006680:	81bffe04 	addi	r6,r16,-8
 8006684:	2084703a 	and	r2,r4,r2
 8006688:	4a489e04 	addi	r9,r9,8824
 800668c:	308b883a 	add	r5,r6,r2
 8006690:	2a000117 	ldw	r8,4(r5)
 8006694:	49c00217 	ldw	r7,8(r9)
 8006698:	00ffff04 	movi	r3,-4
 800669c:	40c6703a 	and	r3,r8,r3
 80066a0:	39405326 	beq	r7,r5,80067f0 <_free_r+0x19c>
 80066a4:	28c00115 	stw	r3,4(r5)
 80066a8:	2100004c 	andi	r4,r4,1
 80066ac:	2000091e 	bne	r4,zero,80066d4 <_free_r+0x80>
 80066b0:	81fffe17 	ldw	r7,-8(r16)
 80066b4:	4a000204 	addi	r8,r9,8
 80066b8:	31cdc83a 	sub	r6,r6,r7
 80066bc:	31000217 	ldw	r4,8(r6)
 80066c0:	11c5883a 	add	r2,r2,r7
 80066c4:	22006126 	beq	r4,r8,800684c <_free_r+0x1f8>
 80066c8:	31c00317 	ldw	r7,12(r6)
 80066cc:	21c00315 	stw	r7,12(r4)
 80066d0:	39000215 	stw	r4,8(r7)
 80066d4:	28c9883a 	add	r4,r5,r3
 80066d8:	21c00117 	ldw	r7,4(r4)
 80066dc:	39c0004c 	andi	r7,r7,1
 80066e0:	38000d1e 	bne	r7,zero,8006718 <_free_r+0xc4>
 80066e4:	29000217 	ldw	r4,8(r5)
 80066e8:	10c5883a 	add	r2,r2,r3
 80066ec:	00c20074 	movhi	r3,2049
 80066f0:	18c8a004 	addi	r3,r3,8832
 80066f4:	20c07526 	beq	r4,r3,80068cc <_free_r+0x278>
 80066f8:	29c00317 	ldw	r7,12(r5)
 80066fc:	11400054 	ori	r5,r2,1
 8006700:	3087883a 	add	r3,r6,r2
 8006704:	21c00315 	stw	r7,12(r4)
 8006708:	39000215 	stw	r4,8(r7)
 800670c:	31400115 	stw	r5,4(r6)
 8006710:	18800015 	stw	r2,0(r3)
 8006714:	00000406 	br	8006728 <_free_r+0xd4>
 8006718:	10c00054 	ori	r3,r2,1
 800671c:	30c00115 	stw	r3,4(r6)
 8006720:	3087883a 	add	r3,r6,r2
 8006724:	18800015 	stw	r2,0(r3)
 8006728:	00c07fc4 	movi	r3,511
 800672c:	18801736 	bltu	r3,r2,800678c <_free_r+0x138>
 8006730:	1004d0fa 	srli	r2,r2,3
 8006734:	01400044 	movi	r5,1
 8006738:	49000117 	ldw	r4,4(r9)
 800673c:	1087883a 	add	r3,r2,r2
 8006740:	18c7883a 	add	r3,r3,r3
 8006744:	1005d0ba 	srai	r2,r2,2
 8006748:	18c7883a 	add	r3,r3,r3
 800674c:	1a47883a 	add	r3,r3,r9
 8006750:	19c00217 	ldw	r7,8(r3)
 8006754:	2884983a 	sll	r2,r5,r2
 8006758:	30c00315 	stw	r3,12(r6)
 800675c:	31c00215 	stw	r7,8(r6)
 8006760:	1104b03a 	or	r2,r2,r4
 8006764:	19800215 	stw	r6,8(r3)
 8006768:	48800115 	stw	r2,4(r9)
 800676c:	39800315 	stw	r6,12(r7)
 8006770:	8809883a 	mov	r4,r17
 8006774:	dfc00217 	ldw	ra,8(sp)
 8006778:	dc400117 	ldw	r17,4(sp)
 800677c:	dc000017 	ldw	r16,0(sp)
 8006780:	dec00304 	addi	sp,sp,12
 8006784:	800f1201 	jmpi	800f120 <__malloc_unlock>
 8006788:	f800283a 	ret
 800678c:	1006d27a 	srli	r3,r2,9
 8006790:	01000104 	movi	r4,4
 8006794:	20c04036 	bltu	r4,r3,8006898 <_free_r+0x244>
 8006798:	1006d1ba 	srli	r3,r2,6
 800679c:	19400e04 	addi	r5,r3,56
 80067a0:	2947883a 	add	r3,r5,r5
 80067a4:	18c7883a 	add	r3,r3,r3
 80067a8:	18c7883a 	add	r3,r3,r3
 80067ac:	1a49883a 	add	r4,r3,r9
 80067b0:	20c00217 	ldw	r3,8(r4)
 80067b4:	01c20074 	movhi	r7,2049
 80067b8:	39c89e04 	addi	r7,r7,8824
 80067bc:	19003b26 	beq	r3,r4,80068ac <_free_r+0x258>
 80067c0:	01ffff04 	movi	r7,-4
 80067c4:	19400117 	ldw	r5,4(r3)
 80067c8:	29ca703a 	and	r5,r5,r7
 80067cc:	1140022e 	bgeu	r2,r5,80067d8 <_free_r+0x184>
 80067d0:	18c00217 	ldw	r3,8(r3)
 80067d4:	20fffb1e 	bne	r4,r3,80067c4 <__alt_data_end+0xfc0067c4>
 80067d8:	18800317 	ldw	r2,12(r3)
 80067dc:	30800315 	stw	r2,12(r6)
 80067e0:	30c00215 	stw	r3,8(r6)
 80067e4:	11800215 	stw	r6,8(r2)
 80067e8:	19800315 	stw	r6,12(r3)
 80067ec:	003fe006 	br	8006770 <__alt_data_end+0xfc006770>
 80067f0:	2100004c 	andi	r4,r4,1
 80067f4:	1885883a 	add	r2,r3,r2
 80067f8:	2000071e 	bne	r4,zero,8006818 <_free_r+0x1c4>
 80067fc:	817ffe17 	ldw	r5,-8(r16)
 8006800:	314dc83a 	sub	r6,r6,r5
 8006804:	30c00317 	ldw	r3,12(r6)
 8006808:	31000217 	ldw	r4,8(r6)
 800680c:	1145883a 	add	r2,r2,r5
 8006810:	20c00315 	stw	r3,12(r4)
 8006814:	19000215 	stw	r4,8(r3)
 8006818:	10c00054 	ori	r3,r2,1
 800681c:	30c00115 	stw	r3,4(r6)
 8006820:	00c20074 	movhi	r3,2049
 8006824:	18ce2604 	addi	r3,r3,14488
 8006828:	18c00017 	ldw	r3,0(r3)
 800682c:	49800215 	stw	r6,8(r9)
 8006830:	10ffcf36 	bltu	r2,r3,8006770 <__alt_data_end+0xfc006770>
 8006834:	00820074 	movhi	r2,2049
 8006838:	1094f304 	addi	r2,r2,21452
 800683c:	11400017 	ldw	r5,0(r2)
 8006840:	8809883a 	mov	r4,r17
 8006844:	80065300 	call	8006530 <_malloc_trim_r>
 8006848:	003fc906 	br	8006770 <__alt_data_end+0xfc006770>
 800684c:	28c9883a 	add	r4,r5,r3
 8006850:	21000117 	ldw	r4,4(r4)
 8006854:	2100004c 	andi	r4,r4,1
 8006858:	20000a1e 	bne	r4,zero,8006884 <_free_r+0x230>
 800685c:	29000317 	ldw	r4,12(r5)
 8006860:	29400217 	ldw	r5,8(r5)
 8006864:	10c5883a 	add	r2,r2,r3
 8006868:	10c00054 	ori	r3,r2,1
 800686c:	29000315 	stw	r4,12(r5)
 8006870:	21400215 	stw	r5,8(r4)
 8006874:	30c00115 	stw	r3,4(r6)
 8006878:	308d883a 	add	r6,r6,r2
 800687c:	30800015 	stw	r2,0(r6)
 8006880:	003fbb06 	br	8006770 <__alt_data_end+0xfc006770>
 8006884:	10c00054 	ori	r3,r2,1
 8006888:	30c00115 	stw	r3,4(r6)
 800688c:	308d883a 	add	r6,r6,r2
 8006890:	30800015 	stw	r2,0(r6)
 8006894:	003fb606 	br	8006770 <__alt_data_end+0xfc006770>
 8006898:	01000504 	movi	r4,20
 800689c:	20c01436 	bltu	r4,r3,80068f0 <_free_r+0x29c>
 80068a0:	194016c4 	addi	r5,r3,91
 80068a4:	2947883a 	add	r3,r5,r5
 80068a8:	003fbe06 	br	80067a4 <__alt_data_end+0xfc0067a4>
 80068ac:	280bd0ba 	srai	r5,r5,2
 80068b0:	00800044 	movi	r2,1
 80068b4:	39000117 	ldw	r4,4(r7)
 80068b8:	114a983a 	sll	r5,r2,r5
 80068bc:	1805883a 	mov	r2,r3
 80068c0:	2908b03a 	or	r4,r5,r4
 80068c4:	39000115 	stw	r4,4(r7)
 80068c8:	003fc406 	br	80067dc <__alt_data_end+0xfc0067dc>
 80068cc:	49800515 	stw	r6,20(r9)
 80068d0:	49800415 	stw	r6,16(r9)
 80068d4:	10c00054 	ori	r3,r2,1
 80068d8:	31000315 	stw	r4,12(r6)
 80068dc:	31000215 	stw	r4,8(r6)
 80068e0:	30c00115 	stw	r3,4(r6)
 80068e4:	308d883a 	add	r6,r6,r2
 80068e8:	30800015 	stw	r2,0(r6)
 80068ec:	003fa006 	br	8006770 <__alt_data_end+0xfc006770>
 80068f0:	01001504 	movi	r4,84
 80068f4:	20c00436 	bltu	r4,r3,8006908 <_free_r+0x2b4>
 80068f8:	1006d33a 	srli	r3,r2,12
 80068fc:	19401b84 	addi	r5,r3,110
 8006900:	2947883a 	add	r3,r5,r5
 8006904:	003fa706 	br	80067a4 <__alt_data_end+0xfc0067a4>
 8006908:	01005504 	movi	r4,340
 800690c:	20c00436 	bltu	r4,r3,8006920 <_free_r+0x2cc>
 8006910:	1006d3fa 	srli	r3,r2,15
 8006914:	19401dc4 	addi	r5,r3,119
 8006918:	2947883a 	add	r3,r5,r5
 800691c:	003fa106 	br	80067a4 <__alt_data_end+0xfc0067a4>
 8006920:	01015504 	movi	r4,1364
 8006924:	20c00436 	bltu	r4,r3,8006938 <_free_r+0x2e4>
 8006928:	1006d4ba 	srli	r3,r2,18
 800692c:	19401f04 	addi	r5,r3,124
 8006930:	2947883a 	add	r3,r5,r5
 8006934:	003f9b06 	br	80067a4 <__alt_data_end+0xfc0067a4>
 8006938:	00c03f04 	movi	r3,252
 800693c:	01401f84 	movi	r5,126
 8006940:	003f9806 	br	80067a4 <__alt_data_end+0xfc0067a4>

08006944 <__sfvwrite_r>:
 8006944:	30800217 	ldw	r2,8(r6)
 8006948:	10004526 	beq	r2,zero,8006a60 <__sfvwrite_r+0x11c>
 800694c:	28c0030b 	ldhu	r3,12(r5)
 8006950:	defff404 	addi	sp,sp,-48
 8006954:	dd400715 	stw	r21,28(sp)
 8006958:	dcc00515 	stw	r19,20(sp)
 800695c:	dc000215 	stw	r16,8(sp)
 8006960:	dfc00b15 	stw	ra,44(sp)
 8006964:	df000a15 	stw	fp,40(sp)
 8006968:	ddc00915 	stw	r23,36(sp)
 800696c:	dd800815 	stw	r22,32(sp)
 8006970:	dd000615 	stw	r20,24(sp)
 8006974:	dc800415 	stw	r18,16(sp)
 8006978:	dc400315 	stw	r17,12(sp)
 800697c:	1880020c 	andi	r2,r3,8
 8006980:	2821883a 	mov	r16,r5
 8006984:	202b883a 	mov	r21,r4
 8006988:	3027883a 	mov	r19,r6
 800698c:	10002526 	beq	r2,zero,8006a24 <__sfvwrite_r+0xe0>
 8006990:	28800417 	ldw	r2,16(r5)
 8006994:	10002326 	beq	r2,zero,8006a24 <__sfvwrite_r+0xe0>
 8006998:	1880008c 	andi	r2,r3,2
 800699c:	9c400017 	ldw	r17,0(r19)
 80069a0:	10003126 	beq	r2,zero,8006a68 <__sfvwrite_r+0x124>
 80069a4:	0029883a 	mov	r20,zero
 80069a8:	0025883a 	mov	r18,zero
 80069ac:	05810004 	movi	r22,1024
 80069b0:	a00d883a 	mov	r6,r20
 80069b4:	a809883a 	mov	r4,r21
 80069b8:	90002526 	beq	r18,zero,8006a50 <__sfvwrite_r+0x10c>
 80069bc:	900f883a 	mov	r7,r18
 80069c0:	81400717 	ldw	r5,28(r16)
 80069c4:	b480012e 	bgeu	r22,r18,80069cc <__sfvwrite_r+0x88>
 80069c8:	01c10004 	movi	r7,1024
 80069cc:	80800917 	ldw	r2,36(r16)
 80069d0:	103ee83a 	callr	r2
 80069d4:	0080510e 	bge	zero,r2,8006b1c <__sfvwrite_r+0x1d8>
 80069d8:	98c00217 	ldw	r3,8(r19)
 80069dc:	a0a9883a 	add	r20,r20,r2
 80069e0:	90a5c83a 	sub	r18,r18,r2
 80069e4:	1885c83a 	sub	r2,r3,r2
 80069e8:	98800215 	stw	r2,8(r19)
 80069ec:	103ff01e 	bne	r2,zero,80069b0 <__alt_data_end+0xfc0069b0>
 80069f0:	0005883a 	mov	r2,zero
 80069f4:	dfc00b17 	ldw	ra,44(sp)
 80069f8:	df000a17 	ldw	fp,40(sp)
 80069fc:	ddc00917 	ldw	r23,36(sp)
 8006a00:	dd800817 	ldw	r22,32(sp)
 8006a04:	dd400717 	ldw	r21,28(sp)
 8006a08:	dd000617 	ldw	r20,24(sp)
 8006a0c:	dcc00517 	ldw	r19,20(sp)
 8006a10:	dc800417 	ldw	r18,16(sp)
 8006a14:	dc400317 	ldw	r17,12(sp)
 8006a18:	dc000217 	ldw	r16,8(sp)
 8006a1c:	dec00c04 	addi	sp,sp,48
 8006a20:	f800283a 	ret
 8006a24:	a809883a 	mov	r4,r21
 8006a28:	800b883a 	mov	r5,r16
 8006a2c:	80044a40 	call	80044a4 <__swsetup_r>
 8006a30:	80c0030b 	ldhu	r3,12(r16)
 8006a34:	103fd826 	beq	r2,zero,8006998 <__alt_data_end+0xfc006998>
 8006a38:	18c01014 	ori	r3,r3,64
 8006a3c:	80c0030d 	sth	r3,12(r16)
 8006a40:	00c00244 	movi	r3,9
 8006a44:	00bfffc4 	movi	r2,-1
 8006a48:	a8c00015 	stw	r3,0(r21)
 8006a4c:	003fe906 	br	80069f4 <__alt_data_end+0xfc0069f4>
 8006a50:	8d000017 	ldw	r20,0(r17)
 8006a54:	8c800117 	ldw	r18,4(r17)
 8006a58:	8c400204 	addi	r17,r17,8
 8006a5c:	003fd406 	br	80069b0 <__alt_data_end+0xfc0069b0>
 8006a60:	0005883a 	mov	r2,zero
 8006a64:	f800283a 	ret
 8006a68:	1880004c 	andi	r2,r3,1
 8006a6c:	1000301e 	bne	r2,zero,8006b30 <__sfvwrite_r+0x1ec>
 8006a70:	002f883a 	mov	r23,zero
 8006a74:	0025883a 	mov	r18,zero
 8006a78:	90001c26 	beq	r18,zero,8006aec <__sfvwrite_r+0x1a8>
 8006a7c:	1880800c 	andi	r2,r3,512
 8006a80:	85000217 	ldw	r20,8(r16)
 8006a84:	10006c26 	beq	r2,zero,8006c38 <__sfvwrite_r+0x2f4>
 8006a88:	a02d883a 	mov	r22,r20
 8006a8c:	95008536 	bltu	r18,r20,8006ca4 <__sfvwrite_r+0x360>
 8006a90:	1881200c 	andi	r2,r3,1152
 8006a94:	10009d1e 	bne	r2,zero,8006d0c <__sfvwrite_r+0x3c8>
 8006a98:	81000017 	ldw	r4,0(r16)
 8006a9c:	a039883a 	mov	fp,r20
 8006aa0:	9029883a 	mov	r20,r18
 8006aa4:	b80b883a 	mov	r5,r23
 8006aa8:	b00d883a 	mov	r6,r22
 8006aac:	8007bb80 	call	8007bb8 <memmove>
 8006ab0:	80c00217 	ldw	r3,8(r16)
 8006ab4:	81000017 	ldw	r4,0(r16)
 8006ab8:	9005883a 	mov	r2,r18
 8006abc:	1f39c83a 	sub	fp,r3,fp
 8006ac0:	258f883a 	add	r7,r4,r22
 8006ac4:	87000215 	stw	fp,8(r16)
 8006ac8:	81c00015 	stw	r7,0(r16)
 8006acc:	98c00217 	ldw	r3,8(r19)
 8006ad0:	b8af883a 	add	r23,r23,r2
 8006ad4:	90a5c83a 	sub	r18,r18,r2
 8006ad8:	1d05c83a 	sub	r2,r3,r20
 8006adc:	98800215 	stw	r2,8(r19)
 8006ae0:	103fc326 	beq	r2,zero,80069f0 <__alt_data_end+0xfc0069f0>
 8006ae4:	80c0030b 	ldhu	r3,12(r16)
 8006ae8:	903fe41e 	bne	r18,zero,8006a7c <__alt_data_end+0xfc006a7c>
 8006aec:	8dc00017 	ldw	r23,0(r17)
 8006af0:	8c800117 	ldw	r18,4(r17)
 8006af4:	8c400204 	addi	r17,r17,8
 8006af8:	003fdf06 	br	8006a78 <__alt_data_end+0xfc006a78>
 8006afc:	8008e800 	call	8008e80 <_realloc_r>
 8006b00:	102d883a 	mov	r22,r2
 8006b04:	1000a01e 	bne	r2,zero,8006d88 <__sfvwrite_r+0x444>
 8006b08:	81400417 	ldw	r5,16(r16)
 8006b0c:	a809883a 	mov	r4,r21
 8006b10:	80066540 	call	8006654 <_free_r>
 8006b14:	00800304 	movi	r2,12
 8006b18:	a8800015 	stw	r2,0(r21)
 8006b1c:	80c0030b 	ldhu	r3,12(r16)
 8006b20:	00bfffc4 	movi	r2,-1
 8006b24:	18c01014 	ori	r3,r3,64
 8006b28:	80c0030d 	sth	r3,12(r16)
 8006b2c:	003fb106 	br	80069f4 <__alt_data_end+0xfc0069f4>
 8006b30:	0029883a 	mov	r20,zero
 8006b34:	0011883a 	mov	r8,zero
 8006b38:	0039883a 	mov	fp,zero
 8006b3c:	0025883a 	mov	r18,zero
 8006b40:	90001f26 	beq	r18,zero,8006bc0 <__sfvwrite_r+0x27c>
 8006b44:	40006826 	beq	r8,zero,8006ce8 <__sfvwrite_r+0x3a4>
 8006b48:	a02f883a 	mov	r23,r20
 8006b4c:	9500012e 	bgeu	r18,r20,8006b54 <__sfvwrite_r+0x210>
 8006b50:	902f883a 	mov	r23,r18
 8006b54:	81000017 	ldw	r4,0(r16)
 8006b58:	80800417 	ldw	r2,16(r16)
 8006b5c:	b82d883a 	mov	r22,r23
 8006b60:	81800217 	ldw	r6,8(r16)
 8006b64:	81c00517 	ldw	r7,20(r16)
 8006b68:	1100022e 	bgeu	r2,r4,8006b74 <__sfvwrite_r+0x230>
 8006b6c:	31c7883a 	add	r3,r6,r7
 8006b70:	1dc01816 	blt	r3,r23,8006bd4 <__sfvwrite_r+0x290>
 8006b74:	b9c03f16 	blt	r23,r7,8006c74 <__sfvwrite_r+0x330>
 8006b78:	80800917 	ldw	r2,36(r16)
 8006b7c:	81400717 	ldw	r5,28(r16)
 8006b80:	a809883a 	mov	r4,r21
 8006b84:	da000115 	stw	r8,4(sp)
 8006b88:	e00d883a 	mov	r6,fp
 8006b8c:	103ee83a 	callr	r2
 8006b90:	102d883a 	mov	r22,r2
 8006b94:	da000117 	ldw	r8,4(sp)
 8006b98:	00bfe00e 	bge	zero,r2,8006b1c <__alt_data_end+0xfc006b1c>
 8006b9c:	a5a9c83a 	sub	r20,r20,r22
 8006ba0:	a0001f26 	beq	r20,zero,8006c20 <__sfvwrite_r+0x2dc>
 8006ba4:	98800217 	ldw	r2,8(r19)
 8006ba8:	e5b9883a 	add	fp,fp,r22
 8006bac:	95a5c83a 	sub	r18,r18,r22
 8006bb0:	15adc83a 	sub	r22,r2,r22
 8006bb4:	9d800215 	stw	r22,8(r19)
 8006bb8:	b03f8d26 	beq	r22,zero,80069f0 <__alt_data_end+0xfc0069f0>
 8006bbc:	903fe11e 	bne	r18,zero,8006b44 <__alt_data_end+0xfc006b44>
 8006bc0:	8f000017 	ldw	fp,0(r17)
 8006bc4:	8c800117 	ldw	r18,4(r17)
 8006bc8:	0011883a 	mov	r8,zero
 8006bcc:	8c400204 	addi	r17,r17,8
 8006bd0:	003fdb06 	br	8006b40 <__alt_data_end+0xfc006b40>
 8006bd4:	180d883a 	mov	r6,r3
 8006bd8:	e00b883a 	mov	r5,fp
 8006bdc:	da000115 	stw	r8,4(sp)
 8006be0:	d8c00015 	stw	r3,0(sp)
 8006be4:	8007bb80 	call	8007bb8 <memmove>
 8006be8:	d8c00017 	ldw	r3,0(sp)
 8006bec:	80800017 	ldw	r2,0(r16)
 8006bf0:	a809883a 	mov	r4,r21
 8006bf4:	800b883a 	mov	r5,r16
 8006bf8:	10c5883a 	add	r2,r2,r3
 8006bfc:	80800015 	stw	r2,0(r16)
 8006c00:	d8c00015 	stw	r3,0(sp)
 8006c04:	8005f240 	call	8005f24 <_fflush_r>
 8006c08:	d8c00017 	ldw	r3,0(sp)
 8006c0c:	da000117 	ldw	r8,4(sp)
 8006c10:	103fc21e 	bne	r2,zero,8006b1c <__alt_data_end+0xfc006b1c>
 8006c14:	182d883a 	mov	r22,r3
 8006c18:	a5a9c83a 	sub	r20,r20,r22
 8006c1c:	a03fe11e 	bne	r20,zero,8006ba4 <__alt_data_end+0xfc006ba4>
 8006c20:	a809883a 	mov	r4,r21
 8006c24:	800b883a 	mov	r5,r16
 8006c28:	8005f240 	call	8005f24 <_fflush_r>
 8006c2c:	103fbb1e 	bne	r2,zero,8006b1c <__alt_data_end+0xfc006b1c>
 8006c30:	0011883a 	mov	r8,zero
 8006c34:	003fdb06 	br	8006ba4 <__alt_data_end+0xfc006ba4>
 8006c38:	81000017 	ldw	r4,0(r16)
 8006c3c:	80800417 	ldw	r2,16(r16)
 8006c40:	1100012e 	bgeu	r2,r4,8006c48 <__sfvwrite_r+0x304>
 8006c44:	a4805a36 	bltu	r20,r18,8006db0 <__sfvwrite_r+0x46c>
 8006c48:	81c00517 	ldw	r7,20(r16)
 8006c4c:	91c01a36 	bltu	r18,r7,8006cb8 <__sfvwrite_r+0x374>
 8006c50:	80800917 	ldw	r2,36(r16)
 8006c54:	81400717 	ldw	r5,28(r16)
 8006c58:	a809883a 	mov	r4,r21
 8006c5c:	b80d883a 	mov	r6,r23
 8006c60:	103ee83a 	callr	r2
 8006c64:	1029883a 	mov	r20,r2
 8006c68:	00bfac0e 	bge	zero,r2,8006b1c <__alt_data_end+0xfc006b1c>
 8006c6c:	a005883a 	mov	r2,r20
 8006c70:	003f9606 	br	8006acc <__alt_data_end+0xfc006acc>
 8006c74:	b80d883a 	mov	r6,r23
 8006c78:	e00b883a 	mov	r5,fp
 8006c7c:	da000115 	stw	r8,4(sp)
 8006c80:	8007bb80 	call	8007bb8 <memmove>
 8006c84:	80800217 	ldw	r2,8(r16)
 8006c88:	80c00017 	ldw	r3,0(r16)
 8006c8c:	da000117 	ldw	r8,4(sp)
 8006c90:	15c5c83a 	sub	r2,r2,r23
 8006c94:	1def883a 	add	r23,r3,r23
 8006c98:	80800215 	stw	r2,8(r16)
 8006c9c:	85c00015 	stw	r23,0(r16)
 8006ca0:	003fbe06 	br	8006b9c <__alt_data_end+0xfc006b9c>
 8006ca4:	81000017 	ldw	r4,0(r16)
 8006ca8:	9039883a 	mov	fp,r18
 8006cac:	9029883a 	mov	r20,r18
 8006cb0:	902d883a 	mov	r22,r18
 8006cb4:	003f7b06 	br	8006aa4 <__alt_data_end+0xfc006aa4>
 8006cb8:	b80b883a 	mov	r5,r23
 8006cbc:	900d883a 	mov	r6,r18
 8006cc0:	8007bb80 	call	8007bb8 <memmove>
 8006cc4:	80c00217 	ldw	r3,8(r16)
 8006cc8:	80800017 	ldw	r2,0(r16)
 8006ccc:	9029883a 	mov	r20,r18
 8006cd0:	1c87c83a 	sub	r3,r3,r18
 8006cd4:	1485883a 	add	r2,r2,r18
 8006cd8:	80800015 	stw	r2,0(r16)
 8006cdc:	80c00215 	stw	r3,8(r16)
 8006ce0:	9005883a 	mov	r2,r18
 8006ce4:	003f7906 	br	8006acc <__alt_data_end+0xfc006acc>
 8006ce8:	e009883a 	mov	r4,fp
 8006cec:	01400284 	movi	r5,10
 8006cf0:	900d883a 	mov	r6,r18
 8006cf4:	80079980 	call	8007998 <memchr>
 8006cf8:	10003826 	beq	r2,zero,8006ddc <__sfvwrite_r+0x498>
 8006cfc:	10800044 	addi	r2,r2,1
 8006d00:	1729c83a 	sub	r20,r2,fp
 8006d04:	02000044 	movi	r8,1
 8006d08:	003f8f06 	br	8006b48 <__alt_data_end+0xfc006b48>
 8006d0c:	80800517 	ldw	r2,20(r16)
 8006d10:	81400417 	ldw	r5,16(r16)
 8006d14:	87000017 	ldw	fp,0(r16)
 8006d18:	10a9883a 	add	r20,r2,r2
 8006d1c:	a085883a 	add	r2,r20,r2
 8006d20:	1028d7fa 	srli	r20,r2,31
 8006d24:	e179c83a 	sub	fp,fp,r5
 8006d28:	e1000044 	addi	r4,fp,1
 8006d2c:	a085883a 	add	r2,r20,r2
 8006d30:	1029d07a 	srai	r20,r2,1
 8006d34:	2485883a 	add	r2,r4,r18
 8006d38:	a00d883a 	mov	r6,r20
 8006d3c:	a080022e 	bgeu	r20,r2,8006d48 <__sfvwrite_r+0x404>
 8006d40:	1029883a 	mov	r20,r2
 8006d44:	100d883a 	mov	r6,r2
 8006d48:	18c1000c 	andi	r3,r3,1024
 8006d4c:	a809883a 	mov	r4,r21
 8006d50:	183f6a26 	beq	r3,zero,8006afc <__alt_data_end+0xfc006afc>
 8006d54:	300b883a 	mov	r5,r6
 8006d58:	80071f00 	call	80071f0 <_malloc_r>
 8006d5c:	102d883a 	mov	r22,r2
 8006d60:	103f6c26 	beq	r2,zero,8006b14 <__alt_data_end+0xfc006b14>
 8006d64:	81400417 	ldw	r5,16(r16)
 8006d68:	1009883a 	mov	r4,r2
 8006d6c:	e00d883a 	mov	r6,fp
 8006d70:	8007a800 	call	8007a80 <memcpy>
 8006d74:	8080030b 	ldhu	r2,12(r16)
 8006d78:	00fedfc4 	movi	r3,-1153
 8006d7c:	10c4703a 	and	r2,r2,r3
 8006d80:	10802014 	ori	r2,r2,128
 8006d84:	8080030d 	sth	r2,12(r16)
 8006d88:	b709883a 	add	r4,r22,fp
 8006d8c:	a707c83a 	sub	r3,r20,fp
 8006d90:	85800415 	stw	r22,16(r16)
 8006d94:	85000515 	stw	r20,20(r16)
 8006d98:	81000015 	stw	r4,0(r16)
 8006d9c:	9039883a 	mov	fp,r18
 8006da0:	80c00215 	stw	r3,8(r16)
 8006da4:	9029883a 	mov	r20,r18
 8006da8:	902d883a 	mov	r22,r18
 8006dac:	003f3d06 	br	8006aa4 <__alt_data_end+0xfc006aa4>
 8006db0:	b80b883a 	mov	r5,r23
 8006db4:	a00d883a 	mov	r6,r20
 8006db8:	8007bb80 	call	8007bb8 <memmove>
 8006dbc:	80800017 	ldw	r2,0(r16)
 8006dc0:	a809883a 	mov	r4,r21
 8006dc4:	800b883a 	mov	r5,r16
 8006dc8:	1505883a 	add	r2,r2,r20
 8006dcc:	80800015 	stw	r2,0(r16)
 8006dd0:	8005f240 	call	8005f24 <_fflush_r>
 8006dd4:	103fa526 	beq	r2,zero,8006c6c <__alt_data_end+0xfc006c6c>
 8006dd8:	003f5006 	br	8006b1c <__alt_data_end+0xfc006b1c>
 8006ddc:	95000044 	addi	r20,r18,1
 8006de0:	02000044 	movi	r8,1
 8006de4:	003f5806 	br	8006b48 <__alt_data_end+0xfc006b48>

08006de8 <_fwalk>:
 8006de8:	defff804 	addi	sp,sp,-32
 8006dec:	dd400515 	stw	r21,20(sp)
 8006df0:	2540b804 	addi	r21,r4,736
 8006df4:	dd800615 	stw	r22,24(sp)
 8006df8:	dd000415 	stw	r20,16(sp)
 8006dfc:	dfc00715 	stw	ra,28(sp)
 8006e00:	dcc00315 	stw	r19,12(sp)
 8006e04:	dc800215 	stw	r18,8(sp)
 8006e08:	dc400115 	stw	r17,4(sp)
 8006e0c:	dc000015 	stw	r16,0(sp)
 8006e10:	2829883a 	mov	r20,r5
 8006e14:	002d883a 	mov	r22,zero
 8006e18:	80064f00 	call	80064f0 <__sfp_lock_acquire>
 8006e1c:	a8001426 	beq	r21,zero,8006e70 <_fwalk+0x88>
 8006e20:	04ffffc4 	movi	r19,-1
 8006e24:	ac400117 	ldw	r17,4(r21)
 8006e28:	ac800217 	ldw	r18,8(r21)
 8006e2c:	8c7fffc4 	addi	r17,r17,-1
 8006e30:	88000d16 	blt	r17,zero,8006e68 <_fwalk+0x80>
 8006e34:	94000304 	addi	r16,r18,12
 8006e38:	94800384 	addi	r18,r18,14
 8006e3c:	80c0000f 	ldh	r3,0(r16)
 8006e40:	8c7fffc4 	addi	r17,r17,-1
 8006e44:	813ffd04 	addi	r4,r16,-12
 8006e48:	18000426 	beq	r3,zero,8006e5c <_fwalk+0x74>
 8006e4c:	90c0000f 	ldh	r3,0(r18)
 8006e50:	1cc00226 	beq	r3,r19,8006e5c <_fwalk+0x74>
 8006e54:	a03ee83a 	callr	r20
 8006e58:	b0acb03a 	or	r22,r22,r2
 8006e5c:	84001a04 	addi	r16,r16,104
 8006e60:	94801a04 	addi	r18,r18,104
 8006e64:	8cfff51e 	bne	r17,r19,8006e3c <__alt_data_end+0xfc006e3c>
 8006e68:	ad400017 	ldw	r21,0(r21)
 8006e6c:	a83fed1e 	bne	r21,zero,8006e24 <__alt_data_end+0xfc006e24>
 8006e70:	80064f40 	call	80064f4 <__sfp_lock_release>
 8006e74:	b005883a 	mov	r2,r22
 8006e78:	dfc00717 	ldw	ra,28(sp)
 8006e7c:	dd800617 	ldw	r22,24(sp)
 8006e80:	dd400517 	ldw	r21,20(sp)
 8006e84:	dd000417 	ldw	r20,16(sp)
 8006e88:	dcc00317 	ldw	r19,12(sp)
 8006e8c:	dc800217 	ldw	r18,8(sp)
 8006e90:	dc400117 	ldw	r17,4(sp)
 8006e94:	dc000017 	ldw	r16,0(sp)
 8006e98:	dec00804 	addi	sp,sp,32
 8006e9c:	f800283a 	ret

08006ea0 <_fwalk_reent>:
 8006ea0:	defff804 	addi	sp,sp,-32
 8006ea4:	dd400515 	stw	r21,20(sp)
 8006ea8:	2540b804 	addi	r21,r4,736
 8006eac:	dd800615 	stw	r22,24(sp)
 8006eb0:	dd000415 	stw	r20,16(sp)
 8006eb4:	dcc00315 	stw	r19,12(sp)
 8006eb8:	dfc00715 	stw	ra,28(sp)
 8006ebc:	dc800215 	stw	r18,8(sp)
 8006ec0:	dc400115 	stw	r17,4(sp)
 8006ec4:	dc000015 	stw	r16,0(sp)
 8006ec8:	2027883a 	mov	r19,r4
 8006ecc:	2829883a 	mov	r20,r5
 8006ed0:	002d883a 	mov	r22,zero
 8006ed4:	80064f00 	call	80064f0 <__sfp_lock_acquire>
 8006ed8:	a8001326 	beq	r21,zero,8006f28 <_fwalk_reent+0x88>
 8006edc:	04bfffc4 	movi	r18,-1
 8006ee0:	ac400117 	ldw	r17,4(r21)
 8006ee4:	ac000217 	ldw	r16,8(r21)
 8006ee8:	8c7fffc4 	addi	r17,r17,-1
 8006eec:	88000c16 	blt	r17,zero,8006f20 <_fwalk_reent+0x80>
 8006ef0:	84000304 	addi	r16,r16,12
 8006ef4:	80c0000f 	ldh	r3,0(r16)
 8006ef8:	8c7fffc4 	addi	r17,r17,-1
 8006efc:	817ffd04 	addi	r5,r16,-12
 8006f00:	18000526 	beq	r3,zero,8006f18 <_fwalk_reent+0x78>
 8006f04:	80c0008f 	ldh	r3,2(r16)
 8006f08:	9809883a 	mov	r4,r19
 8006f0c:	1c800226 	beq	r3,r18,8006f18 <_fwalk_reent+0x78>
 8006f10:	a03ee83a 	callr	r20
 8006f14:	b0acb03a 	or	r22,r22,r2
 8006f18:	84001a04 	addi	r16,r16,104
 8006f1c:	8cbff51e 	bne	r17,r18,8006ef4 <__alt_data_end+0xfc006ef4>
 8006f20:	ad400017 	ldw	r21,0(r21)
 8006f24:	a83fee1e 	bne	r21,zero,8006ee0 <__alt_data_end+0xfc006ee0>
 8006f28:	80064f40 	call	80064f4 <__sfp_lock_release>
 8006f2c:	b005883a 	mov	r2,r22
 8006f30:	dfc00717 	ldw	ra,28(sp)
 8006f34:	dd800617 	ldw	r22,24(sp)
 8006f38:	dd400517 	ldw	r21,20(sp)
 8006f3c:	dd000417 	ldw	r20,16(sp)
 8006f40:	dcc00317 	ldw	r19,12(sp)
 8006f44:	dc800217 	ldw	r18,8(sp)
 8006f48:	dc400117 	ldw	r17,4(sp)
 8006f4c:	dc000017 	ldw	r16,0(sp)
 8006f50:	dec00804 	addi	sp,sp,32
 8006f54:	f800283a 	ret

08006f58 <_setlocale_r>:
 8006f58:	30001b26 	beq	r6,zero,8006fc8 <_setlocale_r+0x70>
 8006f5c:	01420074 	movhi	r5,2049
 8006f60:	defffe04 	addi	sp,sp,-8
 8006f64:	2946d604 	addi	r5,r5,7000
 8006f68:	3009883a 	mov	r4,r6
 8006f6c:	dc000015 	stw	r16,0(sp)
 8006f70:	dfc00115 	stw	ra,4(sp)
 8006f74:	3021883a 	mov	r16,r6
 8006f78:	80096240 	call	8009624 <strcmp>
 8006f7c:	1000061e 	bne	r2,zero,8006f98 <_setlocale_r+0x40>
 8006f80:	00820074 	movhi	r2,2049
 8006f84:	1086d504 	addi	r2,r2,6996
 8006f88:	dfc00117 	ldw	ra,4(sp)
 8006f8c:	dc000017 	ldw	r16,0(sp)
 8006f90:	dec00204 	addi	sp,sp,8
 8006f94:	f800283a 	ret
 8006f98:	01420074 	movhi	r5,2049
 8006f9c:	2946d504 	addi	r5,r5,6996
 8006fa0:	8009883a 	mov	r4,r16
 8006fa4:	80096240 	call	8009624 <strcmp>
 8006fa8:	103ff526 	beq	r2,zero,8006f80 <__alt_data_end+0xfc006f80>
 8006fac:	01420074 	movhi	r5,2049
 8006fb0:	2946c004 	addi	r5,r5,6912
 8006fb4:	8009883a 	mov	r4,r16
 8006fb8:	80096240 	call	8009624 <strcmp>
 8006fbc:	103ff026 	beq	r2,zero,8006f80 <__alt_data_end+0xfc006f80>
 8006fc0:	0005883a 	mov	r2,zero
 8006fc4:	003ff006 	br	8006f88 <__alt_data_end+0xfc006f88>
 8006fc8:	00820074 	movhi	r2,2049
 8006fcc:	1086d504 	addi	r2,r2,6996
 8006fd0:	f800283a 	ret

08006fd4 <__locale_charset>:
 8006fd4:	00820074 	movhi	r2,2049
 8006fd8:	10888804 	addi	r2,r2,8736
 8006fdc:	f800283a 	ret

08006fe0 <__locale_mb_cur_max>:
 8006fe0:	00820074 	movhi	r2,2049
 8006fe4:	108e2404 	addi	r2,r2,14480
 8006fe8:	10800017 	ldw	r2,0(r2)
 8006fec:	f800283a 	ret

08006ff0 <__locale_msgcharset>:
 8006ff0:	00820074 	movhi	r2,2049
 8006ff4:	10888004 	addi	r2,r2,8704
 8006ff8:	f800283a 	ret

08006ffc <__locale_cjk_lang>:
 8006ffc:	0005883a 	mov	r2,zero
 8007000:	f800283a 	ret

08007004 <_localeconv_r>:
 8007004:	00820074 	movhi	r2,2049
 8007008:	10889004 	addi	r2,r2,8768
 800700c:	f800283a 	ret

08007010 <setlocale>:
 8007010:	00c20074 	movhi	r3,2049
 8007014:	18ce2304 	addi	r3,r3,14476
 8007018:	2005883a 	mov	r2,r4
 800701c:	19000017 	ldw	r4,0(r3)
 8007020:	280d883a 	mov	r6,r5
 8007024:	100b883a 	mov	r5,r2
 8007028:	8006f581 	jmpi	8006f58 <_setlocale_r>

0800702c <localeconv>:
 800702c:	00820074 	movhi	r2,2049
 8007030:	10889004 	addi	r2,r2,8768
 8007034:	f800283a 	ret

08007038 <__smakebuf_r>:
 8007038:	2880030b 	ldhu	r2,12(r5)
 800703c:	10c0008c 	andi	r3,r2,2
 8007040:	1800401e 	bne	r3,zero,8007144 <__smakebuf_r+0x10c>
 8007044:	deffec04 	addi	sp,sp,-80
 8007048:	dc000f15 	stw	r16,60(sp)
 800704c:	2821883a 	mov	r16,r5
 8007050:	2940038f 	ldh	r5,14(r5)
 8007054:	dc401015 	stw	r17,64(sp)
 8007058:	dfc01315 	stw	ra,76(sp)
 800705c:	dcc01215 	stw	r19,72(sp)
 8007060:	dc801115 	stw	r18,68(sp)
 8007064:	2023883a 	mov	r17,r4
 8007068:	28001b16 	blt	r5,zero,80070d8 <__smakebuf_r+0xa0>
 800706c:	d80d883a 	mov	r6,sp
 8007070:	800b09c0 	call	800b09c <_fstat_r>
 8007074:	10001716 	blt	r2,zero,80070d4 <__smakebuf_r+0x9c>
 8007078:	d8800117 	ldw	r2,4(sp)
 800707c:	00e00014 	movui	r3,32768
 8007080:	10bc000c 	andi	r2,r2,61440
 8007084:	10c03726 	beq	r2,r3,8007164 <__smakebuf_r+0x12c>
 8007088:	80c0030b 	ldhu	r3,12(r16)
 800708c:	18c20014 	ori	r3,r3,2048
 8007090:	80c0030d 	sth	r3,12(r16)
 8007094:	00c80004 	movi	r3,8192
 8007098:	10c03c1e 	bne	r2,r3,800718c <__smakebuf_r+0x154>
 800709c:	8140038f 	ldh	r5,14(r16)
 80070a0:	8809883a 	mov	r4,r17
 80070a4:	800b0f40 	call	800b0f4 <_isatty_r>
 80070a8:	10004e26 	beq	r2,zero,80071e4 <__smakebuf_r+0x1ac>
 80070ac:	8080030b 	ldhu	r2,12(r16)
 80070b0:	04c00044 	movi	r19,1
 80070b4:	80c010c4 	addi	r3,r16,67
 80070b8:	14c4b03a 	or	r2,r2,r19
 80070bc:	8080030d 	sth	r2,12(r16)
 80070c0:	80c00015 	stw	r3,0(r16)
 80070c4:	80c00415 	stw	r3,16(r16)
 80070c8:	84c00515 	stw	r19,20(r16)
 80070cc:	04810004 	movi	r18,1024
 80070d0:	00000706 	br	80070f0 <__smakebuf_r+0xb8>
 80070d4:	8080030b 	ldhu	r2,12(r16)
 80070d8:	10c0200c 	andi	r3,r2,128
 80070dc:	18001f1e 	bne	r3,zero,800715c <__smakebuf_r+0x124>
 80070e0:	04810004 	movi	r18,1024
 80070e4:	10820014 	ori	r2,r2,2048
 80070e8:	8080030d 	sth	r2,12(r16)
 80070ec:	0027883a 	mov	r19,zero
 80070f0:	8809883a 	mov	r4,r17
 80070f4:	900b883a 	mov	r5,r18
 80070f8:	80071f00 	call	80071f0 <_malloc_r>
 80070fc:	10002e26 	beq	r2,zero,80071b8 <__smakebuf_r+0x180>
 8007100:	80c0030b 	ldhu	r3,12(r16)
 8007104:	01020034 	movhi	r4,2048
 8007108:	21186304 	addi	r4,r4,24972
 800710c:	89000f15 	stw	r4,60(r17)
 8007110:	18c02014 	ori	r3,r3,128
 8007114:	80c0030d 	sth	r3,12(r16)
 8007118:	80800015 	stw	r2,0(r16)
 800711c:	80800415 	stw	r2,16(r16)
 8007120:	84800515 	stw	r18,20(r16)
 8007124:	98001c1e 	bne	r19,zero,8007198 <__smakebuf_r+0x160>
 8007128:	dfc01317 	ldw	ra,76(sp)
 800712c:	dcc01217 	ldw	r19,72(sp)
 8007130:	dc801117 	ldw	r18,68(sp)
 8007134:	dc401017 	ldw	r17,64(sp)
 8007138:	dc000f17 	ldw	r16,60(sp)
 800713c:	dec01404 	addi	sp,sp,80
 8007140:	f800283a 	ret
 8007144:	288010c4 	addi	r2,r5,67
 8007148:	28800015 	stw	r2,0(r5)
 800714c:	28800415 	stw	r2,16(r5)
 8007150:	00800044 	movi	r2,1
 8007154:	28800515 	stw	r2,20(r5)
 8007158:	f800283a 	ret
 800715c:	04801004 	movi	r18,64
 8007160:	003fe006 	br	80070e4 <__alt_data_end+0xfc0070e4>
 8007164:	81000a17 	ldw	r4,40(r16)
 8007168:	00c20074 	movhi	r3,2049
 800716c:	18e57004 	addi	r3,r3,-27200
 8007170:	20ffc51e 	bne	r4,r3,8007088 <__alt_data_end+0xfc007088>
 8007174:	80c0030b 	ldhu	r3,12(r16)
 8007178:	01010004 	movi	r4,1024
 800717c:	81001315 	stw	r4,76(r16)
 8007180:	1906b03a 	or	r3,r3,r4
 8007184:	80c0030d 	sth	r3,12(r16)
 8007188:	003fc206 	br	8007094 <__alt_data_end+0xfc007094>
 800718c:	0027883a 	mov	r19,zero
 8007190:	04810004 	movi	r18,1024
 8007194:	003fd606 	br	80070f0 <__alt_data_end+0xfc0070f0>
 8007198:	8140038f 	ldh	r5,14(r16)
 800719c:	8809883a 	mov	r4,r17
 80071a0:	800b0f40 	call	800b0f4 <_isatty_r>
 80071a4:	103fe026 	beq	r2,zero,8007128 <__alt_data_end+0xfc007128>
 80071a8:	8080030b 	ldhu	r2,12(r16)
 80071ac:	10800054 	ori	r2,r2,1
 80071b0:	8080030d 	sth	r2,12(r16)
 80071b4:	003fdc06 	br	8007128 <__alt_data_end+0xfc007128>
 80071b8:	8080030b 	ldhu	r2,12(r16)
 80071bc:	10c0800c 	andi	r3,r2,512
 80071c0:	183fd91e 	bne	r3,zero,8007128 <__alt_data_end+0xfc007128>
 80071c4:	10800094 	ori	r2,r2,2
 80071c8:	80c010c4 	addi	r3,r16,67
 80071cc:	8080030d 	sth	r2,12(r16)
 80071d0:	00800044 	movi	r2,1
 80071d4:	80c00015 	stw	r3,0(r16)
 80071d8:	80c00415 	stw	r3,16(r16)
 80071dc:	80800515 	stw	r2,20(r16)
 80071e0:	003fd106 	br	8007128 <__alt_data_end+0xfc007128>
 80071e4:	04c00044 	movi	r19,1
 80071e8:	04810004 	movi	r18,1024
 80071ec:	003fc006 	br	80070f0 <__alt_data_end+0xfc0070f0>

080071f0 <_malloc_r>:
 80071f0:	defff504 	addi	sp,sp,-44
 80071f4:	dc800315 	stw	r18,12(sp)
 80071f8:	dfc00a15 	stw	ra,40(sp)
 80071fc:	df000915 	stw	fp,36(sp)
 8007200:	ddc00815 	stw	r23,32(sp)
 8007204:	dd800715 	stw	r22,28(sp)
 8007208:	dd400615 	stw	r21,24(sp)
 800720c:	dd000515 	stw	r20,20(sp)
 8007210:	dcc00415 	stw	r19,16(sp)
 8007214:	dc400215 	stw	r17,8(sp)
 8007218:	dc000115 	stw	r16,4(sp)
 800721c:	288002c4 	addi	r2,r5,11
 8007220:	00c00584 	movi	r3,22
 8007224:	2025883a 	mov	r18,r4
 8007228:	18802a2e 	bgeu	r3,r2,80072d4 <_malloc_r+0xe4>
 800722c:	047ffe04 	movi	r17,-8
 8007230:	1462703a 	and	r17,r2,r17
 8007234:	88009e16 	blt	r17,zero,80074b0 <_malloc_r+0x2c0>
 8007238:	89409d36 	bltu	r17,r5,80074b0 <_malloc_r+0x2c0>
 800723c:	800f1000 	call	800f100 <__malloc_lock>
 8007240:	00807dc4 	movi	r2,503
 8007244:	14402736 	bltu	r2,r17,80072e4 <_malloc_r+0xf4>
 8007248:	8806d0fa 	srli	r3,r17,3
 800724c:	04c20074 	movhi	r19,2049
 8007250:	9cc89e04 	addi	r19,r19,8824
 8007254:	18c5883a 	add	r2,r3,r3
 8007258:	1085883a 	add	r2,r2,r2
 800725c:	1085883a 	add	r2,r2,r2
 8007260:	9885883a 	add	r2,r19,r2
 8007264:	14000317 	ldw	r16,12(r2)
 8007268:	80814a26 	beq	r16,r2,8007794 <_malloc_r+0x5a4>
 800726c:	80c00117 	ldw	r3,4(r16)
 8007270:	81000317 	ldw	r4,12(r16)
 8007274:	00bfff04 	movi	r2,-4
 8007278:	1884703a 	and	r2,r3,r2
 800727c:	81400217 	ldw	r5,8(r16)
 8007280:	8085883a 	add	r2,r16,r2
 8007284:	10c00117 	ldw	r3,4(r2)
 8007288:	29000315 	stw	r4,12(r5)
 800728c:	21400215 	stw	r5,8(r4)
 8007290:	18c00054 	ori	r3,r3,1
 8007294:	10c00115 	stw	r3,4(r2)
 8007298:	9009883a 	mov	r4,r18
 800729c:	800f1200 	call	800f120 <__malloc_unlock>
 80072a0:	80800204 	addi	r2,r16,8
 80072a4:	dfc00a17 	ldw	ra,40(sp)
 80072a8:	df000917 	ldw	fp,36(sp)
 80072ac:	ddc00817 	ldw	r23,32(sp)
 80072b0:	dd800717 	ldw	r22,28(sp)
 80072b4:	dd400617 	ldw	r21,24(sp)
 80072b8:	dd000517 	ldw	r20,20(sp)
 80072bc:	dcc00417 	ldw	r19,16(sp)
 80072c0:	dc800317 	ldw	r18,12(sp)
 80072c4:	dc400217 	ldw	r17,8(sp)
 80072c8:	dc000117 	ldw	r16,4(sp)
 80072cc:	dec00b04 	addi	sp,sp,44
 80072d0:	f800283a 	ret
 80072d4:	04400404 	movi	r17,16
 80072d8:	89407536 	bltu	r17,r5,80074b0 <_malloc_r+0x2c0>
 80072dc:	800f1000 	call	800f100 <__malloc_lock>
 80072e0:	003fd906 	br	8007248 <__alt_data_end+0xfc007248>
 80072e4:	8806d27a 	srli	r3,r17,9
 80072e8:	18007526 	beq	r3,zero,80074c0 <_malloc_r+0x2d0>
 80072ec:	00800104 	movi	r2,4
 80072f0:	10c0ef36 	bltu	r2,r3,80076b0 <_malloc_r+0x4c0>
 80072f4:	8806d1ba 	srli	r3,r17,6
 80072f8:	19c00e04 	addi	r7,r3,56
 80072fc:	39cb883a 	add	r5,r7,r7
 8007300:	04c20074 	movhi	r19,2049
 8007304:	294b883a 	add	r5,r5,r5
 8007308:	9cc89e04 	addi	r19,r19,8824
 800730c:	294b883a 	add	r5,r5,r5
 8007310:	994b883a 	add	r5,r19,r5
 8007314:	2c000317 	ldw	r16,12(r5)
 8007318:	2c000e26 	beq	r5,r16,8007354 <_malloc_r+0x164>
 800731c:	80800117 	ldw	r2,4(r16)
 8007320:	01bfff04 	movi	r6,-4
 8007324:	010003c4 	movi	r4,15
 8007328:	1184703a 	and	r2,r2,r6
 800732c:	1447c83a 	sub	r3,r2,r17
 8007330:	20c00716 	blt	r4,r3,8007350 <_malloc_r+0x160>
 8007334:	1800650e 	bge	r3,zero,80074cc <_malloc_r+0x2dc>
 8007338:	84000317 	ldw	r16,12(r16)
 800733c:	2c000526 	beq	r5,r16,8007354 <_malloc_r+0x164>
 8007340:	80800117 	ldw	r2,4(r16)
 8007344:	1184703a 	and	r2,r2,r6
 8007348:	1447c83a 	sub	r3,r2,r17
 800734c:	20fff90e 	bge	r4,r3,8007334 <__alt_data_end+0xfc007334>
 8007350:	39ffffc4 	addi	r7,r7,-1
 8007354:	38c00044 	addi	r3,r7,1
 8007358:	01820074 	movhi	r6,2049
 800735c:	9c000417 	ldw	r16,16(r19)
 8007360:	31889e04 	addi	r6,r6,8824
 8007364:	32400204 	addi	r9,r6,8
 8007368:	82410326 	beq	r16,r9,8007778 <_malloc_r+0x588>
 800736c:	81000117 	ldw	r4,4(r16)
 8007370:	00bfff04 	movi	r2,-4
 8007374:	208e703a 	and	r7,r4,r2
 8007378:	3c45c83a 	sub	r2,r7,r17
 800737c:	010003c4 	movi	r4,15
 8007380:	2080ee16 	blt	r4,r2,800773c <_malloc_r+0x54c>
 8007384:	32400515 	stw	r9,20(r6)
 8007388:	32400415 	stw	r9,16(r6)
 800738c:	1000510e 	bge	r2,zero,80074d4 <_malloc_r+0x2e4>
 8007390:	00807fc4 	movi	r2,511
 8007394:	11c0ce36 	bltu	r2,r7,80076d0 <_malloc_r+0x4e0>
 8007398:	3808d0fa 	srli	r4,r7,3
 800739c:	01c00044 	movi	r7,1
 80073a0:	30800117 	ldw	r2,4(r6)
 80073a4:	210b883a 	add	r5,r4,r4
 80073a8:	294b883a 	add	r5,r5,r5
 80073ac:	2009d0ba 	srai	r4,r4,2
 80073b0:	294b883a 	add	r5,r5,r5
 80073b4:	298b883a 	add	r5,r5,r6
 80073b8:	2a000217 	ldw	r8,8(r5)
 80073bc:	3908983a 	sll	r4,r7,r4
 80073c0:	81400315 	stw	r5,12(r16)
 80073c4:	82000215 	stw	r8,8(r16)
 80073c8:	2088b03a 	or	r4,r4,r2
 80073cc:	2c000215 	stw	r16,8(r5)
 80073d0:	31000115 	stw	r4,4(r6)
 80073d4:	44000315 	stw	r16,12(r8)
 80073d8:	1805d0ba 	srai	r2,r3,2
 80073dc:	01400044 	movi	r5,1
 80073e0:	288a983a 	sll	r5,r5,r2
 80073e4:	21404336 	bltu	r4,r5,80074f4 <_malloc_r+0x304>
 80073e8:	2144703a 	and	r2,r4,r5
 80073ec:	10000a1e 	bne	r2,zero,8007418 <_malloc_r+0x228>
 80073f0:	00bfff04 	movi	r2,-4
 80073f4:	294b883a 	add	r5,r5,r5
 80073f8:	1886703a 	and	r3,r3,r2
 80073fc:	2144703a 	and	r2,r4,r5
 8007400:	18c00104 	addi	r3,r3,4
 8007404:	1000041e 	bne	r2,zero,8007418 <_malloc_r+0x228>
 8007408:	294b883a 	add	r5,r5,r5
 800740c:	2144703a 	and	r2,r4,r5
 8007410:	18c00104 	addi	r3,r3,4
 8007414:	103ffc26 	beq	r2,zero,8007408 <__alt_data_end+0xfc007408>
 8007418:	023fff04 	movi	r8,-4
 800741c:	01c003c4 	movi	r7,15
 8007420:	18c5883a 	add	r2,r3,r3
 8007424:	1085883a 	add	r2,r2,r2
 8007428:	1085883a 	add	r2,r2,r2
 800742c:	9895883a 	add	r10,r19,r2
 8007430:	52c00304 	addi	r11,r10,12
 8007434:	1819883a 	mov	r12,r3
 8007438:	5c000017 	ldw	r16,0(r11)
 800743c:	59bffd04 	addi	r6,r11,-12
 8007440:	8180041e 	bne	r16,r6,8007454 <_malloc_r+0x264>
 8007444:	0000ce06 	br	8007780 <_malloc_r+0x590>
 8007448:	2000d70e 	bge	r4,zero,80077a8 <_malloc_r+0x5b8>
 800744c:	84000317 	ldw	r16,12(r16)
 8007450:	8180cb26 	beq	r16,r6,8007780 <_malloc_r+0x590>
 8007454:	80800117 	ldw	r2,4(r16)
 8007458:	1204703a 	and	r2,r2,r8
 800745c:	1449c83a 	sub	r4,r2,r17
 8007460:	393ff90e 	bge	r7,r4,8007448 <__alt_data_end+0xfc007448>
 8007464:	80800317 	ldw	r2,12(r16)
 8007468:	80c00217 	ldw	r3,8(r16)
 800746c:	89400054 	ori	r5,r17,1
 8007470:	81400115 	stw	r5,4(r16)
 8007474:	18800315 	stw	r2,12(r3)
 8007478:	10c00215 	stw	r3,8(r2)
 800747c:	8463883a 	add	r17,r16,r17
 8007480:	9c400515 	stw	r17,20(r19)
 8007484:	9c400415 	stw	r17,16(r19)
 8007488:	20800054 	ori	r2,r4,1
 800748c:	88800115 	stw	r2,4(r17)
 8007490:	8a400315 	stw	r9,12(r17)
 8007494:	8a400215 	stw	r9,8(r17)
 8007498:	8923883a 	add	r17,r17,r4
 800749c:	89000015 	stw	r4,0(r17)
 80074a0:	9009883a 	mov	r4,r18
 80074a4:	800f1200 	call	800f120 <__malloc_unlock>
 80074a8:	80800204 	addi	r2,r16,8
 80074ac:	003f7d06 	br	80072a4 <__alt_data_end+0xfc0072a4>
 80074b0:	00800304 	movi	r2,12
 80074b4:	90800015 	stw	r2,0(r18)
 80074b8:	0005883a 	mov	r2,zero
 80074bc:	003f7906 	br	80072a4 <__alt_data_end+0xfc0072a4>
 80074c0:	01401f84 	movi	r5,126
 80074c4:	01c00fc4 	movi	r7,63
 80074c8:	003f8d06 	br	8007300 <__alt_data_end+0xfc007300>
 80074cc:	81000317 	ldw	r4,12(r16)
 80074d0:	003f6a06 	br	800727c <__alt_data_end+0xfc00727c>
 80074d4:	81c5883a 	add	r2,r16,r7
 80074d8:	10c00117 	ldw	r3,4(r2)
 80074dc:	9009883a 	mov	r4,r18
 80074e0:	18c00054 	ori	r3,r3,1
 80074e4:	10c00115 	stw	r3,4(r2)
 80074e8:	800f1200 	call	800f120 <__malloc_unlock>
 80074ec:	80800204 	addi	r2,r16,8
 80074f0:	003f6c06 	br	80072a4 <__alt_data_end+0xfc0072a4>
 80074f4:	9c000217 	ldw	r16,8(r19)
 80074f8:	00bfff04 	movi	r2,-4
 80074fc:	85800117 	ldw	r22,4(r16)
 8007500:	b0ac703a 	and	r22,r22,r2
 8007504:	b4400336 	bltu	r22,r17,8007514 <_malloc_r+0x324>
 8007508:	b445c83a 	sub	r2,r22,r17
 800750c:	00c003c4 	movi	r3,15
 8007510:	18805d16 	blt	r3,r2,8007688 <_malloc_r+0x498>
 8007514:	05c20074 	movhi	r23,2049
 8007518:	00820074 	movhi	r2,2049
 800751c:	bdce2504 	addi	r23,r23,14484
 8007520:	1094f304 	addi	r2,r2,21452
 8007524:	15400017 	ldw	r21,0(r2)
 8007528:	b9000017 	ldw	r4,0(r23)
 800752c:	00ffffc4 	movi	r3,-1
 8007530:	858d883a 	add	r6,r16,r22
 8007534:	8d6b883a 	add	r21,r17,r21
 8007538:	20c0e426 	beq	r4,r3,80078cc <_malloc_r+0x6dc>
 800753c:	ad4403c4 	addi	r21,r21,4111
 8007540:	00fc0004 	movi	r3,-4096
 8007544:	a8ea703a 	and	r21,r21,r3
 8007548:	9009883a 	mov	r4,r18
 800754c:	a80b883a 	mov	r5,r21
 8007550:	d9800015 	stw	r6,0(sp)
 8007554:	80094940 	call	8009494 <_sbrk_r>
 8007558:	00ffffc4 	movi	r3,-1
 800755c:	1029883a 	mov	r20,r2
 8007560:	d9800017 	ldw	r6,0(sp)
 8007564:	10c0a426 	beq	r2,r3,80077f8 <_malloc_r+0x608>
 8007568:	1180a236 	bltu	r2,r6,80077f4 <_malloc_r+0x604>
 800756c:	07020074 	movhi	fp,2049
 8007570:	e714fb04 	addi	fp,fp,21484
 8007574:	e0c00017 	ldw	r3,0(fp)
 8007578:	a8c7883a 	add	r3,r21,r3
 800757c:	e0c00015 	stw	r3,0(fp)
 8007580:	3500da26 	beq	r6,r20,80078ec <_malloc_r+0x6fc>
 8007584:	b9000017 	ldw	r4,0(r23)
 8007588:	00bfffc4 	movi	r2,-1
 800758c:	2080e426 	beq	r4,r2,8007920 <_malloc_r+0x730>
 8007590:	a185c83a 	sub	r2,r20,r6
 8007594:	1885883a 	add	r2,r3,r2
 8007598:	e0800015 	stw	r2,0(fp)
 800759c:	a0c001cc 	andi	r3,r20,7
 80075a0:	1800b526 	beq	r3,zero,8007878 <_malloc_r+0x688>
 80075a4:	a0e9c83a 	sub	r20,r20,r3
 80075a8:	00840204 	movi	r2,4104
 80075ac:	a5000204 	addi	r20,r20,8
 80075b0:	10c7c83a 	sub	r3,r2,r3
 80075b4:	a545883a 	add	r2,r20,r21
 80075b8:	1083ffcc 	andi	r2,r2,4095
 80075bc:	18abc83a 	sub	r21,r3,r2
 80075c0:	9009883a 	mov	r4,r18
 80075c4:	a80b883a 	mov	r5,r21
 80075c8:	80094940 	call	8009494 <_sbrk_r>
 80075cc:	00ffffc4 	movi	r3,-1
 80075d0:	10c0d026 	beq	r2,r3,8007914 <_malloc_r+0x724>
 80075d4:	1507c83a 	sub	r3,r2,r20
 80075d8:	a8c7883a 	add	r3,r21,r3
 80075dc:	18c00054 	ori	r3,r3,1
 80075e0:	e0800017 	ldw	r2,0(fp)
 80075e4:	9d000215 	stw	r20,8(r19)
 80075e8:	a0c00115 	stw	r3,4(r20)
 80075ec:	a887883a 	add	r3,r21,r2
 80075f0:	e0c00015 	stw	r3,0(fp)
 80075f4:	84c00e26 	beq	r16,r19,8007630 <_malloc_r+0x440>
 80075f8:	018003c4 	movi	r6,15
 80075fc:	3580a02e 	bgeu	r6,r22,8007880 <_malloc_r+0x690>
 8007600:	81400117 	ldw	r5,4(r16)
 8007604:	013ffe04 	movi	r4,-8
 8007608:	b0bffd04 	addi	r2,r22,-12
 800760c:	1104703a 	and	r2,r2,r4
 8007610:	2900004c 	andi	r4,r5,1
 8007614:	1108b03a 	or	r4,r2,r4
 8007618:	81000115 	stw	r4,4(r16)
 800761c:	01400144 	movi	r5,5
 8007620:	8089883a 	add	r4,r16,r2
 8007624:	21400115 	stw	r5,4(r4)
 8007628:	21400215 	stw	r5,8(r4)
 800762c:	3080c036 	bltu	r6,r2,8007930 <_malloc_r+0x740>
 8007630:	00820074 	movhi	r2,2049
 8007634:	1094f204 	addi	r2,r2,21448
 8007638:	11000017 	ldw	r4,0(r2)
 800763c:	20c0012e 	bgeu	r4,r3,8007644 <_malloc_r+0x454>
 8007640:	10c00015 	stw	r3,0(r2)
 8007644:	00820074 	movhi	r2,2049
 8007648:	1094f104 	addi	r2,r2,21444
 800764c:	11000017 	ldw	r4,0(r2)
 8007650:	9c000217 	ldw	r16,8(r19)
 8007654:	20c0012e 	bgeu	r4,r3,800765c <_malloc_r+0x46c>
 8007658:	10c00015 	stw	r3,0(r2)
 800765c:	80c00117 	ldw	r3,4(r16)
 8007660:	00bfff04 	movi	r2,-4
 8007664:	1886703a 	and	r3,r3,r2
 8007668:	1c45c83a 	sub	r2,r3,r17
 800766c:	1c400236 	bltu	r3,r17,8007678 <_malloc_r+0x488>
 8007670:	00c003c4 	movi	r3,15
 8007674:	18800416 	blt	r3,r2,8007688 <_malloc_r+0x498>
 8007678:	9009883a 	mov	r4,r18
 800767c:	800f1200 	call	800f120 <__malloc_unlock>
 8007680:	0005883a 	mov	r2,zero
 8007684:	003f0706 	br	80072a4 <__alt_data_end+0xfc0072a4>
 8007688:	88c00054 	ori	r3,r17,1
 800768c:	80c00115 	stw	r3,4(r16)
 8007690:	8463883a 	add	r17,r16,r17
 8007694:	10800054 	ori	r2,r2,1
 8007698:	9c400215 	stw	r17,8(r19)
 800769c:	88800115 	stw	r2,4(r17)
 80076a0:	9009883a 	mov	r4,r18
 80076a4:	800f1200 	call	800f120 <__malloc_unlock>
 80076a8:	80800204 	addi	r2,r16,8
 80076ac:	003efd06 	br	80072a4 <__alt_data_end+0xfc0072a4>
 80076b0:	00800504 	movi	r2,20
 80076b4:	10c0482e 	bgeu	r2,r3,80077d8 <_malloc_r+0x5e8>
 80076b8:	00801504 	movi	r2,84
 80076bc:	10c06836 	bltu	r2,r3,8007860 <_malloc_r+0x670>
 80076c0:	8806d33a 	srli	r3,r17,12
 80076c4:	19c01b84 	addi	r7,r3,110
 80076c8:	39cb883a 	add	r5,r7,r7
 80076cc:	003f0c06 	br	8007300 <__alt_data_end+0xfc007300>
 80076d0:	3804d27a 	srli	r2,r7,9
 80076d4:	01000104 	movi	r4,4
 80076d8:	2080422e 	bgeu	r4,r2,80077e4 <_malloc_r+0x5f4>
 80076dc:	01000504 	movi	r4,20
 80076e0:	20807c36 	bltu	r4,r2,80078d4 <_malloc_r+0x6e4>
 80076e4:	110016c4 	addi	r4,r2,91
 80076e8:	210b883a 	add	r5,r4,r4
 80076ec:	294b883a 	add	r5,r5,r5
 80076f0:	294b883a 	add	r5,r5,r5
 80076f4:	994b883a 	add	r5,r19,r5
 80076f8:	28800217 	ldw	r2,8(r5)
 80076fc:	02020074 	movhi	r8,2049
 8007700:	42089e04 	addi	r8,r8,8824
 8007704:	11406326 	beq	r2,r5,8007894 <_malloc_r+0x6a4>
 8007708:	01bfff04 	movi	r6,-4
 800770c:	11000117 	ldw	r4,4(r2)
 8007710:	2188703a 	and	r4,r4,r6
 8007714:	3900022e 	bgeu	r7,r4,8007720 <_malloc_r+0x530>
 8007718:	10800217 	ldw	r2,8(r2)
 800771c:	28bffb1e 	bne	r5,r2,800770c <__alt_data_end+0xfc00770c>
 8007720:	11800317 	ldw	r6,12(r2)
 8007724:	99000117 	ldw	r4,4(r19)
 8007728:	81800315 	stw	r6,12(r16)
 800772c:	80800215 	stw	r2,8(r16)
 8007730:	34000215 	stw	r16,8(r6)
 8007734:	14000315 	stw	r16,12(r2)
 8007738:	003f2706 	br	80073d8 <__alt_data_end+0xfc0073d8>
 800773c:	88c00054 	ori	r3,r17,1
 8007740:	80c00115 	stw	r3,4(r16)
 8007744:	8463883a 	add	r17,r16,r17
 8007748:	34400515 	stw	r17,20(r6)
 800774c:	34400415 	stw	r17,16(r6)
 8007750:	10c00054 	ori	r3,r2,1
 8007754:	8a400315 	stw	r9,12(r17)
 8007758:	8a400215 	stw	r9,8(r17)
 800775c:	88c00115 	stw	r3,4(r17)
 8007760:	88a3883a 	add	r17,r17,r2
 8007764:	88800015 	stw	r2,0(r17)
 8007768:	9009883a 	mov	r4,r18
 800776c:	800f1200 	call	800f120 <__malloc_unlock>
 8007770:	80800204 	addi	r2,r16,8
 8007774:	003ecb06 	br	80072a4 <__alt_data_end+0xfc0072a4>
 8007778:	31000117 	ldw	r4,4(r6)
 800777c:	003f1606 	br	80073d8 <__alt_data_end+0xfc0073d8>
 8007780:	63000044 	addi	r12,r12,1
 8007784:	608000cc 	andi	r2,r12,3
 8007788:	5ac00204 	addi	r11,r11,8
 800778c:	103f2a1e 	bne	r2,zero,8007438 <__alt_data_end+0xfc007438>
 8007790:	00002106 	br	8007818 <_malloc_r+0x628>
 8007794:	80800204 	addi	r2,r16,8
 8007798:	84000517 	ldw	r16,20(r16)
 800779c:	143eb31e 	bne	r2,r16,800726c <__alt_data_end+0xfc00726c>
 80077a0:	18c00084 	addi	r3,r3,2
 80077a4:	003eec06 	br	8007358 <__alt_data_end+0xfc007358>
 80077a8:	8085883a 	add	r2,r16,r2
 80077ac:	10c00117 	ldw	r3,4(r2)
 80077b0:	81000317 	ldw	r4,12(r16)
 80077b4:	81400217 	ldw	r5,8(r16)
 80077b8:	18c00054 	ori	r3,r3,1
 80077bc:	10c00115 	stw	r3,4(r2)
 80077c0:	29000315 	stw	r4,12(r5)
 80077c4:	21400215 	stw	r5,8(r4)
 80077c8:	9009883a 	mov	r4,r18
 80077cc:	800f1200 	call	800f120 <__malloc_unlock>
 80077d0:	80800204 	addi	r2,r16,8
 80077d4:	003eb306 	br	80072a4 <__alt_data_end+0xfc0072a4>
 80077d8:	19c016c4 	addi	r7,r3,91
 80077dc:	39cb883a 	add	r5,r7,r7
 80077e0:	003ec706 	br	8007300 <__alt_data_end+0xfc007300>
 80077e4:	3804d1ba 	srli	r2,r7,6
 80077e8:	11000e04 	addi	r4,r2,56
 80077ec:	210b883a 	add	r5,r4,r4
 80077f0:	003fbe06 	br	80076ec <__alt_data_end+0xfc0076ec>
 80077f4:	84ff5d26 	beq	r16,r19,800756c <__alt_data_end+0xfc00756c>
 80077f8:	9c000217 	ldw	r16,8(r19)
 80077fc:	00bfff04 	movi	r2,-4
 8007800:	80c00117 	ldw	r3,4(r16)
 8007804:	1886703a 	and	r3,r3,r2
 8007808:	003f9706 	br	8007668 <__alt_data_end+0xfc007668>
 800780c:	52800017 	ldw	r10,0(r10)
 8007810:	18ffffc4 	addi	r3,r3,-1
 8007814:	50805c1e 	bne	r10,r2,8007988 <_malloc_r+0x798>
 8007818:	190000cc 	andi	r4,r3,3
 800781c:	50bffe04 	addi	r2,r10,-8
 8007820:	203ffa1e 	bne	r4,zero,800780c <__alt_data_end+0xfc00780c>
 8007824:	98800117 	ldw	r2,4(r19)
 8007828:	0146303a 	nor	r3,zero,r5
 800782c:	1884703a 	and	r2,r3,r2
 8007830:	98800115 	stw	r2,4(r19)
 8007834:	294b883a 	add	r5,r5,r5
 8007838:	117f2e36 	bltu	r2,r5,80074f4 <__alt_data_end+0xfc0074f4>
 800783c:	283f2d26 	beq	r5,zero,80074f4 <__alt_data_end+0xfc0074f4>
 8007840:	1146703a 	and	r3,r2,r5
 8007844:	1800521e 	bne	r3,zero,8007990 <_malloc_r+0x7a0>
 8007848:	6007883a 	mov	r3,r12
 800784c:	294b883a 	add	r5,r5,r5
 8007850:	1148703a 	and	r4,r2,r5
 8007854:	18c00104 	addi	r3,r3,4
 8007858:	203ffc26 	beq	r4,zero,800784c <__alt_data_end+0xfc00784c>
 800785c:	003ef006 	br	8007420 <__alt_data_end+0xfc007420>
 8007860:	00805504 	movi	r2,340
 8007864:	10c01336 	bltu	r2,r3,80078b4 <_malloc_r+0x6c4>
 8007868:	8806d3fa 	srli	r3,r17,15
 800786c:	19c01dc4 	addi	r7,r3,119
 8007870:	39cb883a 	add	r5,r7,r7
 8007874:	003ea206 	br	8007300 <__alt_data_end+0xfc007300>
 8007878:	00c40004 	movi	r3,4096
 800787c:	003f4d06 	br	80075b4 <__alt_data_end+0xfc0075b4>
 8007880:	00800044 	movi	r2,1
 8007884:	a0800115 	stw	r2,4(r20)
 8007888:	a021883a 	mov	r16,r20
 800788c:	0007883a 	mov	r3,zero
 8007890:	003f7506 	br	8007668 <__alt_data_end+0xfc007668>
 8007894:	200bd0ba 	srai	r5,r4,2
 8007898:	01800044 	movi	r6,1
 800789c:	41000117 	ldw	r4,4(r8)
 80078a0:	314a983a 	sll	r5,r6,r5
 80078a4:	100d883a 	mov	r6,r2
 80078a8:	2908b03a 	or	r4,r5,r4
 80078ac:	41000115 	stw	r4,4(r8)
 80078b0:	003f9d06 	br	8007728 <__alt_data_end+0xfc007728>
 80078b4:	00815504 	movi	r2,1364
 80078b8:	10c01336 	bltu	r2,r3,8007908 <_malloc_r+0x718>
 80078bc:	8806d4ba 	srli	r3,r17,18
 80078c0:	19c01f04 	addi	r7,r3,124
 80078c4:	39cb883a 	add	r5,r7,r7
 80078c8:	003e8d06 	br	8007300 <__alt_data_end+0xfc007300>
 80078cc:	ad400404 	addi	r21,r21,16
 80078d0:	003f1d06 	br	8007548 <__alt_data_end+0xfc007548>
 80078d4:	01001504 	movi	r4,84
 80078d8:	20801c36 	bltu	r4,r2,800794c <_malloc_r+0x75c>
 80078dc:	3804d33a 	srli	r2,r7,12
 80078e0:	11001b84 	addi	r4,r2,110
 80078e4:	210b883a 	add	r5,r4,r4
 80078e8:	003f8006 	br	80076ec <__alt_data_end+0xfc0076ec>
 80078ec:	3083ffcc 	andi	r2,r6,4095
 80078f0:	103f241e 	bne	r2,zero,8007584 <__alt_data_end+0xfc007584>
 80078f4:	99000217 	ldw	r4,8(r19)
 80078f8:	ad85883a 	add	r2,r21,r22
 80078fc:	10800054 	ori	r2,r2,1
 8007900:	20800115 	stw	r2,4(r4)
 8007904:	003f4a06 	br	8007630 <__alt_data_end+0xfc007630>
 8007908:	01403f04 	movi	r5,252
 800790c:	01c01f84 	movi	r7,126
 8007910:	003e7b06 	br	8007300 <__alt_data_end+0xfc007300>
 8007914:	00c00044 	movi	r3,1
 8007918:	002b883a 	mov	r21,zero
 800791c:	003f3006 	br	80075e0 <__alt_data_end+0xfc0075e0>
 8007920:	00820074 	movhi	r2,2049
 8007924:	108e2504 	addi	r2,r2,14484
 8007928:	15000015 	stw	r20,0(r2)
 800792c:	003f1b06 	br	800759c <__alt_data_end+0xfc00759c>
 8007930:	9009883a 	mov	r4,r18
 8007934:	81400204 	addi	r5,r16,8
 8007938:	80066540 	call	8006654 <_free_r>
 800793c:	00820074 	movhi	r2,2049
 8007940:	1094fb04 	addi	r2,r2,21484
 8007944:	10c00017 	ldw	r3,0(r2)
 8007948:	003f3906 	br	8007630 <__alt_data_end+0xfc007630>
 800794c:	01005504 	movi	r4,340
 8007950:	20800436 	bltu	r4,r2,8007964 <_malloc_r+0x774>
 8007954:	3804d3fa 	srli	r2,r7,15
 8007958:	11001dc4 	addi	r4,r2,119
 800795c:	210b883a 	add	r5,r4,r4
 8007960:	003f6206 	br	80076ec <__alt_data_end+0xfc0076ec>
 8007964:	01015504 	movi	r4,1364
 8007968:	20800436 	bltu	r4,r2,800797c <_malloc_r+0x78c>
 800796c:	3804d4ba 	srli	r2,r7,18
 8007970:	11001f04 	addi	r4,r2,124
 8007974:	210b883a 	add	r5,r4,r4
 8007978:	003f5c06 	br	80076ec <__alt_data_end+0xfc0076ec>
 800797c:	01403f04 	movi	r5,252
 8007980:	01001f84 	movi	r4,126
 8007984:	003f5906 	br	80076ec <__alt_data_end+0xfc0076ec>
 8007988:	98800117 	ldw	r2,4(r19)
 800798c:	003fa906 	br	8007834 <__alt_data_end+0xfc007834>
 8007990:	6007883a 	mov	r3,r12
 8007994:	003ea206 	br	8007420 <__alt_data_end+0xfc007420>

08007998 <memchr>:
 8007998:	208000cc 	andi	r2,r4,3
 800799c:	280f883a 	mov	r7,r5
 80079a0:	10003526 	beq	r2,zero,8007a78 <memchr+0xe0>
 80079a4:	30bfffc4 	addi	r2,r6,-1
 80079a8:	30001b26 	beq	r6,zero,8007a18 <memchr+0x80>
 80079ac:	21800003 	ldbu	r6,0(r4)
 80079b0:	28c03fcc 	andi	r3,r5,255
 80079b4:	30c01a26 	beq	r6,r3,8007a20 <memchr+0x88>
 80079b8:	180d883a 	mov	r6,r3
 80079bc:	00000406 	br	80079d0 <memchr+0x38>
 80079c0:	10001526 	beq	r2,zero,8007a18 <memchr+0x80>
 80079c4:	20c00003 	ldbu	r3,0(r4)
 80079c8:	10bfffc4 	addi	r2,r2,-1
 80079cc:	19801426 	beq	r3,r6,8007a20 <memchr+0x88>
 80079d0:	21000044 	addi	r4,r4,1
 80079d4:	20c000cc 	andi	r3,r4,3
 80079d8:	183ff91e 	bne	r3,zero,80079c0 <__alt_data_end+0xfc0079c0>
 80079dc:	024000c4 	movi	r9,3
 80079e0:	48801136 	bltu	r9,r2,8007a28 <memchr+0x90>
 80079e4:	10000c26 	beq	r2,zero,8007a18 <memchr+0x80>
 80079e8:	20c00003 	ldbu	r3,0(r4)
 80079ec:	29403fcc 	andi	r5,r5,255
 80079f0:	19400b26 	beq	r3,r5,8007a20 <memchr+0x88>
 80079f4:	20c00044 	addi	r3,r4,1
 80079f8:	2085883a 	add	r2,r4,r2
 80079fc:	39803fcc 	andi	r6,r7,255
 8007a00:	00000306 	br	8007a10 <memchr+0x78>
 8007a04:	18c00044 	addi	r3,r3,1
 8007a08:	197fffc3 	ldbu	r5,-1(r3)
 8007a0c:	29800426 	beq	r5,r6,8007a20 <memchr+0x88>
 8007a10:	1809883a 	mov	r4,r3
 8007a14:	18bffb1e 	bne	r3,r2,8007a04 <__alt_data_end+0xfc007a04>
 8007a18:	0005883a 	mov	r2,zero
 8007a1c:	f800283a 	ret
 8007a20:	2005883a 	mov	r2,r4
 8007a24:	f800283a 	ret
 8007a28:	28c03fcc 	andi	r3,r5,255
 8007a2c:	1810923a 	slli	r8,r3,8
 8007a30:	02ffbff4 	movhi	r11,65279
 8007a34:	02a02074 	movhi	r10,32897
 8007a38:	40c6b03a 	or	r3,r8,r3
 8007a3c:	1810943a 	slli	r8,r3,16
 8007a40:	5affbfc4 	addi	r11,r11,-257
 8007a44:	52a02004 	addi	r10,r10,-32640
 8007a48:	40d0b03a 	or	r8,r8,r3
 8007a4c:	20c00017 	ldw	r3,0(r4)
 8007a50:	40c6f03a 	xor	r3,r8,r3
 8007a54:	1acd883a 	add	r6,r3,r11
 8007a58:	00c6303a 	nor	r3,zero,r3
 8007a5c:	30c6703a 	and	r3,r6,r3
 8007a60:	1a86703a 	and	r3,r3,r10
 8007a64:	183fdf1e 	bne	r3,zero,80079e4 <__alt_data_end+0xfc0079e4>
 8007a68:	10bfff04 	addi	r2,r2,-4
 8007a6c:	21000104 	addi	r4,r4,4
 8007a70:	48bff636 	bltu	r9,r2,8007a4c <__alt_data_end+0xfc007a4c>
 8007a74:	003fdb06 	br	80079e4 <__alt_data_end+0xfc0079e4>
 8007a78:	3005883a 	mov	r2,r6
 8007a7c:	003fd706 	br	80079dc <__alt_data_end+0xfc0079dc>

08007a80 <memcpy>:
 8007a80:	deffff04 	addi	sp,sp,-4
 8007a84:	dc000015 	stw	r16,0(sp)
 8007a88:	00c003c4 	movi	r3,15
 8007a8c:	2005883a 	mov	r2,r4
 8007a90:	1980432e 	bgeu	r3,r6,8007ba0 <memcpy+0x120>
 8007a94:	2146b03a 	or	r3,r4,r5
 8007a98:	18c000cc 	andi	r3,r3,3
 8007a9c:	1800421e 	bne	r3,zero,8007ba8 <memcpy+0x128>
 8007aa0:	343ffc04 	addi	r16,r6,-16
 8007aa4:	8020d13a 	srli	r16,r16,4
 8007aa8:	28c00104 	addi	r3,r5,4
 8007aac:	23400104 	addi	r13,r4,4
 8007ab0:	801e913a 	slli	r15,r16,4
 8007ab4:	2b000204 	addi	r12,r5,8
 8007ab8:	22c00204 	addi	r11,r4,8
 8007abc:	7bc00504 	addi	r15,r15,20
 8007ac0:	2a800304 	addi	r10,r5,12
 8007ac4:	22400304 	addi	r9,r4,12
 8007ac8:	2bdf883a 	add	r15,r5,r15
 8007acc:	2811883a 	mov	r8,r5
 8007ad0:	200f883a 	mov	r7,r4
 8007ad4:	41000017 	ldw	r4,0(r8)
 8007ad8:	39c00404 	addi	r7,r7,16
 8007adc:	18c00404 	addi	r3,r3,16
 8007ae0:	393ffc15 	stw	r4,-16(r7)
 8007ae4:	1bbffc17 	ldw	r14,-16(r3)
 8007ae8:	6b400404 	addi	r13,r13,16
 8007aec:	5ac00404 	addi	r11,r11,16
 8007af0:	6bbffc15 	stw	r14,-16(r13)
 8007af4:	63800017 	ldw	r14,0(r12)
 8007af8:	4a400404 	addi	r9,r9,16
 8007afc:	42000404 	addi	r8,r8,16
 8007b00:	5bbffc15 	stw	r14,-16(r11)
 8007b04:	53800017 	ldw	r14,0(r10)
 8007b08:	63000404 	addi	r12,r12,16
 8007b0c:	52800404 	addi	r10,r10,16
 8007b10:	4bbffc15 	stw	r14,-16(r9)
 8007b14:	1bffef1e 	bne	r3,r15,8007ad4 <__alt_data_end+0xfc007ad4>
 8007b18:	81c00044 	addi	r7,r16,1
 8007b1c:	380e913a 	slli	r7,r7,4
 8007b20:	310003cc 	andi	r4,r6,15
 8007b24:	02c000c4 	movi	r11,3
 8007b28:	11c7883a 	add	r3,r2,r7
 8007b2c:	29cb883a 	add	r5,r5,r7
 8007b30:	59001f2e 	bgeu	r11,r4,8007bb0 <memcpy+0x130>
 8007b34:	1813883a 	mov	r9,r3
 8007b38:	2811883a 	mov	r8,r5
 8007b3c:	200f883a 	mov	r7,r4
 8007b40:	42800017 	ldw	r10,0(r8)
 8007b44:	4a400104 	addi	r9,r9,4
 8007b48:	39ffff04 	addi	r7,r7,-4
 8007b4c:	4abfff15 	stw	r10,-4(r9)
 8007b50:	42000104 	addi	r8,r8,4
 8007b54:	59fffa36 	bltu	r11,r7,8007b40 <__alt_data_end+0xfc007b40>
 8007b58:	213fff04 	addi	r4,r4,-4
 8007b5c:	2008d0ba 	srli	r4,r4,2
 8007b60:	318000cc 	andi	r6,r6,3
 8007b64:	21000044 	addi	r4,r4,1
 8007b68:	2109883a 	add	r4,r4,r4
 8007b6c:	2109883a 	add	r4,r4,r4
 8007b70:	1907883a 	add	r3,r3,r4
 8007b74:	290b883a 	add	r5,r5,r4
 8007b78:	30000626 	beq	r6,zero,8007b94 <memcpy+0x114>
 8007b7c:	198d883a 	add	r6,r3,r6
 8007b80:	29c00003 	ldbu	r7,0(r5)
 8007b84:	18c00044 	addi	r3,r3,1
 8007b88:	29400044 	addi	r5,r5,1
 8007b8c:	19ffffc5 	stb	r7,-1(r3)
 8007b90:	19bffb1e 	bne	r3,r6,8007b80 <__alt_data_end+0xfc007b80>
 8007b94:	dc000017 	ldw	r16,0(sp)
 8007b98:	dec00104 	addi	sp,sp,4
 8007b9c:	f800283a 	ret
 8007ba0:	2007883a 	mov	r3,r4
 8007ba4:	003ff406 	br	8007b78 <__alt_data_end+0xfc007b78>
 8007ba8:	2007883a 	mov	r3,r4
 8007bac:	003ff306 	br	8007b7c <__alt_data_end+0xfc007b7c>
 8007bb0:	200d883a 	mov	r6,r4
 8007bb4:	003ff006 	br	8007b78 <__alt_data_end+0xfc007b78>

08007bb8 <memmove>:
 8007bb8:	2005883a 	mov	r2,r4
 8007bbc:	29000b2e 	bgeu	r5,r4,8007bec <memmove+0x34>
 8007bc0:	298f883a 	add	r7,r5,r6
 8007bc4:	21c0092e 	bgeu	r4,r7,8007bec <memmove+0x34>
 8007bc8:	2187883a 	add	r3,r4,r6
 8007bcc:	198bc83a 	sub	r5,r3,r6
 8007bd0:	30004b26 	beq	r6,zero,8007d00 <memmove+0x148>
 8007bd4:	39ffffc4 	addi	r7,r7,-1
 8007bd8:	39000003 	ldbu	r4,0(r7)
 8007bdc:	18ffffc4 	addi	r3,r3,-1
 8007be0:	19000005 	stb	r4,0(r3)
 8007be4:	197ffb1e 	bne	r3,r5,8007bd4 <__alt_data_end+0xfc007bd4>
 8007be8:	f800283a 	ret
 8007bec:	00c003c4 	movi	r3,15
 8007bf0:	1980412e 	bgeu	r3,r6,8007cf8 <memmove+0x140>
 8007bf4:	1146b03a 	or	r3,r2,r5
 8007bf8:	18c000cc 	andi	r3,r3,3
 8007bfc:	1800411e 	bne	r3,zero,8007d04 <memmove+0x14c>
 8007c00:	33fffc04 	addi	r15,r6,-16
 8007c04:	781ed13a 	srli	r15,r15,4
 8007c08:	28c00104 	addi	r3,r5,4
 8007c0c:	13400104 	addi	r13,r2,4
 8007c10:	781c913a 	slli	r14,r15,4
 8007c14:	2b000204 	addi	r12,r5,8
 8007c18:	12c00204 	addi	r11,r2,8
 8007c1c:	73800504 	addi	r14,r14,20
 8007c20:	2a800304 	addi	r10,r5,12
 8007c24:	12400304 	addi	r9,r2,12
 8007c28:	2b9d883a 	add	r14,r5,r14
 8007c2c:	2811883a 	mov	r8,r5
 8007c30:	100f883a 	mov	r7,r2
 8007c34:	41000017 	ldw	r4,0(r8)
 8007c38:	39c00404 	addi	r7,r7,16
 8007c3c:	18c00404 	addi	r3,r3,16
 8007c40:	393ffc15 	stw	r4,-16(r7)
 8007c44:	193ffc17 	ldw	r4,-16(r3)
 8007c48:	6b400404 	addi	r13,r13,16
 8007c4c:	5ac00404 	addi	r11,r11,16
 8007c50:	693ffc15 	stw	r4,-16(r13)
 8007c54:	61000017 	ldw	r4,0(r12)
 8007c58:	4a400404 	addi	r9,r9,16
 8007c5c:	42000404 	addi	r8,r8,16
 8007c60:	593ffc15 	stw	r4,-16(r11)
 8007c64:	51000017 	ldw	r4,0(r10)
 8007c68:	63000404 	addi	r12,r12,16
 8007c6c:	52800404 	addi	r10,r10,16
 8007c70:	493ffc15 	stw	r4,-16(r9)
 8007c74:	1bbfef1e 	bne	r3,r14,8007c34 <__alt_data_end+0xfc007c34>
 8007c78:	79000044 	addi	r4,r15,1
 8007c7c:	2008913a 	slli	r4,r4,4
 8007c80:	328003cc 	andi	r10,r6,15
 8007c84:	02c000c4 	movi	r11,3
 8007c88:	1107883a 	add	r3,r2,r4
 8007c8c:	290b883a 	add	r5,r5,r4
 8007c90:	5a801e2e 	bgeu	r11,r10,8007d0c <memmove+0x154>
 8007c94:	1813883a 	mov	r9,r3
 8007c98:	2811883a 	mov	r8,r5
 8007c9c:	500f883a 	mov	r7,r10
 8007ca0:	41000017 	ldw	r4,0(r8)
 8007ca4:	4a400104 	addi	r9,r9,4
 8007ca8:	39ffff04 	addi	r7,r7,-4
 8007cac:	493fff15 	stw	r4,-4(r9)
 8007cb0:	42000104 	addi	r8,r8,4
 8007cb4:	59fffa36 	bltu	r11,r7,8007ca0 <__alt_data_end+0xfc007ca0>
 8007cb8:	513fff04 	addi	r4,r10,-4
 8007cbc:	2008d0ba 	srli	r4,r4,2
 8007cc0:	318000cc 	andi	r6,r6,3
 8007cc4:	21000044 	addi	r4,r4,1
 8007cc8:	2109883a 	add	r4,r4,r4
 8007ccc:	2109883a 	add	r4,r4,r4
 8007cd0:	1907883a 	add	r3,r3,r4
 8007cd4:	290b883a 	add	r5,r5,r4
 8007cd8:	30000926 	beq	r6,zero,8007d00 <memmove+0x148>
 8007cdc:	198d883a 	add	r6,r3,r6
 8007ce0:	29c00003 	ldbu	r7,0(r5)
 8007ce4:	18c00044 	addi	r3,r3,1
 8007ce8:	29400044 	addi	r5,r5,1
 8007cec:	19ffffc5 	stb	r7,-1(r3)
 8007cf0:	19bffb1e 	bne	r3,r6,8007ce0 <__alt_data_end+0xfc007ce0>
 8007cf4:	f800283a 	ret
 8007cf8:	1007883a 	mov	r3,r2
 8007cfc:	003ff606 	br	8007cd8 <__alt_data_end+0xfc007cd8>
 8007d00:	f800283a 	ret
 8007d04:	1007883a 	mov	r3,r2
 8007d08:	003ff406 	br	8007cdc <__alt_data_end+0xfc007cdc>
 8007d0c:	500d883a 	mov	r6,r10
 8007d10:	003ff106 	br	8007cd8 <__alt_data_end+0xfc007cd8>

08007d14 <memset>:
 8007d14:	20c000cc 	andi	r3,r4,3
 8007d18:	2005883a 	mov	r2,r4
 8007d1c:	18004326 	beq	r3,zero,8007e2c <memset+0x118>
 8007d20:	31ffffc4 	addi	r7,r6,-1
 8007d24:	30004026 	beq	r6,zero,8007e28 <memset+0x114>
 8007d28:	2813883a 	mov	r9,r5
 8007d2c:	200d883a 	mov	r6,r4
 8007d30:	2007883a 	mov	r3,r4
 8007d34:	00000406 	br	8007d48 <memset+0x34>
 8007d38:	3a3fffc4 	addi	r8,r7,-1
 8007d3c:	31800044 	addi	r6,r6,1
 8007d40:	38003926 	beq	r7,zero,8007e28 <memset+0x114>
 8007d44:	400f883a 	mov	r7,r8
 8007d48:	18c00044 	addi	r3,r3,1
 8007d4c:	32400005 	stb	r9,0(r6)
 8007d50:	1a0000cc 	andi	r8,r3,3
 8007d54:	403ff81e 	bne	r8,zero,8007d38 <__alt_data_end+0xfc007d38>
 8007d58:	010000c4 	movi	r4,3
 8007d5c:	21c02d2e 	bgeu	r4,r7,8007e14 <memset+0x100>
 8007d60:	29803fcc 	andi	r6,r5,255
 8007d64:	3008923a 	slli	r4,r6,8
 8007d68:	218cb03a 	or	r6,r4,r6
 8007d6c:	3008943a 	slli	r4,r6,16
 8007d70:	218cb03a 	or	r6,r4,r6
 8007d74:	010003c4 	movi	r4,15
 8007d78:	21c0182e 	bgeu	r4,r7,8007ddc <memset+0xc8>
 8007d7c:	3b3ffc04 	addi	r12,r7,-16
 8007d80:	6018d13a 	srli	r12,r12,4
 8007d84:	1a000104 	addi	r8,r3,4
 8007d88:	1ac00204 	addi	r11,r3,8
 8007d8c:	6008913a 	slli	r4,r12,4
 8007d90:	1a800304 	addi	r10,r3,12
 8007d94:	1813883a 	mov	r9,r3
 8007d98:	21000504 	addi	r4,r4,20
 8007d9c:	1909883a 	add	r4,r3,r4
 8007da0:	49800015 	stw	r6,0(r9)
 8007da4:	41800015 	stw	r6,0(r8)
 8007da8:	59800015 	stw	r6,0(r11)
 8007dac:	51800015 	stw	r6,0(r10)
 8007db0:	42000404 	addi	r8,r8,16
 8007db4:	4a400404 	addi	r9,r9,16
 8007db8:	5ac00404 	addi	r11,r11,16
 8007dbc:	52800404 	addi	r10,r10,16
 8007dc0:	413ff71e 	bne	r8,r4,8007da0 <__alt_data_end+0xfc007da0>
 8007dc4:	63000044 	addi	r12,r12,1
 8007dc8:	6018913a 	slli	r12,r12,4
 8007dcc:	39c003cc 	andi	r7,r7,15
 8007dd0:	010000c4 	movi	r4,3
 8007dd4:	1b07883a 	add	r3,r3,r12
 8007dd8:	21c00e2e 	bgeu	r4,r7,8007e14 <memset+0x100>
 8007ddc:	1813883a 	mov	r9,r3
 8007de0:	3811883a 	mov	r8,r7
 8007de4:	010000c4 	movi	r4,3
 8007de8:	49800015 	stw	r6,0(r9)
 8007dec:	423fff04 	addi	r8,r8,-4
 8007df0:	4a400104 	addi	r9,r9,4
 8007df4:	223ffc36 	bltu	r4,r8,8007de8 <__alt_data_end+0xfc007de8>
 8007df8:	393fff04 	addi	r4,r7,-4
 8007dfc:	2008d0ba 	srli	r4,r4,2
 8007e00:	39c000cc 	andi	r7,r7,3
 8007e04:	21000044 	addi	r4,r4,1
 8007e08:	2109883a 	add	r4,r4,r4
 8007e0c:	2109883a 	add	r4,r4,r4
 8007e10:	1907883a 	add	r3,r3,r4
 8007e14:	38000426 	beq	r7,zero,8007e28 <memset+0x114>
 8007e18:	19cf883a 	add	r7,r3,r7
 8007e1c:	19400005 	stb	r5,0(r3)
 8007e20:	18c00044 	addi	r3,r3,1
 8007e24:	19fffd1e 	bne	r3,r7,8007e1c <__alt_data_end+0xfc007e1c>
 8007e28:	f800283a 	ret
 8007e2c:	2007883a 	mov	r3,r4
 8007e30:	300f883a 	mov	r7,r6
 8007e34:	003fc806 	br	8007d58 <__alt_data_end+0xfc007d58>

08007e38 <_Balloc>:
 8007e38:	20801317 	ldw	r2,76(r4)
 8007e3c:	defffc04 	addi	sp,sp,-16
 8007e40:	dc400115 	stw	r17,4(sp)
 8007e44:	dc000015 	stw	r16,0(sp)
 8007e48:	dfc00315 	stw	ra,12(sp)
 8007e4c:	dc800215 	stw	r18,8(sp)
 8007e50:	2023883a 	mov	r17,r4
 8007e54:	2821883a 	mov	r16,r5
 8007e58:	10000f26 	beq	r2,zero,8007e98 <_Balloc+0x60>
 8007e5c:	8407883a 	add	r3,r16,r16
 8007e60:	18c7883a 	add	r3,r3,r3
 8007e64:	10c7883a 	add	r3,r2,r3
 8007e68:	18800017 	ldw	r2,0(r3)
 8007e6c:	10001126 	beq	r2,zero,8007eb4 <_Balloc+0x7c>
 8007e70:	11000017 	ldw	r4,0(r2)
 8007e74:	19000015 	stw	r4,0(r3)
 8007e78:	10000415 	stw	zero,16(r2)
 8007e7c:	10000315 	stw	zero,12(r2)
 8007e80:	dfc00317 	ldw	ra,12(sp)
 8007e84:	dc800217 	ldw	r18,8(sp)
 8007e88:	dc400117 	ldw	r17,4(sp)
 8007e8c:	dc000017 	ldw	r16,0(sp)
 8007e90:	dec00404 	addi	sp,sp,16
 8007e94:	f800283a 	ret
 8007e98:	01400104 	movi	r5,4
 8007e9c:	01800844 	movi	r6,33
 8007ea0:	800acd40 	call	800acd4 <_calloc_r>
 8007ea4:	88801315 	stw	r2,76(r17)
 8007ea8:	103fec1e 	bne	r2,zero,8007e5c <__alt_data_end+0xfc007e5c>
 8007eac:	0005883a 	mov	r2,zero
 8007eb0:	003ff306 	br	8007e80 <__alt_data_end+0xfc007e80>
 8007eb4:	01400044 	movi	r5,1
 8007eb8:	2c24983a 	sll	r18,r5,r16
 8007ebc:	8809883a 	mov	r4,r17
 8007ec0:	91800144 	addi	r6,r18,5
 8007ec4:	318d883a 	add	r6,r6,r6
 8007ec8:	318d883a 	add	r6,r6,r6
 8007ecc:	800acd40 	call	800acd4 <_calloc_r>
 8007ed0:	103ff626 	beq	r2,zero,8007eac <__alt_data_end+0xfc007eac>
 8007ed4:	14000115 	stw	r16,4(r2)
 8007ed8:	14800215 	stw	r18,8(r2)
 8007edc:	003fe606 	br	8007e78 <__alt_data_end+0xfc007e78>

08007ee0 <_Bfree>:
 8007ee0:	28000826 	beq	r5,zero,8007f04 <_Bfree+0x24>
 8007ee4:	28c00117 	ldw	r3,4(r5)
 8007ee8:	20801317 	ldw	r2,76(r4)
 8007eec:	18c7883a 	add	r3,r3,r3
 8007ef0:	18c7883a 	add	r3,r3,r3
 8007ef4:	10c5883a 	add	r2,r2,r3
 8007ef8:	10c00017 	ldw	r3,0(r2)
 8007efc:	28c00015 	stw	r3,0(r5)
 8007f00:	11400015 	stw	r5,0(r2)
 8007f04:	f800283a 	ret

08007f08 <__multadd>:
 8007f08:	defff704 	addi	sp,sp,-36
 8007f0c:	dc800215 	stw	r18,8(sp)
 8007f10:	2c800417 	ldw	r18,16(r5)
 8007f14:	ddc00715 	stw	r23,28(sp)
 8007f18:	dd800615 	stw	r22,24(sp)
 8007f1c:	dd000415 	stw	r20,16(sp)
 8007f20:	dcc00315 	stw	r19,12(sp)
 8007f24:	dc400115 	stw	r17,4(sp)
 8007f28:	dc000015 	stw	r16,0(sp)
 8007f2c:	dfc00815 	stw	ra,32(sp)
 8007f30:	dd400515 	stw	r21,20(sp)
 8007f34:	2827883a 	mov	r19,r5
 8007f38:	2029883a 	mov	r20,r4
 8007f3c:	3023883a 	mov	r17,r6
 8007f40:	3821883a 	mov	r16,r7
 8007f44:	2d800504 	addi	r22,r5,20
 8007f48:	002f883a 	mov	r23,zero
 8007f4c:	b5400017 	ldw	r21,0(r22)
 8007f50:	880b883a 	mov	r5,r17
 8007f54:	bdc00044 	addi	r23,r23,1
 8007f58:	a93fffcc 	andi	r4,r21,65535
 8007f5c:	800c2f80 	call	800c2f8 <__mulsi3>
 8007f60:	1421883a 	add	r16,r2,r16
 8007f64:	a808d43a 	srli	r4,r21,16
 8007f68:	802ad43a 	srli	r21,r16,16
 8007f6c:	880b883a 	mov	r5,r17
 8007f70:	800c2f80 	call	800c2f8 <__mulsi3>
 8007f74:	a88f883a 	add	r7,r21,r2
 8007f78:	3804943a 	slli	r2,r7,16
 8007f7c:	80ffffcc 	andi	r3,r16,65535
 8007f80:	b5800104 	addi	r22,r22,4
 8007f84:	10c7883a 	add	r3,r2,r3
 8007f88:	b0ffff15 	stw	r3,-4(r22)
 8007f8c:	3820d43a 	srli	r16,r7,16
 8007f90:	bcbfee16 	blt	r23,r18,8007f4c <__alt_data_end+0xfc007f4c>
 8007f94:	80000926 	beq	r16,zero,8007fbc <__multadd+0xb4>
 8007f98:	98800217 	ldw	r2,8(r19)
 8007f9c:	9080130e 	bge	r18,r2,8007fec <__multadd+0xe4>
 8007fa0:	90800144 	addi	r2,r18,5
 8007fa4:	1085883a 	add	r2,r2,r2
 8007fa8:	1085883a 	add	r2,r2,r2
 8007fac:	9885883a 	add	r2,r19,r2
 8007fb0:	14000015 	stw	r16,0(r2)
 8007fb4:	94800044 	addi	r18,r18,1
 8007fb8:	9c800415 	stw	r18,16(r19)
 8007fbc:	9805883a 	mov	r2,r19
 8007fc0:	dfc00817 	ldw	ra,32(sp)
 8007fc4:	ddc00717 	ldw	r23,28(sp)
 8007fc8:	dd800617 	ldw	r22,24(sp)
 8007fcc:	dd400517 	ldw	r21,20(sp)
 8007fd0:	dd000417 	ldw	r20,16(sp)
 8007fd4:	dcc00317 	ldw	r19,12(sp)
 8007fd8:	dc800217 	ldw	r18,8(sp)
 8007fdc:	dc400117 	ldw	r17,4(sp)
 8007fe0:	dc000017 	ldw	r16,0(sp)
 8007fe4:	dec00904 	addi	sp,sp,36
 8007fe8:	f800283a 	ret
 8007fec:	99400117 	ldw	r5,4(r19)
 8007ff0:	a009883a 	mov	r4,r20
 8007ff4:	29400044 	addi	r5,r5,1
 8007ff8:	8007e380 	call	8007e38 <_Balloc>
 8007ffc:	99800417 	ldw	r6,16(r19)
 8008000:	99400304 	addi	r5,r19,12
 8008004:	11000304 	addi	r4,r2,12
 8008008:	31800084 	addi	r6,r6,2
 800800c:	318d883a 	add	r6,r6,r6
 8008010:	318d883a 	add	r6,r6,r6
 8008014:	1023883a 	mov	r17,r2
 8008018:	8007a800 	call	8007a80 <memcpy>
 800801c:	99000117 	ldw	r4,4(r19)
 8008020:	a0c01317 	ldw	r3,76(r20)
 8008024:	2109883a 	add	r4,r4,r4
 8008028:	2109883a 	add	r4,r4,r4
 800802c:	1907883a 	add	r3,r3,r4
 8008030:	18800017 	ldw	r2,0(r3)
 8008034:	98800015 	stw	r2,0(r19)
 8008038:	1cc00015 	stw	r19,0(r3)
 800803c:	8827883a 	mov	r19,r17
 8008040:	003fd706 	br	8007fa0 <__alt_data_end+0xfc007fa0>

08008044 <__s2b>:
 8008044:	defff904 	addi	sp,sp,-28
 8008048:	dc400115 	stw	r17,4(sp)
 800804c:	dc000015 	stw	r16,0(sp)
 8008050:	2023883a 	mov	r17,r4
 8008054:	2821883a 	mov	r16,r5
 8008058:	39000204 	addi	r4,r7,8
 800805c:	01400244 	movi	r5,9
 8008060:	dcc00315 	stw	r19,12(sp)
 8008064:	dc800215 	stw	r18,8(sp)
 8008068:	dfc00615 	stw	ra,24(sp)
 800806c:	dd400515 	stw	r21,20(sp)
 8008070:	dd000415 	stw	r20,16(sp)
 8008074:	3825883a 	mov	r18,r7
 8008078:	3027883a 	mov	r19,r6
 800807c:	800c2380 	call	800c238 <__divsi3>
 8008080:	00c00044 	movi	r3,1
 8008084:	000b883a 	mov	r5,zero
 8008088:	1880030e 	bge	r3,r2,8008098 <__s2b+0x54>
 800808c:	18c7883a 	add	r3,r3,r3
 8008090:	29400044 	addi	r5,r5,1
 8008094:	18bffd16 	blt	r3,r2,800808c <__alt_data_end+0xfc00808c>
 8008098:	8809883a 	mov	r4,r17
 800809c:	8007e380 	call	8007e38 <_Balloc>
 80080a0:	d8c00717 	ldw	r3,28(sp)
 80080a4:	10c00515 	stw	r3,20(r2)
 80080a8:	00c00044 	movi	r3,1
 80080ac:	10c00415 	stw	r3,16(r2)
 80080b0:	00c00244 	movi	r3,9
 80080b4:	1cc0210e 	bge	r3,r19,800813c <__s2b+0xf8>
 80080b8:	80eb883a 	add	r21,r16,r3
 80080bc:	a829883a 	mov	r20,r21
 80080c0:	84e1883a 	add	r16,r16,r19
 80080c4:	a1c00007 	ldb	r7,0(r20)
 80080c8:	8809883a 	mov	r4,r17
 80080cc:	a5000044 	addi	r20,r20,1
 80080d0:	100b883a 	mov	r5,r2
 80080d4:	01800284 	movi	r6,10
 80080d8:	39fff404 	addi	r7,r7,-48
 80080dc:	8007f080 	call	8007f08 <__multadd>
 80080e0:	a43ff81e 	bne	r20,r16,80080c4 <__alt_data_end+0xfc0080c4>
 80080e4:	ace1883a 	add	r16,r21,r19
 80080e8:	843ffe04 	addi	r16,r16,-8
 80080ec:	9c800a0e 	bge	r19,r18,8008118 <__s2b+0xd4>
 80080f0:	94e5c83a 	sub	r18,r18,r19
 80080f4:	84a5883a 	add	r18,r16,r18
 80080f8:	81c00007 	ldb	r7,0(r16)
 80080fc:	8809883a 	mov	r4,r17
 8008100:	84000044 	addi	r16,r16,1
 8008104:	100b883a 	mov	r5,r2
 8008108:	01800284 	movi	r6,10
 800810c:	39fff404 	addi	r7,r7,-48
 8008110:	8007f080 	call	8007f08 <__multadd>
 8008114:	84bff81e 	bne	r16,r18,80080f8 <__alt_data_end+0xfc0080f8>
 8008118:	dfc00617 	ldw	ra,24(sp)
 800811c:	dd400517 	ldw	r21,20(sp)
 8008120:	dd000417 	ldw	r20,16(sp)
 8008124:	dcc00317 	ldw	r19,12(sp)
 8008128:	dc800217 	ldw	r18,8(sp)
 800812c:	dc400117 	ldw	r17,4(sp)
 8008130:	dc000017 	ldw	r16,0(sp)
 8008134:	dec00704 	addi	sp,sp,28
 8008138:	f800283a 	ret
 800813c:	84000284 	addi	r16,r16,10
 8008140:	1827883a 	mov	r19,r3
 8008144:	003fe906 	br	80080ec <__alt_data_end+0xfc0080ec>

08008148 <__hi0bits>:
 8008148:	20bfffec 	andhi	r2,r4,65535
 800814c:	1000141e 	bne	r2,zero,80081a0 <__hi0bits+0x58>
 8008150:	2008943a 	slli	r4,r4,16
 8008154:	00800404 	movi	r2,16
 8008158:	20ffc02c 	andhi	r3,r4,65280
 800815c:	1800021e 	bne	r3,zero,8008168 <__hi0bits+0x20>
 8008160:	2008923a 	slli	r4,r4,8
 8008164:	10800204 	addi	r2,r2,8
 8008168:	20fc002c 	andhi	r3,r4,61440
 800816c:	1800021e 	bne	r3,zero,8008178 <__hi0bits+0x30>
 8008170:	2008913a 	slli	r4,r4,4
 8008174:	10800104 	addi	r2,r2,4
 8008178:	20f0002c 	andhi	r3,r4,49152
 800817c:	1800031e 	bne	r3,zero,800818c <__hi0bits+0x44>
 8008180:	2109883a 	add	r4,r4,r4
 8008184:	10800084 	addi	r2,r2,2
 8008188:	2109883a 	add	r4,r4,r4
 800818c:	20000316 	blt	r4,zero,800819c <__hi0bits+0x54>
 8008190:	2110002c 	andhi	r4,r4,16384
 8008194:	2000041e 	bne	r4,zero,80081a8 <__hi0bits+0x60>
 8008198:	00800804 	movi	r2,32
 800819c:	f800283a 	ret
 80081a0:	0005883a 	mov	r2,zero
 80081a4:	003fec06 	br	8008158 <__alt_data_end+0xfc008158>
 80081a8:	10800044 	addi	r2,r2,1
 80081ac:	f800283a 	ret

080081b0 <__lo0bits>:
 80081b0:	20c00017 	ldw	r3,0(r4)
 80081b4:	188001cc 	andi	r2,r3,7
 80081b8:	10000826 	beq	r2,zero,80081dc <__lo0bits+0x2c>
 80081bc:	1880004c 	andi	r2,r3,1
 80081c0:	1000211e 	bne	r2,zero,8008248 <__lo0bits+0x98>
 80081c4:	1880008c 	andi	r2,r3,2
 80081c8:	1000211e 	bne	r2,zero,8008250 <__lo0bits+0xa0>
 80081cc:	1806d0ba 	srli	r3,r3,2
 80081d0:	00800084 	movi	r2,2
 80081d4:	20c00015 	stw	r3,0(r4)
 80081d8:	f800283a 	ret
 80081dc:	18bfffcc 	andi	r2,r3,65535
 80081e0:	10001326 	beq	r2,zero,8008230 <__lo0bits+0x80>
 80081e4:	0005883a 	mov	r2,zero
 80081e8:	19403fcc 	andi	r5,r3,255
 80081ec:	2800021e 	bne	r5,zero,80081f8 <__lo0bits+0x48>
 80081f0:	1806d23a 	srli	r3,r3,8
 80081f4:	10800204 	addi	r2,r2,8
 80081f8:	194003cc 	andi	r5,r3,15
 80081fc:	2800021e 	bne	r5,zero,8008208 <__lo0bits+0x58>
 8008200:	1806d13a 	srli	r3,r3,4
 8008204:	10800104 	addi	r2,r2,4
 8008208:	194000cc 	andi	r5,r3,3
 800820c:	2800021e 	bne	r5,zero,8008218 <__lo0bits+0x68>
 8008210:	1806d0ba 	srli	r3,r3,2
 8008214:	10800084 	addi	r2,r2,2
 8008218:	1940004c 	andi	r5,r3,1
 800821c:	2800081e 	bne	r5,zero,8008240 <__lo0bits+0x90>
 8008220:	1806d07a 	srli	r3,r3,1
 8008224:	1800051e 	bne	r3,zero,800823c <__lo0bits+0x8c>
 8008228:	00800804 	movi	r2,32
 800822c:	f800283a 	ret
 8008230:	1806d43a 	srli	r3,r3,16
 8008234:	00800404 	movi	r2,16
 8008238:	003feb06 	br	80081e8 <__alt_data_end+0xfc0081e8>
 800823c:	10800044 	addi	r2,r2,1
 8008240:	20c00015 	stw	r3,0(r4)
 8008244:	f800283a 	ret
 8008248:	0005883a 	mov	r2,zero
 800824c:	f800283a 	ret
 8008250:	1806d07a 	srli	r3,r3,1
 8008254:	00800044 	movi	r2,1
 8008258:	20c00015 	stw	r3,0(r4)
 800825c:	f800283a 	ret

08008260 <__i2b>:
 8008260:	defffd04 	addi	sp,sp,-12
 8008264:	dc000015 	stw	r16,0(sp)
 8008268:	04000044 	movi	r16,1
 800826c:	dc400115 	stw	r17,4(sp)
 8008270:	2823883a 	mov	r17,r5
 8008274:	800b883a 	mov	r5,r16
 8008278:	dfc00215 	stw	ra,8(sp)
 800827c:	8007e380 	call	8007e38 <_Balloc>
 8008280:	14400515 	stw	r17,20(r2)
 8008284:	14000415 	stw	r16,16(r2)
 8008288:	dfc00217 	ldw	ra,8(sp)
 800828c:	dc400117 	ldw	r17,4(sp)
 8008290:	dc000017 	ldw	r16,0(sp)
 8008294:	dec00304 	addi	sp,sp,12
 8008298:	f800283a 	ret

0800829c <__multiply>:
 800829c:	deffef04 	addi	sp,sp,-68
 80082a0:	dc400815 	stw	r17,32(sp)
 80082a4:	dc000715 	stw	r16,28(sp)
 80082a8:	2c400417 	ldw	r17,16(r5)
 80082ac:	34000417 	ldw	r16,16(r6)
 80082b0:	dd800d15 	stw	r22,52(sp)
 80082b4:	dc800915 	stw	r18,36(sp)
 80082b8:	dfc01015 	stw	ra,64(sp)
 80082bc:	df000f15 	stw	fp,60(sp)
 80082c0:	ddc00e15 	stw	r23,56(sp)
 80082c4:	dd400c15 	stw	r21,48(sp)
 80082c8:	dd000b15 	stw	r20,44(sp)
 80082cc:	dcc00a15 	stw	r19,40(sp)
 80082d0:	2825883a 	mov	r18,r5
 80082d4:	302d883a 	mov	r22,r6
 80082d8:	8c009116 	blt	r17,r16,8008520 <__multiply+0x284>
 80082dc:	8005883a 	mov	r2,r16
 80082e0:	8821883a 	mov	r16,r17
 80082e4:	1023883a 	mov	r17,r2
 80082e8:	90800217 	ldw	r2,8(r18)
 80082ec:	8447883a 	add	r3,r16,r17
 80082f0:	d8c00215 	stw	r3,8(sp)
 80082f4:	91400117 	ldw	r5,4(r18)
 80082f8:	10c0010e 	bge	r2,r3,8008300 <__multiply+0x64>
 80082fc:	29400044 	addi	r5,r5,1
 8008300:	8007e380 	call	8007e38 <_Balloc>
 8008304:	d8c00217 	ldw	r3,8(sp)
 8008308:	d8800615 	stw	r2,24(sp)
 800830c:	18eb883a 	add	r21,r3,r3
 8008310:	ad6b883a 	add	r21,r21,r21
 8008314:	10c00504 	addi	r3,r2,20
 8008318:	1d6b883a 	add	r21,r3,r21
 800831c:	d8c00115 	stw	r3,4(sp)
 8008320:	dd400315 	stw	r21,12(sp)
 8008324:	1805883a 	mov	r2,r3
 8008328:	1d40042e 	bgeu	r3,r21,800833c <__multiply+0xa0>
 800832c:	d8c00317 	ldw	r3,12(sp)
 8008330:	10000015 	stw	zero,0(r2)
 8008334:	10800104 	addi	r2,r2,4
 8008338:	10fffc36 	bltu	r2,r3,800832c <__alt_data_end+0xfc00832c>
 800833c:	8c63883a 	add	r17,r17,r17
 8008340:	b5800504 	addi	r22,r22,20
 8008344:	8c63883a 	add	r17,r17,r17
 8008348:	94800504 	addi	r18,r18,20
 800834c:	8421883a 	add	r16,r16,r16
 8008350:	b463883a 	add	r17,r22,r17
 8008354:	8421883a 	add	r16,r16,r16
 8008358:	dd800015 	stw	r22,0(sp)
 800835c:	dc800415 	stw	r18,16(sp)
 8008360:	dc400515 	stw	r17,20(sp)
 8008364:	9429883a 	add	r20,r18,r16
 8008368:	b4404f2e 	bgeu	r22,r17,80084a8 <__multiply+0x20c>
 800836c:	d8c00017 	ldw	r3,0(sp)
 8008370:	1c800017 	ldw	r18,0(r3)
 8008374:	943fffcc 	andi	r16,r18,65535
 8008378:	80001e26 	beq	r16,zero,80083f4 <__multiply+0x158>
 800837c:	dd800117 	ldw	r22,4(sp)
 8008380:	dd400417 	ldw	r21,16(sp)
 8008384:	0025883a 	mov	r18,zero
 8008388:	adc00017 	ldw	r23,0(r21)
 800838c:	b4c00017 	ldw	r19,0(r22)
 8008390:	800b883a 	mov	r5,r16
 8008394:	b93fffcc 	andi	r4,r23,65535
 8008398:	800c2f80 	call	800c2f8 <__mulsi3>
 800839c:	9c7fffcc 	andi	r17,r19,65535
 80083a0:	8885883a 	add	r2,r17,r2
 80083a4:	b808d43a 	srli	r4,r23,16
 80083a8:	14a3883a 	add	r17,r2,r18
 80083ac:	9826d43a 	srli	r19,r19,16
 80083b0:	8824d43a 	srli	r18,r17,16
 80083b4:	800b883a 	mov	r5,r16
 80083b8:	800c2f80 	call	800c2f8 <__mulsi3>
 80083bc:	9885883a 	add	r2,r19,r2
 80083c0:	14a7883a 	add	r19,r2,r18
 80083c4:	88ffffcc 	andi	r3,r17,65535
 80083c8:	9822943a 	slli	r17,r19,16
 80083cc:	ad400104 	addi	r21,r21,4
 80083d0:	b005883a 	mov	r2,r22
 80083d4:	88c6b03a 	or	r3,r17,r3
 80083d8:	b0c00015 	stw	r3,0(r22)
 80083dc:	9824d43a 	srli	r18,r19,16
 80083e0:	b5800104 	addi	r22,r22,4
 80083e4:	ad3fe836 	bltu	r21,r20,8008388 <__alt_data_end+0xfc008388>
 80083e8:	d8c00017 	ldw	r3,0(sp)
 80083ec:	14800115 	stw	r18,4(r2)
 80083f0:	1c800017 	ldw	r18,0(r3)
 80083f4:	9024d43a 	srli	r18,r18,16
 80083f8:	90002226 	beq	r18,zero,8008484 <__multiply+0x1e8>
 80083fc:	d8c00117 	ldw	r3,4(sp)
 8008400:	dd800417 	ldw	r22,16(sp)
 8008404:	002f883a 	mov	r23,zero
 8008408:	1f000017 	ldw	fp,0(r3)
 800840c:	1823883a 	mov	r17,r3
 8008410:	182b883a 	mov	r21,r3
 8008414:	e021883a 	mov	r16,fp
 8008418:	00000106 	br	8008420 <__multiply+0x184>
 800841c:	982b883a 	mov	r21,r19
 8008420:	b100000b 	ldhu	r4,0(r22)
 8008424:	8020d43a 	srli	r16,r16,16
 8008428:	900b883a 	mov	r5,r18
 800842c:	800c2f80 	call	800c2f8 <__mulsi3>
 8008430:	1405883a 	add	r2,r2,r16
 8008434:	15ef883a 	add	r23,r2,r23
 8008438:	b804943a 	slli	r2,r23,16
 800843c:	e0ffffcc 	andi	r3,fp,65535
 8008440:	8c400104 	addi	r17,r17,4
 8008444:	10c6b03a 	or	r3,r2,r3
 8008448:	88ffff15 	stw	r3,-4(r17)
 800844c:	b5800104 	addi	r22,r22,4
 8008450:	b13fff17 	ldw	r4,-4(r22)
 8008454:	acc00104 	addi	r19,r21,4
 8008458:	900b883a 	mov	r5,r18
 800845c:	2008d43a 	srli	r4,r4,16
 8008460:	9c000017 	ldw	r16,0(r19)
 8008464:	800c2f80 	call	800c2f8 <__mulsi3>
 8008468:	b806d43a 	srli	r3,r23,16
 800846c:	813fffcc 	andi	r4,r16,65535
 8008470:	1105883a 	add	r2,r2,r4
 8008474:	10f9883a 	add	fp,r2,r3
 8008478:	e02ed43a 	srli	r23,fp,16
 800847c:	b53fe736 	bltu	r22,r20,800841c <__alt_data_end+0xfc00841c>
 8008480:	af000115 	stw	fp,4(r21)
 8008484:	d8c00017 	ldw	r3,0(sp)
 8008488:	d9000517 	ldw	r4,20(sp)
 800848c:	18c00104 	addi	r3,r3,4
 8008490:	d8c00015 	stw	r3,0(sp)
 8008494:	d8c00117 	ldw	r3,4(sp)
 8008498:	18c00104 	addi	r3,r3,4
 800849c:	d8c00115 	stw	r3,4(sp)
 80084a0:	d8c00017 	ldw	r3,0(sp)
 80084a4:	193fb136 	bltu	r3,r4,800836c <__alt_data_end+0xfc00836c>
 80084a8:	d8c00217 	ldw	r3,8(sp)
 80084ac:	00c00c0e 	bge	zero,r3,80084e0 <__multiply+0x244>
 80084b0:	d8c00317 	ldw	r3,12(sp)
 80084b4:	18bfff17 	ldw	r2,-4(r3)
 80084b8:	1d7fff04 	addi	r21,r3,-4
 80084bc:	10000326 	beq	r2,zero,80084cc <__multiply+0x230>
 80084c0:	00000706 	br	80084e0 <__multiply+0x244>
 80084c4:	a8800017 	ldw	r2,0(r21)
 80084c8:	1000051e 	bne	r2,zero,80084e0 <__multiply+0x244>
 80084cc:	d8c00217 	ldw	r3,8(sp)
 80084d0:	ad7fff04 	addi	r21,r21,-4
 80084d4:	18ffffc4 	addi	r3,r3,-1
 80084d8:	d8c00215 	stw	r3,8(sp)
 80084dc:	183ff91e 	bne	r3,zero,80084c4 <__alt_data_end+0xfc0084c4>
 80084e0:	d8c00617 	ldw	r3,24(sp)
 80084e4:	d9000217 	ldw	r4,8(sp)
 80084e8:	1805883a 	mov	r2,r3
 80084ec:	19000415 	stw	r4,16(r3)
 80084f0:	dfc01017 	ldw	ra,64(sp)
 80084f4:	df000f17 	ldw	fp,60(sp)
 80084f8:	ddc00e17 	ldw	r23,56(sp)
 80084fc:	dd800d17 	ldw	r22,52(sp)
 8008500:	dd400c17 	ldw	r21,48(sp)
 8008504:	dd000b17 	ldw	r20,44(sp)
 8008508:	dcc00a17 	ldw	r19,40(sp)
 800850c:	dc800917 	ldw	r18,36(sp)
 8008510:	dc400817 	ldw	r17,32(sp)
 8008514:	dc000717 	ldw	r16,28(sp)
 8008518:	dec01104 	addi	sp,sp,68
 800851c:	f800283a 	ret
 8008520:	3025883a 	mov	r18,r6
 8008524:	282d883a 	mov	r22,r5
 8008528:	003f6f06 	br	80082e8 <__alt_data_end+0xfc0082e8>

0800852c <__pow5mult>:
 800852c:	defffa04 	addi	sp,sp,-24
 8008530:	dcc00315 	stw	r19,12(sp)
 8008534:	dc800215 	stw	r18,8(sp)
 8008538:	dc000015 	stw	r16,0(sp)
 800853c:	dfc00515 	stw	ra,20(sp)
 8008540:	dd000415 	stw	r20,16(sp)
 8008544:	dc400115 	stw	r17,4(sp)
 8008548:	308000cc 	andi	r2,r6,3
 800854c:	3021883a 	mov	r16,r6
 8008550:	2027883a 	mov	r19,r4
 8008554:	2825883a 	mov	r18,r5
 8008558:	10002e1e 	bne	r2,zero,8008614 <__pow5mult+0xe8>
 800855c:	8021d0ba 	srai	r16,r16,2
 8008560:	80001a26 	beq	r16,zero,80085cc <__pow5mult+0xa0>
 8008564:	9c401217 	ldw	r17,72(r19)
 8008568:	8800061e 	bne	r17,zero,8008584 <__pow5mult+0x58>
 800856c:	00003406 	br	8008640 <__pow5mult+0x114>
 8008570:	8021d07a 	srai	r16,r16,1
 8008574:	80001526 	beq	r16,zero,80085cc <__pow5mult+0xa0>
 8008578:	88800017 	ldw	r2,0(r17)
 800857c:	10001c26 	beq	r2,zero,80085f0 <__pow5mult+0xc4>
 8008580:	1023883a 	mov	r17,r2
 8008584:	80c0004c 	andi	r3,r16,1
 8008588:	183ff926 	beq	r3,zero,8008570 <__alt_data_end+0xfc008570>
 800858c:	900b883a 	mov	r5,r18
 8008590:	880d883a 	mov	r6,r17
 8008594:	9809883a 	mov	r4,r19
 8008598:	800829c0 	call	800829c <__multiply>
 800859c:	90001b26 	beq	r18,zero,800860c <__pow5mult+0xe0>
 80085a0:	91c00117 	ldw	r7,4(r18)
 80085a4:	98c01317 	ldw	r3,76(r19)
 80085a8:	8021d07a 	srai	r16,r16,1
 80085ac:	39cf883a 	add	r7,r7,r7
 80085b0:	39cf883a 	add	r7,r7,r7
 80085b4:	19c7883a 	add	r3,r3,r7
 80085b8:	19000017 	ldw	r4,0(r3)
 80085bc:	91000015 	stw	r4,0(r18)
 80085c0:	1c800015 	stw	r18,0(r3)
 80085c4:	1025883a 	mov	r18,r2
 80085c8:	803feb1e 	bne	r16,zero,8008578 <__alt_data_end+0xfc008578>
 80085cc:	9005883a 	mov	r2,r18
 80085d0:	dfc00517 	ldw	ra,20(sp)
 80085d4:	dd000417 	ldw	r20,16(sp)
 80085d8:	dcc00317 	ldw	r19,12(sp)
 80085dc:	dc800217 	ldw	r18,8(sp)
 80085e0:	dc400117 	ldw	r17,4(sp)
 80085e4:	dc000017 	ldw	r16,0(sp)
 80085e8:	dec00604 	addi	sp,sp,24
 80085ec:	f800283a 	ret
 80085f0:	9809883a 	mov	r4,r19
 80085f4:	880b883a 	mov	r5,r17
 80085f8:	880d883a 	mov	r6,r17
 80085fc:	800829c0 	call	800829c <__multiply>
 8008600:	88800015 	stw	r2,0(r17)
 8008604:	10000015 	stw	zero,0(r2)
 8008608:	003fdd06 	br	8008580 <__alt_data_end+0xfc008580>
 800860c:	1025883a 	mov	r18,r2
 8008610:	003fd706 	br	8008570 <__alt_data_end+0xfc008570>
 8008614:	10bfffc4 	addi	r2,r2,-1
 8008618:	1085883a 	add	r2,r2,r2
 800861c:	00c20074 	movhi	r3,2049
 8008620:	18c6d904 	addi	r3,r3,7012
 8008624:	1085883a 	add	r2,r2,r2
 8008628:	1885883a 	add	r2,r3,r2
 800862c:	11800017 	ldw	r6,0(r2)
 8008630:	000f883a 	mov	r7,zero
 8008634:	8007f080 	call	8007f08 <__multadd>
 8008638:	1025883a 	mov	r18,r2
 800863c:	003fc706 	br	800855c <__alt_data_end+0xfc00855c>
 8008640:	05000044 	movi	r20,1
 8008644:	9809883a 	mov	r4,r19
 8008648:	a00b883a 	mov	r5,r20
 800864c:	8007e380 	call	8007e38 <_Balloc>
 8008650:	1023883a 	mov	r17,r2
 8008654:	00809c44 	movi	r2,625
 8008658:	88800515 	stw	r2,20(r17)
 800865c:	8d000415 	stw	r20,16(r17)
 8008660:	9c401215 	stw	r17,72(r19)
 8008664:	88000015 	stw	zero,0(r17)
 8008668:	003fc606 	br	8008584 <__alt_data_end+0xfc008584>

0800866c <__lshift>:
 800866c:	defff904 	addi	sp,sp,-28
 8008670:	dd000415 	stw	r20,16(sp)
 8008674:	dcc00315 	stw	r19,12(sp)
 8008678:	3029d17a 	srai	r20,r6,5
 800867c:	2cc00417 	ldw	r19,16(r5)
 8008680:	28800217 	ldw	r2,8(r5)
 8008684:	dd400515 	stw	r21,20(sp)
 8008688:	a4e7883a 	add	r19,r20,r19
 800868c:	dc800215 	stw	r18,8(sp)
 8008690:	dc400115 	stw	r17,4(sp)
 8008694:	dc000015 	stw	r16,0(sp)
 8008698:	dfc00615 	stw	ra,24(sp)
 800869c:	9c000044 	addi	r16,r19,1
 80086a0:	2823883a 	mov	r17,r5
 80086a4:	302b883a 	mov	r21,r6
 80086a8:	2025883a 	mov	r18,r4
 80086ac:	29400117 	ldw	r5,4(r5)
 80086b0:	1400030e 	bge	r2,r16,80086c0 <__lshift+0x54>
 80086b4:	1085883a 	add	r2,r2,r2
 80086b8:	29400044 	addi	r5,r5,1
 80086bc:	143ffd16 	blt	r2,r16,80086b4 <__alt_data_end+0xfc0086b4>
 80086c0:	9009883a 	mov	r4,r18
 80086c4:	8007e380 	call	8007e38 <_Balloc>
 80086c8:	11c00504 	addi	r7,r2,20
 80086cc:	0500090e 	bge	zero,r20,80086f4 <__lshift+0x88>
 80086d0:	3811883a 	mov	r8,r7
 80086d4:	0007883a 	mov	r3,zero
 80086d8:	40000015 	stw	zero,0(r8)
 80086dc:	18c00044 	addi	r3,r3,1
 80086e0:	42000104 	addi	r8,r8,4
 80086e4:	1d3ffc1e 	bne	r3,r20,80086d8 <__alt_data_end+0xfc0086d8>
 80086e8:	18c7883a 	add	r3,r3,r3
 80086ec:	18c7883a 	add	r3,r3,r3
 80086f0:	38cf883a 	add	r7,r7,r3
 80086f4:	89000417 	ldw	r4,16(r17)
 80086f8:	88c00504 	addi	r3,r17,20
 80086fc:	a98007cc 	andi	r6,r21,31
 8008700:	2109883a 	add	r4,r4,r4
 8008704:	2109883a 	add	r4,r4,r4
 8008708:	1909883a 	add	r4,r3,r4
 800870c:	30002326 	beq	r6,zero,800879c <__lshift+0x130>
 8008710:	01400804 	movi	r5,32
 8008714:	298bc83a 	sub	r5,r5,r6
 8008718:	0013883a 	mov	r9,zero
 800871c:	1a000017 	ldw	r8,0(r3)
 8008720:	3815883a 	mov	r10,r7
 8008724:	39c00104 	addi	r7,r7,4
 8008728:	4190983a 	sll	r8,r8,r6
 800872c:	18c00104 	addi	r3,r3,4
 8008730:	4a10b03a 	or	r8,r9,r8
 8008734:	3a3fff15 	stw	r8,-4(r7)
 8008738:	1a3fff17 	ldw	r8,-4(r3)
 800873c:	4152d83a 	srl	r9,r8,r5
 8008740:	193ff636 	bltu	r3,r4,800871c <__alt_data_end+0xfc00871c>
 8008744:	52400115 	stw	r9,4(r10)
 8008748:	48000126 	beq	r9,zero,8008750 <__lshift+0xe4>
 800874c:	9c000084 	addi	r16,r19,2
 8008750:	89000117 	ldw	r4,4(r17)
 8008754:	90c01317 	ldw	r3,76(r18)
 8008758:	843fffc4 	addi	r16,r16,-1
 800875c:	2109883a 	add	r4,r4,r4
 8008760:	2109883a 	add	r4,r4,r4
 8008764:	1907883a 	add	r3,r3,r4
 8008768:	19000017 	ldw	r4,0(r3)
 800876c:	14000415 	stw	r16,16(r2)
 8008770:	89000015 	stw	r4,0(r17)
 8008774:	1c400015 	stw	r17,0(r3)
 8008778:	dfc00617 	ldw	ra,24(sp)
 800877c:	dd400517 	ldw	r21,20(sp)
 8008780:	dd000417 	ldw	r20,16(sp)
 8008784:	dcc00317 	ldw	r19,12(sp)
 8008788:	dc800217 	ldw	r18,8(sp)
 800878c:	dc400117 	ldw	r17,4(sp)
 8008790:	dc000017 	ldw	r16,0(sp)
 8008794:	dec00704 	addi	sp,sp,28
 8008798:	f800283a 	ret
 800879c:	19400017 	ldw	r5,0(r3)
 80087a0:	39c00104 	addi	r7,r7,4
 80087a4:	18c00104 	addi	r3,r3,4
 80087a8:	397fff15 	stw	r5,-4(r7)
 80087ac:	193ffb36 	bltu	r3,r4,800879c <__alt_data_end+0xfc00879c>
 80087b0:	003fe706 	br	8008750 <__alt_data_end+0xfc008750>

080087b4 <__mcmp>:
 80087b4:	20800417 	ldw	r2,16(r4)
 80087b8:	28c00417 	ldw	r3,16(r5)
 80087bc:	10c5c83a 	sub	r2,r2,r3
 80087c0:	1000111e 	bne	r2,zero,8008808 <__mcmp+0x54>
 80087c4:	18c7883a 	add	r3,r3,r3
 80087c8:	18c7883a 	add	r3,r3,r3
 80087cc:	21000504 	addi	r4,r4,20
 80087d0:	29400504 	addi	r5,r5,20
 80087d4:	20c5883a 	add	r2,r4,r3
 80087d8:	28cb883a 	add	r5,r5,r3
 80087dc:	00000106 	br	80087e4 <__mcmp+0x30>
 80087e0:	20800a2e 	bgeu	r4,r2,800880c <__mcmp+0x58>
 80087e4:	10bfff04 	addi	r2,r2,-4
 80087e8:	297fff04 	addi	r5,r5,-4
 80087ec:	11800017 	ldw	r6,0(r2)
 80087f0:	28c00017 	ldw	r3,0(r5)
 80087f4:	30fffa26 	beq	r6,r3,80087e0 <__alt_data_end+0xfc0087e0>
 80087f8:	30c00236 	bltu	r6,r3,8008804 <__mcmp+0x50>
 80087fc:	00800044 	movi	r2,1
 8008800:	f800283a 	ret
 8008804:	00bfffc4 	movi	r2,-1
 8008808:	f800283a 	ret
 800880c:	0005883a 	mov	r2,zero
 8008810:	f800283a 	ret

08008814 <__mdiff>:
 8008814:	defffb04 	addi	sp,sp,-20
 8008818:	dc000015 	stw	r16,0(sp)
 800881c:	2821883a 	mov	r16,r5
 8008820:	dcc00315 	stw	r19,12(sp)
 8008824:	300b883a 	mov	r5,r6
 8008828:	2027883a 	mov	r19,r4
 800882c:	8009883a 	mov	r4,r16
 8008830:	dc800215 	stw	r18,8(sp)
 8008834:	dfc00415 	stw	ra,16(sp)
 8008838:	dc400115 	stw	r17,4(sp)
 800883c:	3025883a 	mov	r18,r6
 8008840:	80087b40 	call	80087b4 <__mcmp>
 8008844:	10005226 	beq	r2,zero,8008990 <__mdiff+0x17c>
 8008848:	10004c16 	blt	r2,zero,800897c <__mdiff+0x168>
 800884c:	0023883a 	mov	r17,zero
 8008850:	81400117 	ldw	r5,4(r16)
 8008854:	9809883a 	mov	r4,r19
 8008858:	8007e380 	call	8007e38 <_Balloc>
 800885c:	83400417 	ldw	r13,16(r16)
 8008860:	93800417 	ldw	r14,16(r18)
 8008864:	81000504 	addi	r4,r16,20
 8008868:	6b59883a 	add	r12,r13,r13
 800886c:	739d883a 	add	r14,r14,r14
 8008870:	6319883a 	add	r12,r12,r12
 8008874:	91800504 	addi	r6,r18,20
 8008878:	739d883a 	add	r14,r14,r14
 800887c:	14400315 	stw	r17,12(r2)
 8008880:	2319883a 	add	r12,r4,r12
 8008884:	339d883a 	add	r14,r6,r14
 8008888:	12400504 	addi	r9,r2,20
 800888c:	0007883a 	mov	r3,zero
 8008890:	22000017 	ldw	r8,0(r4)
 8008894:	32800017 	ldw	r10,0(r6)
 8008898:	4ac00104 	addi	r11,r9,4
 800889c:	41ffffcc 	andi	r7,r8,65535
 80088a0:	38c7883a 	add	r3,r7,r3
 80088a4:	51ffffcc 	andi	r7,r10,65535
 80088a8:	19cfc83a 	sub	r7,r3,r7
 80088ac:	4010d43a 	srli	r8,r8,16
 80088b0:	5014d43a 	srli	r10,r10,16
 80088b4:	3807d43a 	srai	r3,r7,16
 80088b8:	39ffffcc 	andi	r7,r7,65535
 80088bc:	4291c83a 	sub	r8,r8,r10
 80088c0:	40c7883a 	add	r3,r8,r3
 80088c4:	1810943a 	slli	r8,r3,16
 80088c8:	31800104 	addi	r6,r6,4
 80088cc:	21000104 	addi	r4,r4,4
 80088d0:	41ceb03a 	or	r7,r8,r7
 80088d4:	49c00015 	stw	r7,0(r9)
 80088d8:	1807d43a 	srai	r3,r3,16
 80088dc:	580b883a 	mov	r5,r11
 80088e0:	5813883a 	mov	r9,r11
 80088e4:	33bfea36 	bltu	r6,r14,8008890 <__alt_data_end+0xfc008890>
 80088e8:	2011883a 	mov	r8,r4
 80088ec:	2300152e 	bgeu	r4,r12,8008944 <__mdiff+0x130>
 80088f0:	21400017 	ldw	r5,0(r4)
 80088f4:	4a400104 	addi	r9,r9,4
 80088f8:	21000104 	addi	r4,r4,4
 80088fc:	29ffffcc 	andi	r7,r5,65535
 8008900:	38c7883a 	add	r3,r7,r3
 8008904:	280ad43a 	srli	r5,r5,16
 8008908:	180dd43a 	srai	r6,r3,16
 800890c:	19ffffcc 	andi	r7,r3,65535
 8008910:	3147883a 	add	r3,r6,r5
 8008914:	180a943a 	slli	r5,r3,16
 8008918:	1807d43a 	srai	r3,r3,16
 800891c:	29ceb03a 	or	r7,r5,r7
 8008920:	49ffff15 	stw	r7,-4(r9)
 8008924:	233ff236 	bltu	r4,r12,80088f0 <__alt_data_end+0xfc0088f0>
 8008928:	0206303a 	nor	r3,zero,r8
 800892c:	1b07883a 	add	r3,r3,r12
 8008930:	1806d0ba 	srli	r3,r3,2
 8008934:	18c00044 	addi	r3,r3,1
 8008938:	18c7883a 	add	r3,r3,r3
 800893c:	18c7883a 	add	r3,r3,r3
 8008940:	58cb883a 	add	r5,r11,r3
 8008944:	28ffff04 	addi	r3,r5,-4
 8008948:	3800041e 	bne	r7,zero,800895c <__mdiff+0x148>
 800894c:	18ffff04 	addi	r3,r3,-4
 8008950:	19000017 	ldw	r4,0(r3)
 8008954:	6b7fffc4 	addi	r13,r13,-1
 8008958:	203ffc26 	beq	r4,zero,800894c <__alt_data_end+0xfc00894c>
 800895c:	13400415 	stw	r13,16(r2)
 8008960:	dfc00417 	ldw	ra,16(sp)
 8008964:	dcc00317 	ldw	r19,12(sp)
 8008968:	dc800217 	ldw	r18,8(sp)
 800896c:	dc400117 	ldw	r17,4(sp)
 8008970:	dc000017 	ldw	r16,0(sp)
 8008974:	dec00504 	addi	sp,sp,20
 8008978:	f800283a 	ret
 800897c:	8005883a 	mov	r2,r16
 8008980:	04400044 	movi	r17,1
 8008984:	9021883a 	mov	r16,r18
 8008988:	1025883a 	mov	r18,r2
 800898c:	003fb006 	br	8008850 <__alt_data_end+0xfc008850>
 8008990:	9809883a 	mov	r4,r19
 8008994:	000b883a 	mov	r5,zero
 8008998:	8007e380 	call	8007e38 <_Balloc>
 800899c:	00c00044 	movi	r3,1
 80089a0:	10c00415 	stw	r3,16(r2)
 80089a4:	10000515 	stw	zero,20(r2)
 80089a8:	003fed06 	br	8008960 <__alt_data_end+0xfc008960>

080089ac <__ulp>:
 80089ac:	295ffc2c 	andhi	r5,r5,32752
 80089b0:	00bf3034 	movhi	r2,64704
 80089b4:	2887883a 	add	r3,r5,r2
 80089b8:	00c0020e 	bge	zero,r3,80089c4 <__ulp+0x18>
 80089bc:	0005883a 	mov	r2,zero
 80089c0:	f800283a 	ret
 80089c4:	00c7c83a 	sub	r3,zero,r3
 80089c8:	180bd53a 	srai	r5,r3,20
 80089cc:	008004c4 	movi	r2,19
 80089d0:	11400a0e 	bge	r2,r5,80089fc <__ulp+0x50>
 80089d4:	00800c84 	movi	r2,50
 80089d8:	0007883a 	mov	r3,zero
 80089dc:	11400516 	blt	r2,r5,80089f4 <__ulp+0x48>
 80089e0:	00800cc4 	movi	r2,51
 80089e4:	114bc83a 	sub	r5,r2,r5
 80089e8:	00800044 	movi	r2,1
 80089ec:	1144983a 	sll	r2,r2,r5
 80089f0:	f800283a 	ret
 80089f4:	00800044 	movi	r2,1
 80089f8:	f800283a 	ret
 80089fc:	00800234 	movhi	r2,8
 8008a00:	1147d83a 	sra	r3,r2,r5
 8008a04:	0005883a 	mov	r2,zero
 8008a08:	f800283a 	ret

08008a0c <__b2d>:
 8008a0c:	defffa04 	addi	sp,sp,-24
 8008a10:	dc000015 	stw	r16,0(sp)
 8008a14:	24000417 	ldw	r16,16(r4)
 8008a18:	dc400115 	stw	r17,4(sp)
 8008a1c:	24400504 	addi	r17,r4,20
 8008a20:	8421883a 	add	r16,r16,r16
 8008a24:	8421883a 	add	r16,r16,r16
 8008a28:	8c21883a 	add	r16,r17,r16
 8008a2c:	dc800215 	stw	r18,8(sp)
 8008a30:	84bfff17 	ldw	r18,-4(r16)
 8008a34:	dd000415 	stw	r20,16(sp)
 8008a38:	dcc00315 	stw	r19,12(sp)
 8008a3c:	9009883a 	mov	r4,r18
 8008a40:	2829883a 	mov	r20,r5
 8008a44:	dfc00515 	stw	ra,20(sp)
 8008a48:	80081480 	call	8008148 <__hi0bits>
 8008a4c:	00c00804 	movi	r3,32
 8008a50:	1887c83a 	sub	r3,r3,r2
 8008a54:	a0c00015 	stw	r3,0(r20)
 8008a58:	00c00284 	movi	r3,10
 8008a5c:	84ffff04 	addi	r19,r16,-4
 8008a60:	18801216 	blt	r3,r2,8008aac <__b2d+0xa0>
 8008a64:	014002c4 	movi	r5,11
 8008a68:	2889c83a 	sub	r4,r5,r2
 8008a6c:	9106d83a 	srl	r3,r18,r4
 8008a70:	18cffc34 	orhi	r3,r3,16368
 8008a74:	8cc0282e 	bgeu	r17,r19,8008b18 <__b2d+0x10c>
 8008a78:	817ffe17 	ldw	r5,-8(r16)
 8008a7c:	290ad83a 	srl	r5,r5,r4
 8008a80:	10800544 	addi	r2,r2,21
 8008a84:	9084983a 	sll	r2,r18,r2
 8008a88:	2884b03a 	or	r2,r5,r2
 8008a8c:	dfc00517 	ldw	ra,20(sp)
 8008a90:	dd000417 	ldw	r20,16(sp)
 8008a94:	dcc00317 	ldw	r19,12(sp)
 8008a98:	dc800217 	ldw	r18,8(sp)
 8008a9c:	dc400117 	ldw	r17,4(sp)
 8008aa0:	dc000017 	ldw	r16,0(sp)
 8008aa4:	dec00604 	addi	sp,sp,24
 8008aa8:	f800283a 	ret
 8008aac:	113ffd44 	addi	r4,r2,-11
 8008ab0:	8cc00f2e 	bgeu	r17,r19,8008af0 <__b2d+0xe4>
 8008ab4:	81bffe04 	addi	r6,r16,-8
 8008ab8:	817ffe17 	ldw	r5,-8(r16)
 8008abc:	20001326 	beq	r4,zero,8008b0c <__b2d+0x100>
 8008ac0:	00c00ac4 	movi	r3,43
 8008ac4:	1885c83a 	sub	r2,r3,r2
 8008ac8:	2886d83a 	srl	r3,r5,r2
 8008acc:	9124983a 	sll	r18,r18,r4
 8008ad0:	90e4b03a 	or	r18,r18,r3
 8008ad4:	90cffc34 	orhi	r3,r18,16368
 8008ad8:	8980112e 	bgeu	r17,r6,8008b20 <__b2d+0x114>
 8008adc:	81bffd17 	ldw	r6,-12(r16)
 8008ae0:	308cd83a 	srl	r6,r6,r2
 8008ae4:	2904983a 	sll	r2,r5,r4
 8008ae8:	1184b03a 	or	r2,r2,r6
 8008aec:	003fe706 	br	8008a8c <__alt_data_end+0xfc008a8c>
 8008af0:	20000526 	beq	r4,zero,8008b08 <__b2d+0xfc>
 8008af4:	9124983a 	sll	r18,r18,r4
 8008af8:	000d883a 	mov	r6,zero
 8008afc:	000b883a 	mov	r5,zero
 8008b00:	90cffc34 	orhi	r3,r18,16368
 8008b04:	003ff706 	br	8008ae4 <__alt_data_end+0xfc008ae4>
 8008b08:	000b883a 	mov	r5,zero
 8008b0c:	90cffc34 	orhi	r3,r18,16368
 8008b10:	2805883a 	mov	r2,r5
 8008b14:	003fdd06 	br	8008a8c <__alt_data_end+0xfc008a8c>
 8008b18:	000b883a 	mov	r5,zero
 8008b1c:	003fd806 	br	8008a80 <__alt_data_end+0xfc008a80>
 8008b20:	000d883a 	mov	r6,zero
 8008b24:	003fef06 	br	8008ae4 <__alt_data_end+0xfc008ae4>

08008b28 <__d2b>:
 8008b28:	defff704 	addi	sp,sp,-36
 8008b2c:	dc000215 	stw	r16,8(sp)
 8008b30:	3021883a 	mov	r16,r6
 8008b34:	dc400315 	stw	r17,12(sp)
 8008b38:	8022907a 	slli	r17,r16,1
 8008b3c:	dd400715 	stw	r21,28(sp)
 8008b40:	282b883a 	mov	r21,r5
 8008b44:	01400044 	movi	r5,1
 8008b48:	dd000615 	stw	r20,24(sp)
 8008b4c:	dcc00515 	stw	r19,20(sp)
 8008b50:	dc800415 	stw	r18,16(sp)
 8008b54:	dfc00815 	stw	ra,32(sp)
 8008b58:	3829883a 	mov	r20,r7
 8008b5c:	dc800917 	ldw	r18,36(sp)
 8008b60:	8822d57a 	srli	r17,r17,21
 8008b64:	8007e380 	call	8007e38 <_Balloc>
 8008b68:	1027883a 	mov	r19,r2
 8008b6c:	00800434 	movhi	r2,16
 8008b70:	10bfffc4 	addi	r2,r2,-1
 8008b74:	808c703a 	and	r6,r16,r2
 8008b78:	88000126 	beq	r17,zero,8008b80 <__d2b+0x58>
 8008b7c:	31800434 	orhi	r6,r6,16
 8008b80:	d9800015 	stw	r6,0(sp)
 8008b84:	a8001f26 	beq	r21,zero,8008c04 <__d2b+0xdc>
 8008b88:	d9000104 	addi	r4,sp,4
 8008b8c:	dd400115 	stw	r21,4(sp)
 8008b90:	80081b00 	call	80081b0 <__lo0bits>
 8008b94:	d8c00017 	ldw	r3,0(sp)
 8008b98:	1000291e 	bne	r2,zero,8008c40 <__d2b+0x118>
 8008b9c:	d9000117 	ldw	r4,4(sp)
 8008ba0:	99000515 	stw	r4,20(r19)
 8008ba4:	1820c03a 	cmpne	r16,r3,zero
 8008ba8:	84000044 	addi	r16,r16,1
 8008bac:	98c00615 	stw	r3,24(r19)
 8008bb0:	9c000415 	stw	r16,16(r19)
 8008bb4:	88001b1e 	bne	r17,zero,8008c24 <__d2b+0xfc>
 8008bb8:	800690ba 	slli	r3,r16,2
 8008bbc:	10bef384 	addi	r2,r2,-1074
 8008bc0:	a0800015 	stw	r2,0(r20)
 8008bc4:	98c5883a 	add	r2,r19,r3
 8008bc8:	11000417 	ldw	r4,16(r2)
 8008bcc:	8020917a 	slli	r16,r16,5
 8008bd0:	80081480 	call	8008148 <__hi0bits>
 8008bd4:	8085c83a 	sub	r2,r16,r2
 8008bd8:	90800015 	stw	r2,0(r18)
 8008bdc:	9805883a 	mov	r2,r19
 8008be0:	dfc00817 	ldw	ra,32(sp)
 8008be4:	dd400717 	ldw	r21,28(sp)
 8008be8:	dd000617 	ldw	r20,24(sp)
 8008bec:	dcc00517 	ldw	r19,20(sp)
 8008bf0:	dc800417 	ldw	r18,16(sp)
 8008bf4:	dc400317 	ldw	r17,12(sp)
 8008bf8:	dc000217 	ldw	r16,8(sp)
 8008bfc:	dec00904 	addi	sp,sp,36
 8008c00:	f800283a 	ret
 8008c04:	d809883a 	mov	r4,sp
 8008c08:	80081b00 	call	80081b0 <__lo0bits>
 8008c0c:	d8c00017 	ldw	r3,0(sp)
 8008c10:	04000044 	movi	r16,1
 8008c14:	9c000415 	stw	r16,16(r19)
 8008c18:	98c00515 	stw	r3,20(r19)
 8008c1c:	10800804 	addi	r2,r2,32
 8008c20:	883fe526 	beq	r17,zero,8008bb8 <__alt_data_end+0xfc008bb8>
 8008c24:	8c7ef344 	addi	r17,r17,-1075
 8008c28:	88a3883a 	add	r17,r17,r2
 8008c2c:	00c00d44 	movi	r3,53
 8008c30:	a4400015 	stw	r17,0(r20)
 8008c34:	1885c83a 	sub	r2,r3,r2
 8008c38:	90800015 	stw	r2,0(r18)
 8008c3c:	003fe706 	br	8008bdc <__alt_data_end+0xfc008bdc>
 8008c40:	01000804 	movi	r4,32
 8008c44:	2089c83a 	sub	r4,r4,r2
 8008c48:	1908983a 	sll	r4,r3,r4
 8008c4c:	d9400117 	ldw	r5,4(sp)
 8008c50:	1886d83a 	srl	r3,r3,r2
 8008c54:	2148b03a 	or	r4,r4,r5
 8008c58:	99000515 	stw	r4,20(r19)
 8008c5c:	d8c00015 	stw	r3,0(sp)
 8008c60:	003fd006 	br	8008ba4 <__alt_data_end+0xfc008ba4>

08008c64 <__ratio>:
 8008c64:	defff904 	addi	sp,sp,-28
 8008c68:	dc400315 	stw	r17,12(sp)
 8008c6c:	2823883a 	mov	r17,r5
 8008c70:	d9400104 	addi	r5,sp,4
 8008c74:	dfc00615 	stw	ra,24(sp)
 8008c78:	dcc00515 	stw	r19,20(sp)
 8008c7c:	dc800415 	stw	r18,16(sp)
 8008c80:	2027883a 	mov	r19,r4
 8008c84:	dc000215 	stw	r16,8(sp)
 8008c88:	8008a0c0 	call	8008a0c <__b2d>
 8008c8c:	8809883a 	mov	r4,r17
 8008c90:	d80b883a 	mov	r5,sp
 8008c94:	1025883a 	mov	r18,r2
 8008c98:	1821883a 	mov	r16,r3
 8008c9c:	8008a0c0 	call	8008a0c <__b2d>
 8008ca0:	8a400417 	ldw	r9,16(r17)
 8008ca4:	9a000417 	ldw	r8,16(r19)
 8008ca8:	100d883a 	mov	r6,r2
 8008cac:	d8800017 	ldw	r2,0(sp)
 8008cb0:	4251c83a 	sub	r8,r8,r9
 8008cb4:	4012917a 	slli	r9,r8,5
 8008cb8:	da000117 	ldw	r8,4(sp)
 8008cbc:	4091c83a 	sub	r8,r8,r2
 8008cc0:	4251883a 	add	r8,r8,r9
 8008cc4:	02000d0e 	bge	zero,r8,8008cfc <__ratio+0x98>
 8008cc8:	4010953a 	slli	r8,r8,20
 8008ccc:	4421883a 	add	r16,r8,r16
 8008cd0:	9009883a 	mov	r4,r18
 8008cd4:	800b883a 	mov	r5,r16
 8008cd8:	180f883a 	mov	r7,r3
 8008cdc:	800cbbc0 	call	800cbbc <__divdf3>
 8008ce0:	dfc00617 	ldw	ra,24(sp)
 8008ce4:	dcc00517 	ldw	r19,20(sp)
 8008ce8:	dc800417 	ldw	r18,16(sp)
 8008cec:	dc400317 	ldw	r17,12(sp)
 8008cf0:	dc000217 	ldw	r16,8(sp)
 8008cf4:	dec00704 	addi	sp,sp,28
 8008cf8:	f800283a 	ret
 8008cfc:	4010953a 	slli	r8,r8,20
 8008d00:	1a07c83a 	sub	r3,r3,r8
 8008d04:	003ff206 	br	8008cd0 <__alt_data_end+0xfc008cd0>

08008d08 <_mprec_log10>:
 8008d08:	defffe04 	addi	sp,sp,-8
 8008d0c:	dc000015 	stw	r16,0(sp)
 8008d10:	dfc00115 	stw	ra,4(sp)
 8008d14:	008005c4 	movi	r2,23
 8008d18:	2021883a 	mov	r16,r4
 8008d1c:	11000d0e 	bge	r2,r4,8008d54 <_mprec_log10+0x4c>
 8008d20:	0005883a 	mov	r2,zero
 8008d24:	00cffc34 	movhi	r3,16368
 8008d28:	843fffc4 	addi	r16,r16,-1
 8008d2c:	1009883a 	mov	r4,r2
 8008d30:	180b883a 	mov	r5,r3
 8008d34:	000d883a 	mov	r6,zero
 8008d38:	01d00934 	movhi	r7,16420
 8008d3c:	800d7800 	call	800d780 <__muldf3>
 8008d40:	803ff91e 	bne	r16,zero,8008d28 <__alt_data_end+0xfc008d28>
 8008d44:	dfc00117 	ldw	ra,4(sp)
 8008d48:	dc000017 	ldw	r16,0(sp)
 8008d4c:	dec00204 	addi	sp,sp,8
 8008d50:	f800283a 	ret
 8008d54:	202090fa 	slli	r16,r4,3
 8008d58:	00820074 	movhi	r2,2049
 8008d5c:	1086f004 	addi	r2,r2,7104
 8008d60:	1421883a 	add	r16,r2,r16
 8008d64:	80800017 	ldw	r2,0(r16)
 8008d68:	80c00117 	ldw	r3,4(r16)
 8008d6c:	dfc00117 	ldw	ra,4(sp)
 8008d70:	dc000017 	ldw	r16,0(sp)
 8008d74:	dec00204 	addi	sp,sp,8
 8008d78:	f800283a 	ret

08008d7c <__copybits>:
 8008d7c:	297fffc4 	addi	r5,r5,-1
 8008d80:	280fd17a 	srai	r7,r5,5
 8008d84:	30c00417 	ldw	r3,16(r6)
 8008d88:	30800504 	addi	r2,r6,20
 8008d8c:	39c00044 	addi	r7,r7,1
 8008d90:	18c7883a 	add	r3,r3,r3
 8008d94:	39cf883a 	add	r7,r7,r7
 8008d98:	18c7883a 	add	r3,r3,r3
 8008d9c:	39cf883a 	add	r7,r7,r7
 8008da0:	10c7883a 	add	r3,r2,r3
 8008da4:	21cf883a 	add	r7,r4,r7
 8008da8:	10c00d2e 	bgeu	r2,r3,8008de0 <__copybits+0x64>
 8008dac:	200b883a 	mov	r5,r4
 8008db0:	12000017 	ldw	r8,0(r2)
 8008db4:	29400104 	addi	r5,r5,4
 8008db8:	10800104 	addi	r2,r2,4
 8008dbc:	2a3fff15 	stw	r8,-4(r5)
 8008dc0:	10fffb36 	bltu	r2,r3,8008db0 <__alt_data_end+0xfc008db0>
 8008dc4:	1985c83a 	sub	r2,r3,r6
 8008dc8:	10bffac4 	addi	r2,r2,-21
 8008dcc:	1004d0ba 	srli	r2,r2,2
 8008dd0:	10800044 	addi	r2,r2,1
 8008dd4:	1085883a 	add	r2,r2,r2
 8008dd8:	1085883a 	add	r2,r2,r2
 8008ddc:	2089883a 	add	r4,r4,r2
 8008de0:	21c0032e 	bgeu	r4,r7,8008df0 <__copybits+0x74>
 8008de4:	20000015 	stw	zero,0(r4)
 8008de8:	21000104 	addi	r4,r4,4
 8008dec:	21fffd36 	bltu	r4,r7,8008de4 <__alt_data_end+0xfc008de4>
 8008df0:	f800283a 	ret

08008df4 <__any_on>:
 8008df4:	20c00417 	ldw	r3,16(r4)
 8008df8:	2805d17a 	srai	r2,r5,5
 8008dfc:	21000504 	addi	r4,r4,20
 8008e00:	18800d0e 	bge	r3,r2,8008e38 <__any_on+0x44>
 8008e04:	18c7883a 	add	r3,r3,r3
 8008e08:	18c7883a 	add	r3,r3,r3
 8008e0c:	20c7883a 	add	r3,r4,r3
 8008e10:	20c0192e 	bgeu	r4,r3,8008e78 <__any_on+0x84>
 8008e14:	18bfff17 	ldw	r2,-4(r3)
 8008e18:	18ffff04 	addi	r3,r3,-4
 8008e1c:	1000041e 	bne	r2,zero,8008e30 <__any_on+0x3c>
 8008e20:	20c0142e 	bgeu	r4,r3,8008e74 <__any_on+0x80>
 8008e24:	18ffff04 	addi	r3,r3,-4
 8008e28:	19400017 	ldw	r5,0(r3)
 8008e2c:	283ffc26 	beq	r5,zero,8008e20 <__alt_data_end+0xfc008e20>
 8008e30:	00800044 	movi	r2,1
 8008e34:	f800283a 	ret
 8008e38:	10c00a0e 	bge	r2,r3,8008e64 <__any_on+0x70>
 8008e3c:	1085883a 	add	r2,r2,r2
 8008e40:	1085883a 	add	r2,r2,r2
 8008e44:	294007cc 	andi	r5,r5,31
 8008e48:	2087883a 	add	r3,r4,r2
 8008e4c:	283ff026 	beq	r5,zero,8008e10 <__alt_data_end+0xfc008e10>
 8008e50:	19800017 	ldw	r6,0(r3)
 8008e54:	3144d83a 	srl	r2,r6,r5
 8008e58:	114a983a 	sll	r5,r2,r5
 8008e5c:	29bff41e 	bne	r5,r6,8008e30 <__alt_data_end+0xfc008e30>
 8008e60:	003feb06 	br	8008e10 <__alt_data_end+0xfc008e10>
 8008e64:	1085883a 	add	r2,r2,r2
 8008e68:	1085883a 	add	r2,r2,r2
 8008e6c:	2087883a 	add	r3,r4,r2
 8008e70:	003fe706 	br	8008e10 <__alt_data_end+0xfc008e10>
 8008e74:	f800283a 	ret
 8008e78:	0005883a 	mov	r2,zero
 8008e7c:	f800283a 	ret

08008e80 <_realloc_r>:
 8008e80:	defff604 	addi	sp,sp,-40
 8008e84:	dcc00315 	stw	r19,12(sp)
 8008e88:	dc400115 	stw	r17,4(sp)
 8008e8c:	dfc00915 	stw	ra,36(sp)
 8008e90:	df000815 	stw	fp,32(sp)
 8008e94:	ddc00715 	stw	r23,28(sp)
 8008e98:	dd800615 	stw	r22,24(sp)
 8008e9c:	dd400515 	stw	r21,20(sp)
 8008ea0:	dd000415 	stw	r20,16(sp)
 8008ea4:	dc800215 	stw	r18,8(sp)
 8008ea8:	dc000015 	stw	r16,0(sp)
 8008eac:	2827883a 	mov	r19,r5
 8008eb0:	3023883a 	mov	r17,r6
 8008eb4:	2800bf26 	beq	r5,zero,80091b4 <_realloc_r+0x334>
 8008eb8:	2025883a 	mov	r18,r4
 8008ebc:	800f1000 	call	800f100 <__malloc_lock>
 8008ec0:	98ffff17 	ldw	r3,-4(r19)
 8008ec4:	01bfff04 	movi	r6,-4
 8008ec8:	890002c4 	addi	r4,r17,11
 8008ecc:	01c00584 	movi	r7,22
 8008ed0:	9d7ffe04 	addi	r21,r19,-8
 8008ed4:	19a0703a 	and	r16,r3,r6
 8008ed8:	39003f2e 	bgeu	r7,r4,8008fd8 <_realloc_r+0x158>
 8008edc:	053ffe04 	movi	r20,-8
 8008ee0:	2528703a 	and	r20,r4,r20
 8008ee4:	a00f883a 	mov	r7,r20
 8008ee8:	a0008216 	blt	r20,zero,80090f4 <_realloc_r+0x274>
 8008eec:	a4408136 	bltu	r20,r17,80090f4 <_realloc_r+0x274>
 8008ef0:	81c03c0e 	bge	r16,r7,8008fe4 <_realloc_r+0x164>
 8008ef4:	07020074 	movhi	fp,2049
 8008ef8:	e7089e04 	addi	fp,fp,8824
 8008efc:	e1000217 	ldw	r4,8(fp)
 8008f00:	ac05883a 	add	r2,r21,r16
 8008f04:	2080bf26 	beq	r4,r2,8009204 <_realloc_r+0x384>
 8008f08:	11000117 	ldw	r4,4(r2)
 8008f0c:	023fff84 	movi	r8,-2
 8008f10:	2210703a 	and	r8,r4,r8
 8008f14:	1211883a 	add	r8,r2,r8
 8008f18:	41400117 	ldw	r5,4(r8)
 8008f1c:	2940004c 	andi	r5,r5,1
 8008f20:	28004a1e 	bne	r5,zero,800904c <_realloc_r+0x1cc>
 8008f24:	017fff04 	movi	r5,-4
 8008f28:	2148703a 	and	r4,r4,r5
 8008f2c:	2409883a 	add	r4,r4,r16
 8008f30:	21c0ad0e 	bge	r4,r7,80091e8 <_realloc_r+0x368>
 8008f34:	18c0004c 	andi	r3,r3,1
 8008f38:	18007f1e 	bne	r3,zero,8009138 <_realloc_r+0x2b8>
 8008f3c:	9dfffe17 	ldw	r23,-8(r19)
 8008f40:	adefc83a 	sub	r23,r21,r23
 8008f44:	bd800117 	ldw	r22,4(r23)
 8008f48:	b14a703a 	and	r5,r22,r5
 8008f4c:	216d883a 	add	r22,r4,r5
 8008f50:	b1c04516 	blt	r22,r7,8009068 <_realloc_r+0x1e8>
 8008f54:	10c00317 	ldw	r3,12(r2)
 8008f58:	10800217 	ldw	r2,8(r2)
 8008f5c:	81bfff04 	addi	r6,r16,-4
 8008f60:	bc400204 	addi	r17,r23,8
 8008f64:	10c00315 	stw	r3,12(r2)
 8008f68:	18800215 	stw	r2,8(r3)
 8008f6c:	b9400217 	ldw	r5,8(r23)
 8008f70:	b8c00317 	ldw	r3,12(r23)
 8008f74:	00800904 	movi	r2,36
 8008f78:	28c00315 	stw	r3,12(r5)
 8008f7c:	19400215 	stw	r5,8(r3)
 8008f80:	1180ef36 	bltu	r2,r6,8009340 <_realloc_r+0x4c0>
 8008f84:	008004c4 	movi	r2,19
 8008f88:	1180da2e 	bgeu	r2,r6,80092f4 <_realloc_r+0x474>
 8008f8c:	98800017 	ldw	r2,0(r19)
 8008f90:	b8800215 	stw	r2,8(r23)
 8008f94:	98800117 	ldw	r2,4(r19)
 8008f98:	b8800315 	stw	r2,12(r23)
 8008f9c:	008006c4 	movi	r2,27
 8008fa0:	1180fc2e 	bgeu	r2,r6,8009394 <_realloc_r+0x514>
 8008fa4:	98800217 	ldw	r2,8(r19)
 8008fa8:	b8800415 	stw	r2,16(r23)
 8008fac:	98800317 	ldw	r2,12(r19)
 8008fb0:	b8800515 	stw	r2,20(r23)
 8008fb4:	00800904 	movi	r2,36
 8008fb8:	3080421e 	bne	r6,r2,80090c4 <_realloc_r+0x244>
 8008fbc:	98800417 	ldw	r2,16(r19)
 8008fc0:	9cc00604 	addi	r19,r19,24
 8008fc4:	b8c00804 	addi	r3,r23,32
 8008fc8:	b8800615 	stw	r2,24(r23)
 8008fcc:	98bfff17 	ldw	r2,-4(r19)
 8008fd0:	b8800715 	stw	r2,28(r23)
 8008fd4:	00003d06 	br	80090cc <_realloc_r+0x24c>
 8008fd8:	01c00404 	movi	r7,16
 8008fdc:	3829883a 	mov	r20,r7
 8008fe0:	003fc206 	br	8008eec <__alt_data_end+0xfc008eec>
 8008fe4:	9823883a 	mov	r17,r19
 8008fe8:	850fc83a 	sub	r7,r16,r20
 8008fec:	008003c4 	movi	r2,15
 8008ff0:	18c0004c 	andi	r3,r3,1
 8008ff4:	11c04336 	bltu	r2,r7,8009104 <_realloc_r+0x284>
 8008ff8:	1c06b03a 	or	r3,r3,r16
 8008ffc:	a8c00115 	stw	r3,4(r21)
 8009000:	ac21883a 	add	r16,r21,r16
 8009004:	80c00117 	ldw	r3,4(r16)
 8009008:	18c00054 	ori	r3,r3,1
 800900c:	80c00115 	stw	r3,4(r16)
 8009010:	9009883a 	mov	r4,r18
 8009014:	800f1200 	call	800f120 <__malloc_unlock>
 8009018:	8805883a 	mov	r2,r17
 800901c:	dfc00917 	ldw	ra,36(sp)
 8009020:	df000817 	ldw	fp,32(sp)
 8009024:	ddc00717 	ldw	r23,28(sp)
 8009028:	dd800617 	ldw	r22,24(sp)
 800902c:	dd400517 	ldw	r21,20(sp)
 8009030:	dd000417 	ldw	r20,16(sp)
 8009034:	dcc00317 	ldw	r19,12(sp)
 8009038:	dc800217 	ldw	r18,8(sp)
 800903c:	dc400117 	ldw	r17,4(sp)
 8009040:	dc000017 	ldw	r16,0(sp)
 8009044:	dec00a04 	addi	sp,sp,40
 8009048:	f800283a 	ret
 800904c:	18c0004c 	andi	r3,r3,1
 8009050:	1800391e 	bne	r3,zero,8009138 <_realloc_r+0x2b8>
 8009054:	9dfffe17 	ldw	r23,-8(r19)
 8009058:	00bfff04 	movi	r2,-4
 800905c:	adefc83a 	sub	r23,r21,r23
 8009060:	b9400117 	ldw	r5,4(r23)
 8009064:	288a703a 	and	r5,r5,r2
 8009068:	2c2d883a 	add	r22,r5,r16
 800906c:	b1c03216 	blt	r22,r7,8009138 <_realloc_r+0x2b8>
 8009070:	b8800317 	ldw	r2,12(r23)
 8009074:	b8c00217 	ldw	r3,8(r23)
 8009078:	81bfff04 	addi	r6,r16,-4
 800907c:	01000904 	movi	r4,36
 8009080:	18800315 	stw	r2,12(r3)
 8009084:	10c00215 	stw	r3,8(r2)
 8009088:	bc400204 	addi	r17,r23,8
 800908c:	2180ac36 	bltu	r4,r6,8009340 <_realloc_r+0x4c0>
 8009090:	008004c4 	movi	r2,19
 8009094:	1180972e 	bgeu	r2,r6,80092f4 <_realloc_r+0x474>
 8009098:	98800017 	ldw	r2,0(r19)
 800909c:	b8800215 	stw	r2,8(r23)
 80090a0:	98800117 	ldw	r2,4(r19)
 80090a4:	b8800315 	stw	r2,12(r23)
 80090a8:	008006c4 	movi	r2,27
 80090ac:	1180b92e 	bgeu	r2,r6,8009394 <_realloc_r+0x514>
 80090b0:	98800217 	ldw	r2,8(r19)
 80090b4:	b8800415 	stw	r2,16(r23)
 80090b8:	98800317 	ldw	r2,12(r19)
 80090bc:	b8800515 	stw	r2,20(r23)
 80090c0:	313fbe26 	beq	r6,r4,8008fbc <__alt_data_end+0xfc008fbc>
 80090c4:	b8c00604 	addi	r3,r23,24
 80090c8:	9cc00404 	addi	r19,r19,16
 80090cc:	98800017 	ldw	r2,0(r19)
 80090d0:	b021883a 	mov	r16,r22
 80090d4:	b82b883a 	mov	r21,r23
 80090d8:	18800015 	stw	r2,0(r3)
 80090dc:	98800117 	ldw	r2,4(r19)
 80090e0:	18800115 	stw	r2,4(r3)
 80090e4:	98800217 	ldw	r2,8(r19)
 80090e8:	18800215 	stw	r2,8(r3)
 80090ec:	b8c00117 	ldw	r3,4(r23)
 80090f0:	003fbd06 	br	8008fe8 <__alt_data_end+0xfc008fe8>
 80090f4:	00800304 	movi	r2,12
 80090f8:	90800015 	stw	r2,0(r18)
 80090fc:	0005883a 	mov	r2,zero
 8009100:	003fc606 	br	800901c <__alt_data_end+0xfc00901c>
 8009104:	1d06b03a 	or	r3,r3,r20
 8009108:	ad0b883a 	add	r5,r21,r20
 800910c:	a8c00115 	stw	r3,4(r21)
 8009110:	38800054 	ori	r2,r7,1
 8009114:	28800115 	stw	r2,4(r5)
 8009118:	29cf883a 	add	r7,r5,r7
 800911c:	38800117 	ldw	r2,4(r7)
 8009120:	9009883a 	mov	r4,r18
 8009124:	29400204 	addi	r5,r5,8
 8009128:	10800054 	ori	r2,r2,1
 800912c:	38800115 	stw	r2,4(r7)
 8009130:	80066540 	call	8006654 <_free_r>
 8009134:	003fb606 	br	8009010 <__alt_data_end+0xfc009010>
 8009138:	880b883a 	mov	r5,r17
 800913c:	9009883a 	mov	r4,r18
 8009140:	80071f00 	call	80071f0 <_malloc_r>
 8009144:	1023883a 	mov	r17,r2
 8009148:	1000aa26 	beq	r2,zero,80093f4 <_realloc_r+0x574>
 800914c:	98ffff17 	ldw	r3,-4(r19)
 8009150:	113ffe04 	addi	r4,r2,-8
 8009154:	00bfff84 	movi	r2,-2
 8009158:	1884703a 	and	r2,r3,r2
 800915c:	a885883a 	add	r2,r21,r2
 8009160:	20808626 	beq	r4,r2,800937c <_realloc_r+0x4fc>
 8009164:	81bfff04 	addi	r6,r16,-4
 8009168:	00800904 	movi	r2,36
 800916c:	11807036 	bltu	r2,r6,8009330 <_realloc_r+0x4b0>
 8009170:	00c004c4 	movi	r3,19
 8009174:	19805636 	bltu	r3,r6,80092d0 <_realloc_r+0x450>
 8009178:	8805883a 	mov	r2,r17
 800917c:	9807883a 	mov	r3,r19
 8009180:	19000017 	ldw	r4,0(r3)
 8009184:	11000015 	stw	r4,0(r2)
 8009188:	19000117 	ldw	r4,4(r3)
 800918c:	11000115 	stw	r4,4(r2)
 8009190:	18c00217 	ldw	r3,8(r3)
 8009194:	10c00215 	stw	r3,8(r2)
 8009198:	980b883a 	mov	r5,r19
 800919c:	9009883a 	mov	r4,r18
 80091a0:	80066540 	call	8006654 <_free_r>
 80091a4:	9009883a 	mov	r4,r18
 80091a8:	800f1200 	call	800f120 <__malloc_unlock>
 80091ac:	8805883a 	mov	r2,r17
 80091b0:	003f9a06 	br	800901c <__alt_data_end+0xfc00901c>
 80091b4:	300b883a 	mov	r5,r6
 80091b8:	dfc00917 	ldw	ra,36(sp)
 80091bc:	df000817 	ldw	fp,32(sp)
 80091c0:	ddc00717 	ldw	r23,28(sp)
 80091c4:	dd800617 	ldw	r22,24(sp)
 80091c8:	dd400517 	ldw	r21,20(sp)
 80091cc:	dd000417 	ldw	r20,16(sp)
 80091d0:	dcc00317 	ldw	r19,12(sp)
 80091d4:	dc800217 	ldw	r18,8(sp)
 80091d8:	dc400117 	ldw	r17,4(sp)
 80091dc:	dc000017 	ldw	r16,0(sp)
 80091e0:	dec00a04 	addi	sp,sp,40
 80091e4:	80071f01 	jmpi	80071f0 <_malloc_r>
 80091e8:	11400317 	ldw	r5,12(r2)
 80091ec:	10800217 	ldw	r2,8(r2)
 80091f0:	9823883a 	mov	r17,r19
 80091f4:	2021883a 	mov	r16,r4
 80091f8:	11400315 	stw	r5,12(r2)
 80091fc:	28800215 	stw	r2,8(r5)
 8009200:	003f7906 	br	8008fe8 <__alt_data_end+0xfc008fe8>
 8009204:	21000117 	ldw	r4,4(r4)
 8009208:	00bfff04 	movi	r2,-4
 800920c:	a1800404 	addi	r6,r20,16
 8009210:	2088703a 	and	r4,r4,r2
 8009214:	2409883a 	add	r4,r4,r16
 8009218:	2180380e 	bge	r4,r6,80092fc <_realloc_r+0x47c>
 800921c:	18c0004c 	andi	r3,r3,1
 8009220:	183fc51e 	bne	r3,zero,8009138 <__alt_data_end+0xfc009138>
 8009224:	9dfffe17 	ldw	r23,-8(r19)
 8009228:	adefc83a 	sub	r23,r21,r23
 800922c:	b9400117 	ldw	r5,4(r23)
 8009230:	288a703a 	and	r5,r5,r2
 8009234:	216d883a 	add	r22,r4,r5
 8009238:	b1bf8b16 	blt	r22,r6,8009068 <__alt_data_end+0xfc009068>
 800923c:	b8800317 	ldw	r2,12(r23)
 8009240:	b8c00217 	ldw	r3,8(r23)
 8009244:	81bfff04 	addi	r6,r16,-4
 8009248:	01000904 	movi	r4,36
 800924c:	18800315 	stw	r2,12(r3)
 8009250:	10c00215 	stw	r3,8(r2)
 8009254:	bc400204 	addi	r17,r23,8
 8009258:	21805a36 	bltu	r4,r6,80093c4 <_realloc_r+0x544>
 800925c:	008004c4 	movi	r2,19
 8009260:	1180562e 	bgeu	r2,r6,80093bc <_realloc_r+0x53c>
 8009264:	98800017 	ldw	r2,0(r19)
 8009268:	b8800215 	stw	r2,8(r23)
 800926c:	98800117 	ldw	r2,4(r19)
 8009270:	b8800315 	stw	r2,12(r23)
 8009274:	008006c4 	movi	r2,27
 8009278:	11805636 	bltu	r2,r6,80093d4 <_realloc_r+0x554>
 800927c:	b8800404 	addi	r2,r23,16
 8009280:	9cc00204 	addi	r19,r19,8
 8009284:	98c00017 	ldw	r3,0(r19)
 8009288:	10c00015 	stw	r3,0(r2)
 800928c:	98c00117 	ldw	r3,4(r19)
 8009290:	10c00115 	stw	r3,4(r2)
 8009294:	98c00217 	ldw	r3,8(r19)
 8009298:	10c00215 	stw	r3,8(r2)
 800929c:	bd07883a 	add	r3,r23,r20
 80092a0:	b505c83a 	sub	r2,r22,r20
 80092a4:	e0c00215 	stw	r3,8(fp)
 80092a8:	10800054 	ori	r2,r2,1
 80092ac:	18800115 	stw	r2,4(r3)
 80092b0:	b8800117 	ldw	r2,4(r23)
 80092b4:	9009883a 	mov	r4,r18
 80092b8:	1080004c 	andi	r2,r2,1
 80092bc:	a0a8b03a 	or	r20,r20,r2
 80092c0:	bd000115 	stw	r20,4(r23)
 80092c4:	800f1200 	call	800f120 <__malloc_unlock>
 80092c8:	8805883a 	mov	r2,r17
 80092cc:	003f5306 	br	800901c <__alt_data_end+0xfc00901c>
 80092d0:	98c00017 	ldw	r3,0(r19)
 80092d4:	88c00015 	stw	r3,0(r17)
 80092d8:	98c00117 	ldw	r3,4(r19)
 80092dc:	88c00115 	stw	r3,4(r17)
 80092e0:	00c006c4 	movi	r3,27
 80092e4:	19801d36 	bltu	r3,r6,800935c <_realloc_r+0x4dc>
 80092e8:	88800204 	addi	r2,r17,8
 80092ec:	98c00204 	addi	r3,r19,8
 80092f0:	003fa306 	br	8009180 <__alt_data_end+0xfc009180>
 80092f4:	8807883a 	mov	r3,r17
 80092f8:	003f7406 	br	80090cc <__alt_data_end+0xfc0090cc>
 80092fc:	ad2b883a 	add	r21,r21,r20
 8009300:	2505c83a 	sub	r2,r4,r20
 8009304:	e5400215 	stw	r21,8(fp)
 8009308:	10800054 	ori	r2,r2,1
 800930c:	a8800115 	stw	r2,4(r21)
 8009310:	98bfff17 	ldw	r2,-4(r19)
 8009314:	9009883a 	mov	r4,r18
 8009318:	1080004c 	andi	r2,r2,1
 800931c:	a0a8b03a 	or	r20,r20,r2
 8009320:	9d3fff15 	stw	r20,-4(r19)
 8009324:	800f1200 	call	800f120 <__malloc_unlock>
 8009328:	9805883a 	mov	r2,r19
 800932c:	003f3b06 	br	800901c <__alt_data_end+0xfc00901c>
 8009330:	8809883a 	mov	r4,r17
 8009334:	980b883a 	mov	r5,r19
 8009338:	8007bb80 	call	8007bb8 <memmove>
 800933c:	003f9606 	br	8009198 <__alt_data_end+0xfc009198>
 8009340:	8809883a 	mov	r4,r17
 8009344:	980b883a 	mov	r5,r19
 8009348:	8007bb80 	call	8007bb8 <memmove>
 800934c:	b8c00117 	ldw	r3,4(r23)
 8009350:	b021883a 	mov	r16,r22
 8009354:	b82b883a 	mov	r21,r23
 8009358:	003f2306 	br	8008fe8 <__alt_data_end+0xfc008fe8>
 800935c:	98c00217 	ldw	r3,8(r19)
 8009360:	88c00215 	stw	r3,8(r17)
 8009364:	98c00317 	ldw	r3,12(r19)
 8009368:	88c00315 	stw	r3,12(r17)
 800936c:	30800c26 	beq	r6,r2,80093a0 <_realloc_r+0x520>
 8009370:	88800404 	addi	r2,r17,16
 8009374:	98c00404 	addi	r3,r19,16
 8009378:	003f8106 	br	8009180 <__alt_data_end+0xfc009180>
 800937c:	893fff17 	ldw	r4,-4(r17)
 8009380:	00bfff04 	movi	r2,-4
 8009384:	9823883a 	mov	r17,r19
 8009388:	2084703a 	and	r2,r4,r2
 800938c:	80a1883a 	add	r16,r16,r2
 8009390:	003f1506 	br	8008fe8 <__alt_data_end+0xfc008fe8>
 8009394:	b8c00404 	addi	r3,r23,16
 8009398:	9cc00204 	addi	r19,r19,8
 800939c:	003f4b06 	br	80090cc <__alt_data_end+0xfc0090cc>
 80093a0:	99000417 	ldw	r4,16(r19)
 80093a4:	88800604 	addi	r2,r17,24
 80093a8:	98c00604 	addi	r3,r19,24
 80093ac:	89000415 	stw	r4,16(r17)
 80093b0:	99000517 	ldw	r4,20(r19)
 80093b4:	89000515 	stw	r4,20(r17)
 80093b8:	003f7106 	br	8009180 <__alt_data_end+0xfc009180>
 80093bc:	8805883a 	mov	r2,r17
 80093c0:	003fb006 	br	8009284 <__alt_data_end+0xfc009284>
 80093c4:	8809883a 	mov	r4,r17
 80093c8:	980b883a 	mov	r5,r19
 80093cc:	8007bb80 	call	8007bb8 <memmove>
 80093d0:	003fb206 	br	800929c <__alt_data_end+0xfc00929c>
 80093d4:	98800217 	ldw	r2,8(r19)
 80093d8:	b8800415 	stw	r2,16(r23)
 80093dc:	98800317 	ldw	r2,12(r19)
 80093e0:	b8800515 	stw	r2,20(r23)
 80093e4:	31000726 	beq	r6,r4,8009404 <_realloc_r+0x584>
 80093e8:	b8800604 	addi	r2,r23,24
 80093ec:	9cc00404 	addi	r19,r19,16
 80093f0:	003fa406 	br	8009284 <__alt_data_end+0xfc009284>
 80093f4:	9009883a 	mov	r4,r18
 80093f8:	800f1200 	call	800f120 <__malloc_unlock>
 80093fc:	0005883a 	mov	r2,zero
 8009400:	003f0606 	br	800901c <__alt_data_end+0xfc00901c>
 8009404:	98c00417 	ldw	r3,16(r19)
 8009408:	9cc00604 	addi	r19,r19,24
 800940c:	b8800804 	addi	r2,r23,32
 8009410:	b8c00615 	stw	r3,24(r23)
 8009414:	98ffff17 	ldw	r3,-4(r19)
 8009418:	b8c00715 	stw	r3,28(r23)
 800941c:	003f9906 	br	8009284 <__alt_data_end+0xfc009284>

08009420 <__fpclassifyd>:
 8009420:	00a00034 	movhi	r2,32768
 8009424:	10bfffc4 	addi	r2,r2,-1
 8009428:	2884703a 	and	r2,r5,r2
 800942c:	10000726 	beq	r2,zero,800944c <__fpclassifyd+0x2c>
 8009430:	00fffc34 	movhi	r3,65520
 8009434:	019ff834 	movhi	r6,32736
 8009438:	28c7883a 	add	r3,r5,r3
 800943c:	31bfffc4 	addi	r6,r6,-1
 8009440:	30c00536 	bltu	r6,r3,8009458 <__fpclassifyd+0x38>
 8009444:	00800104 	movi	r2,4
 8009448:	f800283a 	ret
 800944c:	2000021e 	bne	r4,zero,8009458 <__fpclassifyd+0x38>
 8009450:	00800084 	movi	r2,2
 8009454:	f800283a 	ret
 8009458:	00dffc34 	movhi	r3,32752
 800945c:	019ff834 	movhi	r6,32736
 8009460:	28cb883a 	add	r5,r5,r3
 8009464:	31bfffc4 	addi	r6,r6,-1
 8009468:	317ff62e 	bgeu	r6,r5,8009444 <__alt_data_end+0xfc009444>
 800946c:	01400434 	movhi	r5,16
 8009470:	297fffc4 	addi	r5,r5,-1
 8009474:	28800236 	bltu	r5,r2,8009480 <__fpclassifyd+0x60>
 8009478:	008000c4 	movi	r2,3
 800947c:	f800283a 	ret
 8009480:	10c00226 	beq	r2,r3,800948c <__fpclassifyd+0x6c>
 8009484:	0005883a 	mov	r2,zero
 8009488:	f800283a 	ret
 800948c:	2005003a 	cmpeq	r2,r4,zero
 8009490:	f800283a 	ret

08009494 <_sbrk_r>:
 8009494:	defffd04 	addi	sp,sp,-12
 8009498:	dc000015 	stw	r16,0(sp)
 800949c:	04020074 	movhi	r16,2049
 80094a0:	dc400115 	stw	r17,4(sp)
 80094a4:	8414f404 	addi	r16,r16,21456
 80094a8:	2023883a 	mov	r17,r4
 80094ac:	2809883a 	mov	r4,r5
 80094b0:	dfc00215 	stw	ra,8(sp)
 80094b4:	80000015 	stw	zero,0(r16)
 80094b8:	800f3140 	call	800f314 <sbrk>
 80094bc:	00ffffc4 	movi	r3,-1
 80094c0:	10c00526 	beq	r2,r3,80094d8 <_sbrk_r+0x44>
 80094c4:	dfc00217 	ldw	ra,8(sp)
 80094c8:	dc400117 	ldw	r17,4(sp)
 80094cc:	dc000017 	ldw	r16,0(sp)
 80094d0:	dec00304 	addi	sp,sp,12
 80094d4:	f800283a 	ret
 80094d8:	80c00017 	ldw	r3,0(r16)
 80094dc:	183ff926 	beq	r3,zero,80094c4 <__alt_data_end+0xfc0094c4>
 80094e0:	88c00015 	stw	r3,0(r17)
 80094e4:	003ff706 	br	80094c4 <__alt_data_end+0xfc0094c4>

080094e8 <__sread>:
 80094e8:	defffe04 	addi	sp,sp,-8
 80094ec:	dc000015 	stw	r16,0(sp)
 80094f0:	2821883a 	mov	r16,r5
 80094f4:	2940038f 	ldh	r5,14(r5)
 80094f8:	dfc00115 	stw	ra,4(sp)
 80094fc:	800b1a40 	call	800b1a4 <_read_r>
 8009500:	10000716 	blt	r2,zero,8009520 <__sread+0x38>
 8009504:	80c01417 	ldw	r3,80(r16)
 8009508:	1887883a 	add	r3,r3,r2
 800950c:	80c01415 	stw	r3,80(r16)
 8009510:	dfc00117 	ldw	ra,4(sp)
 8009514:	dc000017 	ldw	r16,0(sp)
 8009518:	dec00204 	addi	sp,sp,8
 800951c:	f800283a 	ret
 8009520:	80c0030b 	ldhu	r3,12(r16)
 8009524:	18fbffcc 	andi	r3,r3,61439
 8009528:	80c0030d 	sth	r3,12(r16)
 800952c:	dfc00117 	ldw	ra,4(sp)
 8009530:	dc000017 	ldw	r16,0(sp)
 8009534:	dec00204 	addi	sp,sp,8
 8009538:	f800283a 	ret

0800953c <__seofread>:
 800953c:	0005883a 	mov	r2,zero
 8009540:	f800283a 	ret

08009544 <__swrite>:
 8009544:	2880030b 	ldhu	r2,12(r5)
 8009548:	defffb04 	addi	sp,sp,-20
 800954c:	dcc00315 	stw	r19,12(sp)
 8009550:	dc800215 	stw	r18,8(sp)
 8009554:	dc400115 	stw	r17,4(sp)
 8009558:	dc000015 	stw	r16,0(sp)
 800955c:	dfc00415 	stw	ra,16(sp)
 8009560:	10c0400c 	andi	r3,r2,256
 8009564:	2821883a 	mov	r16,r5
 8009568:	2027883a 	mov	r19,r4
 800956c:	3025883a 	mov	r18,r6
 8009570:	3823883a 	mov	r17,r7
 8009574:	18000526 	beq	r3,zero,800958c <__swrite+0x48>
 8009578:	2940038f 	ldh	r5,14(r5)
 800957c:	000d883a 	mov	r6,zero
 8009580:	01c00084 	movi	r7,2
 8009584:	800b1480 	call	800b148 <_lseek_r>
 8009588:	8080030b 	ldhu	r2,12(r16)
 800958c:	8140038f 	ldh	r5,14(r16)
 8009590:	10bbffcc 	andi	r2,r2,61439
 8009594:	9809883a 	mov	r4,r19
 8009598:	900d883a 	mov	r6,r18
 800959c:	880f883a 	mov	r7,r17
 80095a0:	8080030d 	sth	r2,12(r16)
 80095a4:	dfc00417 	ldw	ra,16(sp)
 80095a8:	dcc00317 	ldw	r19,12(sp)
 80095ac:	dc800217 	ldw	r18,8(sp)
 80095b0:	dc400117 	ldw	r17,4(sp)
 80095b4:	dc000017 	ldw	r16,0(sp)
 80095b8:	dec00504 	addi	sp,sp,20
 80095bc:	800ac241 	jmpi	800ac24 <_write_r>

080095c0 <__sseek>:
 80095c0:	defffe04 	addi	sp,sp,-8
 80095c4:	dc000015 	stw	r16,0(sp)
 80095c8:	2821883a 	mov	r16,r5
 80095cc:	2940038f 	ldh	r5,14(r5)
 80095d0:	dfc00115 	stw	ra,4(sp)
 80095d4:	800b1480 	call	800b148 <_lseek_r>
 80095d8:	00ffffc4 	movi	r3,-1
 80095dc:	10c00826 	beq	r2,r3,8009600 <__sseek+0x40>
 80095e0:	80c0030b 	ldhu	r3,12(r16)
 80095e4:	80801415 	stw	r2,80(r16)
 80095e8:	18c40014 	ori	r3,r3,4096
 80095ec:	80c0030d 	sth	r3,12(r16)
 80095f0:	dfc00117 	ldw	ra,4(sp)
 80095f4:	dc000017 	ldw	r16,0(sp)
 80095f8:	dec00204 	addi	sp,sp,8
 80095fc:	f800283a 	ret
 8009600:	80c0030b 	ldhu	r3,12(r16)
 8009604:	18fbffcc 	andi	r3,r3,61439
 8009608:	80c0030d 	sth	r3,12(r16)
 800960c:	dfc00117 	ldw	ra,4(sp)
 8009610:	dc000017 	ldw	r16,0(sp)
 8009614:	dec00204 	addi	sp,sp,8
 8009618:	f800283a 	ret

0800961c <__sclose>:
 800961c:	2940038f 	ldh	r5,14(r5)
 8009620:	800ac801 	jmpi	800ac80 <_close_r>

08009624 <strcmp>:
 8009624:	2144b03a 	or	r2,r4,r5
 8009628:	108000cc 	andi	r2,r2,3
 800962c:	1000171e 	bne	r2,zero,800968c <strcmp+0x68>
 8009630:	20800017 	ldw	r2,0(r4)
 8009634:	28c00017 	ldw	r3,0(r5)
 8009638:	10c0141e 	bne	r2,r3,800968c <strcmp+0x68>
 800963c:	027fbff4 	movhi	r9,65279
 8009640:	4a7fbfc4 	addi	r9,r9,-257
 8009644:	0086303a 	nor	r3,zero,r2
 8009648:	02202074 	movhi	r8,32897
 800964c:	1245883a 	add	r2,r2,r9
 8009650:	42202004 	addi	r8,r8,-32640
 8009654:	10c4703a 	and	r2,r2,r3
 8009658:	1204703a 	and	r2,r2,r8
 800965c:	10000226 	beq	r2,zero,8009668 <strcmp+0x44>
 8009660:	00001706 	br	80096c0 <strcmp+0x9c>
 8009664:	1000161e 	bne	r2,zero,80096c0 <strcmp+0x9c>
 8009668:	21000104 	addi	r4,r4,4
 800966c:	20c00017 	ldw	r3,0(r4)
 8009670:	29400104 	addi	r5,r5,4
 8009674:	29800017 	ldw	r6,0(r5)
 8009678:	1a4f883a 	add	r7,r3,r9
 800967c:	00c4303a 	nor	r2,zero,r3
 8009680:	3884703a 	and	r2,r7,r2
 8009684:	1204703a 	and	r2,r2,r8
 8009688:	19bff626 	beq	r3,r6,8009664 <__alt_data_end+0xfc009664>
 800968c:	20800007 	ldb	r2,0(r4)
 8009690:	1000051e 	bne	r2,zero,80096a8 <strcmp+0x84>
 8009694:	00000606 	br	80096b0 <strcmp+0x8c>
 8009698:	21000044 	addi	r4,r4,1
 800969c:	20800007 	ldb	r2,0(r4)
 80096a0:	29400044 	addi	r5,r5,1
 80096a4:	10000226 	beq	r2,zero,80096b0 <strcmp+0x8c>
 80096a8:	28c00007 	ldb	r3,0(r5)
 80096ac:	10fffa26 	beq	r2,r3,8009698 <__alt_data_end+0xfc009698>
 80096b0:	20800003 	ldbu	r2,0(r4)
 80096b4:	28c00003 	ldbu	r3,0(r5)
 80096b8:	10c5c83a 	sub	r2,r2,r3
 80096bc:	f800283a 	ret
 80096c0:	0005883a 	mov	r2,zero
 80096c4:	f800283a 	ret

080096c8 <__sprint_r.part.0>:
 80096c8:	28801917 	ldw	r2,100(r5)
 80096cc:	defff604 	addi	sp,sp,-40
 80096d0:	dd400515 	stw	r21,20(sp)
 80096d4:	dcc00315 	stw	r19,12(sp)
 80096d8:	dfc00915 	stw	ra,36(sp)
 80096dc:	df000815 	stw	fp,32(sp)
 80096e0:	ddc00715 	stw	r23,28(sp)
 80096e4:	dd800615 	stw	r22,24(sp)
 80096e8:	dd000415 	stw	r20,16(sp)
 80096ec:	dc800215 	stw	r18,8(sp)
 80096f0:	dc400115 	stw	r17,4(sp)
 80096f4:	dc000015 	stw	r16,0(sp)
 80096f8:	1088000c 	andi	r2,r2,8192
 80096fc:	2827883a 	mov	r19,r5
 8009700:	302b883a 	mov	r21,r6
 8009704:	10002d26 	beq	r2,zero,80097bc <__sprint_r.part.0+0xf4>
 8009708:	30800217 	ldw	r2,8(r6)
 800970c:	35800017 	ldw	r22,0(r6)
 8009710:	10002826 	beq	r2,zero,80097b4 <__sprint_r.part.0+0xec>
 8009714:	2029883a 	mov	r20,r4
 8009718:	b5c00104 	addi	r23,r22,4
 800971c:	04bfffc4 	movi	r18,-1
 8009720:	bc400017 	ldw	r17,0(r23)
 8009724:	b4000017 	ldw	r16,0(r22)
 8009728:	0039883a 	mov	fp,zero
 800972c:	8822d0ba 	srli	r17,r17,2
 8009730:	04400316 	blt	zero,r17,8009740 <__sprint_r.part.0+0x78>
 8009734:	00001706 	br	8009794 <__sprint_r.part.0+0xcc>
 8009738:	84000104 	addi	r16,r16,4
 800973c:	8f001526 	beq	r17,fp,8009794 <__sprint_r.part.0+0xcc>
 8009740:	81400017 	ldw	r5,0(r16)
 8009744:	a009883a 	mov	r4,r20
 8009748:	980d883a 	mov	r6,r19
 800974c:	800aec00 	call	800aec0 <_fputwc_r>
 8009750:	e7000044 	addi	fp,fp,1
 8009754:	14bff81e 	bne	r2,r18,8009738 <__alt_data_end+0xfc009738>
 8009758:	9005883a 	mov	r2,r18
 800975c:	a8000215 	stw	zero,8(r21)
 8009760:	a8000115 	stw	zero,4(r21)
 8009764:	dfc00917 	ldw	ra,36(sp)
 8009768:	df000817 	ldw	fp,32(sp)
 800976c:	ddc00717 	ldw	r23,28(sp)
 8009770:	dd800617 	ldw	r22,24(sp)
 8009774:	dd400517 	ldw	r21,20(sp)
 8009778:	dd000417 	ldw	r20,16(sp)
 800977c:	dcc00317 	ldw	r19,12(sp)
 8009780:	dc800217 	ldw	r18,8(sp)
 8009784:	dc400117 	ldw	r17,4(sp)
 8009788:	dc000017 	ldw	r16,0(sp)
 800978c:	dec00a04 	addi	sp,sp,40
 8009790:	f800283a 	ret
 8009794:	a8c00217 	ldw	r3,8(r21)
 8009798:	8c63883a 	add	r17,r17,r17
 800979c:	8c63883a 	add	r17,r17,r17
 80097a0:	1c45c83a 	sub	r2,r3,r17
 80097a4:	a8800215 	stw	r2,8(r21)
 80097a8:	b5800204 	addi	r22,r22,8
 80097ac:	bdc00204 	addi	r23,r23,8
 80097b0:	103fdb1e 	bne	r2,zero,8009720 <__alt_data_end+0xfc009720>
 80097b4:	0005883a 	mov	r2,zero
 80097b8:	003fe806 	br	800975c <__alt_data_end+0xfc00975c>
 80097bc:	80069440 	call	8006944 <__sfvwrite_r>
 80097c0:	003fe606 	br	800975c <__alt_data_end+0xfc00975c>

080097c4 <__sprint_r>:
 80097c4:	30c00217 	ldw	r3,8(r6)
 80097c8:	18000126 	beq	r3,zero,80097d0 <__sprint_r+0xc>
 80097cc:	80096c81 	jmpi	80096c8 <__sprint_r.part.0>
 80097d0:	30000115 	stw	zero,4(r6)
 80097d4:	0005883a 	mov	r2,zero
 80097d8:	f800283a 	ret

080097dc <___vfiprintf_internal_r>:
 80097dc:	defeca04 	addi	sp,sp,-1240
 80097e0:	dcc12f15 	stw	r19,1212(sp)
 80097e4:	dfc13515 	stw	ra,1236(sp)
 80097e8:	df013415 	stw	fp,1232(sp)
 80097ec:	ddc13315 	stw	r23,1228(sp)
 80097f0:	dd813215 	stw	r22,1224(sp)
 80097f4:	dd413115 	stw	r21,1220(sp)
 80097f8:	dd013015 	stw	r20,1216(sp)
 80097fc:	dc812e15 	stw	r18,1208(sp)
 8009800:	dc412d15 	stw	r17,1204(sp)
 8009804:	dc012c15 	stw	r16,1200(sp)
 8009808:	d9012115 	stw	r4,1156(sp)
 800980c:	d9412015 	stw	r5,1152(sp)
 8009810:	d9c12315 	stw	r7,1164(sp)
 8009814:	3027883a 	mov	r19,r6
 8009818:	20000226 	beq	r4,zero,8009824 <___vfiprintf_internal_r+0x48>
 800981c:	20800e17 	ldw	r2,56(r4)
 8009820:	1000f726 	beq	r2,zero,8009c00 <___vfiprintf_internal_r+0x424>
 8009824:	d8812017 	ldw	r2,1152(sp)
 8009828:	10c0030b 	ldhu	r3,12(r2)
 800982c:	1908000c 	andi	r4,r3,8192
 8009830:	1805883a 	mov	r2,r3
 8009834:	2000081e 	bne	r4,zero,8009858 <___vfiprintf_internal_r+0x7c>
 8009838:	d9412017 	ldw	r5,1152(sp)
 800983c:	18880014 	ori	r2,r3,8192
 8009840:	00f7ffc4 	movi	r3,-8193
 8009844:	29001917 	ldw	r4,100(r5)
 8009848:	2880030d 	sth	r2,12(r5)
 800984c:	20c8703a 	and	r4,r4,r3
 8009850:	29001915 	stw	r4,100(r5)
 8009854:	1007883a 	mov	r3,r2
 8009858:	1100020c 	andi	r4,r2,8
 800985c:	2000a726 	beq	r4,zero,8009afc <___vfiprintf_internal_r+0x320>
 8009860:	d9412017 	ldw	r5,1152(sp)
 8009864:	29000417 	ldw	r4,16(r5)
 8009868:	2000a426 	beq	r4,zero,8009afc <___vfiprintf_internal_r+0x320>
 800986c:	1080068c 	andi	r2,r2,26
 8009870:	01000284 	movi	r4,10
 8009874:	1100ab26 	beq	r2,r4,8009b24 <___vfiprintf_internal_r+0x348>
 8009878:	d9010a04 	addi	r4,sp,1064
 800987c:	d94109c4 	addi	r5,sp,1063
 8009880:	07020074 	movhi	fp,2049
 8009884:	04420074 	movhi	r17,2049
 8009888:	2145c83a 	sub	r2,r4,r5
 800988c:	e7072604 	addi	fp,fp,7320
 8009890:	8c472204 	addi	r17,r17,7304
 8009894:	d9011e15 	stw	r4,1144(sp)
 8009898:	d9411f15 	stw	r5,1148(sp)
 800989c:	dec11a15 	stw	sp,1128(sp)
 80098a0:	d8011c15 	stw	zero,1136(sp)
 80098a4:	d8011b15 	stw	zero,1132(sp)
 80098a8:	d8012715 	stw	zero,1180(sp)
 80098ac:	d8012515 	stw	zero,1172(sp)
 80098b0:	d811883a 	mov	r8,sp
 80098b4:	d8812815 	stw	r2,1184(sp)
 80098b8:	982f883a 	mov	r23,r19
 80098bc:	b8800007 	ldb	r2,0(r23)
 80098c0:	1003b026 	beq	r2,zero,800a784 <___vfiprintf_internal_r+0xfa8>
 80098c4:	01000944 	movi	r4,37
 80098c8:	1103ae26 	beq	r2,r4,800a784 <___vfiprintf_internal_r+0xfa8>
 80098cc:	b805883a 	mov	r2,r23
 80098d0:	00000106 	br	80098d8 <___vfiprintf_internal_r+0xfc>
 80098d4:	19000326 	beq	r3,r4,80098e4 <___vfiprintf_internal_r+0x108>
 80098d8:	10800044 	addi	r2,r2,1
 80098dc:	10c00007 	ldb	r3,0(r2)
 80098e0:	183ffc1e 	bne	r3,zero,80098d4 <__alt_data_end+0xfc0098d4>
 80098e4:	15e1c83a 	sub	r16,r2,r23
 80098e8:	1029883a 	mov	r20,r2
 80098ec:	80001026 	beq	r16,zero,8009930 <___vfiprintf_internal_r+0x154>
 80098f0:	d8c11c17 	ldw	r3,1136(sp)
 80098f4:	d8811b17 	ldw	r2,1132(sp)
 80098f8:	45c00015 	stw	r23,0(r8)
 80098fc:	80c7883a 	add	r3,r16,r3
 8009900:	10800044 	addi	r2,r2,1
 8009904:	44000115 	stw	r16,4(r8)
 8009908:	d8c11c15 	stw	r3,1136(sp)
 800990c:	d8811b15 	stw	r2,1132(sp)
 8009910:	010001c4 	movi	r4,7
 8009914:	2080740e 	bge	r4,r2,8009ae8 <___vfiprintf_internal_r+0x30c>
 8009918:	1803a71e 	bne	r3,zero,800a7b8 <___vfiprintf_internal_r+0xfdc>
 800991c:	d8c12517 	ldw	r3,1172(sp)
 8009920:	d8011b15 	stw	zero,1132(sp)
 8009924:	d811883a 	mov	r8,sp
 8009928:	1c07883a 	add	r3,r3,r16
 800992c:	d8c12515 	stw	r3,1172(sp)
 8009930:	a0800007 	ldb	r2,0(r20)
 8009934:	1002bf26 	beq	r2,zero,800a434 <___vfiprintf_internal_r+0xc58>
 8009938:	a5c00044 	addi	r23,r20,1
 800993c:	a1800047 	ldb	r6,1(r20)
 8009940:	d8011d85 	stb	zero,1142(sp)
 8009944:	d8012205 	stb	zero,1160(sp)
 8009948:	043fffc4 	movi	r16,-1
 800994c:	d8012415 	stw	zero,1168(sp)
 8009950:	0025883a 	mov	r18,zero
 8009954:	05001604 	movi	r20,88
 8009958:	05400244 	movi	r21,9
 800995c:	4027883a 	mov	r19,r8
 8009960:	bdc00044 	addi	r23,r23,1
 8009964:	30bff804 	addi	r2,r6,-32
 8009968:	a0825636 	bltu	r20,r2,800a2c4 <___vfiprintf_internal_r+0xae8>
 800996c:	100490ba 	slli	r2,r2,2
 8009970:	01020074 	movhi	r4,2049
 8009974:	21266104 	addi	r4,r4,-26236
 8009978:	1105883a 	add	r2,r2,r4
 800997c:	10800017 	ldw	r2,0(r2)
 8009980:	1000683a 	jmp	r2
 8009984:	0800a254 	ori	zero,at,649
 8009988:	0800a2c4 	addi	zero,at,651
 800998c:	0800a2c4 	addi	zero,at,651
 8009990:	0800a2b8 	rdprs	zero,at,650
 8009994:	0800a2c4 	addi	zero,at,651
 8009998:	0800a2c4 	addi	zero,at,651
 800999c:	0800a2c4 	addi	zero,at,651
 80099a0:	0800a2c4 	addi	zero,at,651
 80099a4:	0800a2c4 	addi	zero,at,651
 80099a8:	0800a2c4 	addi	zero,at,651
 80099ac:	0800a044 	addi	zero,at,641
 80099b0:	0800a26c 	andhi	zero,at,649
 80099b4:	0800a2c4 	addi	zero,at,651
 80099b8:	08009c18 	cmpnei	zero,at,624
 80099bc:	0800a068 	cmpgeui	zero,at,641
 80099c0:	0800a2c4 	addi	zero,at,651
 80099c4:	08009c24 	muli	zero,at,624
 80099c8:	08009c30 	cmpltui	zero,at,624
 80099cc:	08009c30 	cmpltui	zero,at,624
 80099d0:	08009c30 	cmpltui	zero,at,624
 80099d4:	08009c30 	cmpltui	zero,at,624
 80099d8:	08009c30 	cmpltui	zero,at,624
 80099dc:	08009c30 	cmpltui	zero,at,624
 80099e0:	08009c30 	cmpltui	zero,at,624
 80099e4:	08009c30 	cmpltui	zero,at,624
 80099e8:	08009c30 	cmpltui	zero,at,624
 80099ec:	0800a2c4 	addi	zero,at,651
 80099f0:	0800a2c4 	addi	zero,at,651
 80099f4:	0800a2c4 	addi	zero,at,651
 80099f8:	0800a2c4 	addi	zero,at,651
 80099fc:	0800a2c4 	addi	zero,at,651
 8009a00:	0800a2c4 	addi	zero,at,651
 8009a04:	0800a2c4 	addi	zero,at,651
 8009a08:	0800a2c4 	addi	zero,at,651
 8009a0c:	0800a2c4 	addi	zero,at,651
 8009a10:	0800a2c4 	addi	zero,at,651
 8009a14:	08009c70 	cmpltui	zero,at,625
 8009a18:	0800a2c4 	addi	zero,at,651
 8009a1c:	0800a2c4 	addi	zero,at,651
 8009a20:	0800a2c4 	addi	zero,at,651
 8009a24:	0800a2c4 	addi	zero,at,651
 8009a28:	0800a2c4 	addi	zero,at,651
 8009a2c:	0800a2c4 	addi	zero,at,651
 8009a30:	0800a2c4 	addi	zero,at,651
 8009a34:	0800a2c4 	addi	zero,at,651
 8009a38:	0800a2c4 	addi	zero,at,651
 8009a3c:	0800a2c4 	addi	zero,at,651
 8009a40:	08009f60 	cmpeqi	zero,at,637
 8009a44:	0800a2c4 	addi	zero,at,651
 8009a48:	0800a2c4 	addi	zero,at,651
 8009a4c:	0800a2c4 	addi	zero,at,651
 8009a50:	0800a2c4 	addi	zero,at,651
 8009a54:	0800a2c4 	addi	zero,at,651
 8009a58:	08009fa0 	cmpeqi	zero,at,638
 8009a5c:	0800a2c4 	addi	zero,at,651
 8009a60:	0800a2c4 	addi	zero,at,651
 8009a64:	08009fe4 	muli	zero,at,639
 8009a68:	0800a2c4 	addi	zero,at,651
 8009a6c:	0800a2c4 	addi	zero,at,651
 8009a70:	0800a2c4 	addi	zero,at,651
 8009a74:	0800a2c4 	addi	zero,at,651
 8009a78:	0800a2c4 	addi	zero,at,651
 8009a7c:	0800a2c4 	addi	zero,at,651
 8009a80:	0800a2c4 	addi	zero,at,651
 8009a84:	0800a2c4 	addi	zero,at,651
 8009a88:	0800a2c4 	addi	zero,at,651
 8009a8c:	0800a2c4 	addi	zero,at,651
 8009a90:	08009f2c 	andhi	zero,at,636
 8009a94:	0800a27c 	xorhi	zero,at,649
 8009a98:	0800a2c4 	addi	zero,at,651
 8009a9c:	0800a2c4 	addi	zero,at,651
 8009aa0:	0800a2c4 	addi	zero,at,651
 8009aa4:	0800a0b8 	rdprs	zero,at,642
 8009aa8:	0800a27c 	xorhi	zero,at,649
 8009aac:	0800a2c4 	addi	zero,at,651
 8009ab0:	0800a2c4 	addi	zero,at,651
 8009ab4:	08009fd0 	cmplti	zero,at,639
 8009ab8:	0800a2c4 	addi	zero,at,651
 8009abc:	0800a21c 	xori	zero,at,648
 8009ac0:	0800a1a4 	muli	zero,at,646
 8009ac4:	0800a1d8 	cmpnei	zero,at,647
 8009ac8:	0800a0c4 	addi	zero,at,643
 8009acc:	0800a2c4 	addi	zero,at,651
 8009ad0:	0800a0d0 	cmplti	zero,at,643
 8009ad4:	0800a2c4 	addi	zero,at,651
 8009ad8:	0800a12c 	andhi	zero,at,644
 8009adc:	0800a2c4 	addi	zero,at,651
 8009ae0:	0800a2c4 	addi	zero,at,651
 8009ae4:	0800a160 	cmpeqi	zero,at,645
 8009ae8:	42000204 	addi	r8,r8,8
 8009aec:	d8c12517 	ldw	r3,1172(sp)
 8009af0:	1c07883a 	add	r3,r3,r16
 8009af4:	d8c12515 	stw	r3,1172(sp)
 8009af8:	003f8d06 	br	8009930 <__alt_data_end+0xfc009930>
 8009afc:	d9012117 	ldw	r4,1156(sp)
 8009b00:	d9412017 	ldw	r5,1152(sp)
 8009b04:	80044a40 	call	80044a4 <__swsetup_r>
 8009b08:	1000301e 	bne	r2,zero,8009bcc <___vfiprintf_internal_r+0x3f0>
 8009b0c:	d8812017 	ldw	r2,1152(sp)
 8009b10:	01000284 	movi	r4,10
 8009b14:	10c0030b 	ldhu	r3,12(r2)
 8009b18:	1805883a 	mov	r2,r3
 8009b1c:	1080068c 	andi	r2,r2,26
 8009b20:	113f551e 	bne	r2,r4,8009878 <__alt_data_end+0xfc009878>
 8009b24:	d9012017 	ldw	r4,1152(sp)
 8009b28:	2080038b 	ldhu	r2,14(r4)
 8009b2c:	113fffcc 	andi	r4,r2,65535
 8009b30:	2120001c 	xori	r4,r4,32768
 8009b34:	21200004 	addi	r4,r4,-32768
 8009b38:	203f4f16 	blt	r4,zero,8009878 <__alt_data_end+0xfc009878>
 8009b3c:	d9412017 	ldw	r5,1152(sp)
 8009b40:	d9012117 	ldw	r4,1156(sp)
 8009b44:	d9c12317 	ldw	r7,1164(sp)
 8009b48:	2b001917 	ldw	r12,100(r5)
 8009b4c:	2ac00717 	ldw	r11,28(r5)
 8009b50:	2a800917 	ldw	r10,36(r5)
 8009b54:	02010004 	movi	r8,1024
 8009b58:	18ffff4c 	andi	r3,r3,65533
 8009b5c:	da0b883a 	add	r5,sp,r8
 8009b60:	980d883a 	mov	r6,r19
 8009b64:	d8c1030d 	sth	r3,1036(sp)
 8009b68:	db011915 	stw	r12,1124(sp)
 8009b6c:	d881038d 	sth	r2,1038(sp)
 8009b70:	dac10715 	stw	r11,1052(sp)
 8009b74:	da810915 	stw	r10,1060(sp)
 8009b78:	dec10015 	stw	sp,1024(sp)
 8009b7c:	dec10415 	stw	sp,1040(sp)
 8009b80:	da010215 	stw	r8,1032(sp)
 8009b84:	da010515 	stw	r8,1044(sp)
 8009b88:	d8010615 	stw	zero,1048(sp)
 8009b8c:	80097dc0 	call	80097dc <___vfiprintf_internal_r>
 8009b90:	1021883a 	mov	r16,r2
 8009b94:	10000416 	blt	r2,zero,8009ba8 <___vfiprintf_internal_r+0x3cc>
 8009b98:	d9012117 	ldw	r4,1156(sp)
 8009b9c:	d9410004 	addi	r5,sp,1024
 8009ba0:	8005f240 	call	8005f24 <_fflush_r>
 8009ba4:	10040f1e 	bne	r2,zero,800abe4 <___vfiprintf_internal_r+0x1408>
 8009ba8:	d881030b 	ldhu	r2,1036(sp)
 8009bac:	1080100c 	andi	r2,r2,64
 8009bb0:	10000426 	beq	r2,zero,8009bc4 <___vfiprintf_internal_r+0x3e8>
 8009bb4:	d8c12017 	ldw	r3,1152(sp)
 8009bb8:	1880030b 	ldhu	r2,12(r3)
 8009bbc:	10801014 	ori	r2,r2,64
 8009bc0:	1880030d 	sth	r2,12(r3)
 8009bc4:	8005883a 	mov	r2,r16
 8009bc8:	00000106 	br	8009bd0 <___vfiprintf_internal_r+0x3f4>
 8009bcc:	00bfffc4 	movi	r2,-1
 8009bd0:	dfc13517 	ldw	ra,1236(sp)
 8009bd4:	df013417 	ldw	fp,1232(sp)
 8009bd8:	ddc13317 	ldw	r23,1228(sp)
 8009bdc:	dd813217 	ldw	r22,1224(sp)
 8009be0:	dd413117 	ldw	r21,1220(sp)
 8009be4:	dd013017 	ldw	r20,1216(sp)
 8009be8:	dcc12f17 	ldw	r19,1212(sp)
 8009bec:	dc812e17 	ldw	r18,1208(sp)
 8009bf0:	dc412d17 	ldw	r17,1204(sp)
 8009bf4:	dc012c17 	ldw	r16,1200(sp)
 8009bf8:	dec13604 	addi	sp,sp,1240
 8009bfc:	f800283a 	ret
 8009c00:	80064e00 	call	80064e0 <__sinit>
 8009c04:	003f0706 	br	8009824 <__alt_data_end+0xfc009824>
 8009c08:	d8c12417 	ldw	r3,1168(sp)
 8009c0c:	d8812315 	stw	r2,1164(sp)
 8009c10:	00c7c83a 	sub	r3,zero,r3
 8009c14:	d8c12415 	stw	r3,1168(sp)
 8009c18:	94800114 	ori	r18,r18,4
 8009c1c:	b9800007 	ldb	r6,0(r23)
 8009c20:	003f4f06 	br	8009960 <__alt_data_end+0xfc009960>
 8009c24:	94802014 	ori	r18,r18,128
 8009c28:	b9800007 	ldb	r6,0(r23)
 8009c2c:	003f4c06 	br	8009960 <__alt_data_end+0xfc009960>
 8009c30:	dc012615 	stw	r16,1176(sp)
 8009c34:	d8012415 	stw	zero,1168(sp)
 8009c38:	35bff404 	addi	r22,r6,-48
 8009c3c:	0009883a 	mov	r4,zero
 8009c40:	b821883a 	mov	r16,r23
 8009c44:	01400284 	movi	r5,10
 8009c48:	800c2f80 	call	800c2f8 <__mulsi3>
 8009c4c:	81800007 	ldb	r6,0(r16)
 8009c50:	1589883a 	add	r4,r2,r22
 8009c54:	bdc00044 	addi	r23,r23,1
 8009c58:	35bff404 	addi	r22,r6,-48
 8009c5c:	b821883a 	mov	r16,r23
 8009c60:	adbff82e 	bgeu	r21,r22,8009c44 <__alt_data_end+0xfc009c44>
 8009c64:	d9012415 	stw	r4,1168(sp)
 8009c68:	dc012617 	ldw	r16,1176(sp)
 8009c6c:	003f3d06 	br	8009964 <__alt_data_end+0xfc009964>
 8009c70:	d8c12203 	ldbu	r3,1160(sp)
 8009c74:	94800414 	ori	r18,r18,16
 8009c78:	9080080c 	andi	r2,r18,32
 8009c7c:	d8c11d85 	stb	r3,1142(sp)
 8009c80:	9811883a 	mov	r8,r19
 8009c84:	d8c12317 	ldw	r3,1164(sp)
 8009c88:	10018226 	beq	r2,zero,800a294 <___vfiprintf_internal_r+0xab8>
 8009c8c:	d9012317 	ldw	r4,1164(sp)
 8009c90:	18800117 	ldw	r2,4(r3)
 8009c94:	1cc00017 	ldw	r19,0(r3)
 8009c98:	21000204 	addi	r4,r4,8
 8009c9c:	d9012315 	stw	r4,1164(sp)
 8009ca0:	102b883a 	mov	r21,r2
 8009ca4:	10030016 	blt	r2,zero,800a8a8 <___vfiprintf_internal_r+0x10cc>
 8009ca8:	dd811d83 	ldbu	r22,1142(sp)
 8009cac:	8029883a 	mov	r20,r16
 8009cb0:	00800044 	movi	r2,1
 8009cb4:	9d46b03a 	or	r3,r19,r21
 8009cb8:	80000216 	blt	r16,zero,8009cc4 <___vfiprintf_internal_r+0x4e8>
 8009cbc:	013fdfc4 	movi	r4,-129
 8009cc0:	9124703a 	and	r18,r18,r4
 8009cc4:	1801b41e 	bne	r3,zero,800a398 <___vfiprintf_internal_r+0xbbc>
 8009cc8:	80028126 	beq	r16,zero,800a6d0 <___vfiprintf_internal_r+0xef4>
 8009ccc:	10803fcc 	andi	r2,r2,255
 8009cd0:	00c00044 	movi	r3,1
 8009cd4:	10c1d126 	beq	r2,r3,800a41c <___vfiprintf_internal_r+0xc40>
 8009cd8:	00c00084 	movi	r3,2
 8009cdc:	10c28626 	beq	r2,r3,800a6f8 <___vfiprintf_internal_r+0xf1c>
 8009ce0:	d8c10a04 	addi	r3,sp,1064
 8009ce4:	9808d0fa 	srli	r4,r19,3
 8009ce8:	a80a977a 	slli	r5,r21,29
 8009cec:	a82ad0fa 	srli	r21,r21,3
 8009cf0:	9cc001cc 	andi	r19,r19,7
 8009cf4:	98800c04 	addi	r2,r19,48
 8009cf8:	18ffffc4 	addi	r3,r3,-1
 8009cfc:	2926b03a 	or	r19,r5,r4
 8009d00:	18800005 	stb	r2,0(r3)
 8009d04:	9d48b03a 	or	r4,r19,r21
 8009d08:	203ff61e 	bne	r4,zero,8009ce4 <__alt_data_end+0xfc009ce4>
 8009d0c:	9100004c 	andi	r4,r18,1
 8009d10:	d8c12215 	stw	r3,1160(sp)
 8009d14:	2002b31e 	bne	r4,zero,800a7e4 <___vfiprintf_internal_r+0x1008>
 8009d18:	d9411e17 	ldw	r5,1144(sp)
 8009d1c:	28e9c83a 	sub	r20,r5,r3
 8009d20:	a02b883a 	mov	r21,r20
 8009d24:	a400010e 	bge	r20,r16,8009d2c <___vfiprintf_internal_r+0x550>
 8009d28:	802b883a 	mov	r21,r16
 8009d2c:	b5803fcc 	andi	r22,r22,255
 8009d30:	b580201c 	xori	r22,r22,128
 8009d34:	b5bfe004 	addi	r22,r22,-128
 8009d38:	b0000126 	beq	r22,zero,8009d40 <___vfiprintf_internal_r+0x564>
 8009d3c:	ad400044 	addi	r21,r21,1
 8009d40:	9280008c 	andi	r10,r18,2
 8009d44:	50000126 	beq	r10,zero,8009d4c <___vfiprintf_internal_r+0x570>
 8009d48:	ad400084 	addi	r21,r21,2
 8009d4c:	9580210c 	andi	r22,r18,132
 8009d50:	b001751e 	bne	r22,zero,800a328 <___vfiprintf_internal_r+0xb4c>
 8009d54:	d9012417 	ldw	r4,1168(sp)
 8009d58:	2567c83a 	sub	r19,r4,r21
 8009d5c:	04c1720e 	bge	zero,r19,800a328 <___vfiprintf_internal_r+0xb4c>
 8009d60:	01c00404 	movi	r7,16
 8009d64:	d8c11c17 	ldw	r3,1136(sp)
 8009d68:	3cc36b0e 	bge	r7,r19,800ab18 <___vfiprintf_internal_r+0x133c>
 8009d6c:	00820074 	movhi	r2,2049
 8009d70:	10872604 	addi	r2,r2,7320
 8009d74:	dc012915 	stw	r16,1188(sp)
 8009d78:	d9011b17 	ldw	r4,1132(sp)
 8009d7c:	9821883a 	mov	r16,r19
 8009d80:	d8812615 	stw	r2,1176(sp)
 8009d84:	030001c4 	movi	r12,7
 8009d88:	5027883a 	mov	r19,r10
 8009d8c:	00000506 	br	8009da4 <___vfiprintf_internal_r+0x5c8>
 8009d90:	21400084 	addi	r5,r4,2
 8009d94:	42000204 	addi	r8,r8,8
 8009d98:	1009883a 	mov	r4,r2
 8009d9c:	843ffc04 	addi	r16,r16,-16
 8009da0:	3c000d0e 	bge	r7,r16,8009dd8 <___vfiprintf_internal_r+0x5fc>
 8009da4:	18c00404 	addi	r3,r3,16
 8009da8:	20800044 	addi	r2,r4,1
 8009dac:	47000015 	stw	fp,0(r8)
 8009db0:	41c00115 	stw	r7,4(r8)
 8009db4:	d8c11c15 	stw	r3,1136(sp)
 8009db8:	d8811b15 	stw	r2,1132(sp)
 8009dbc:	60bff40e 	bge	r12,r2,8009d90 <__alt_data_end+0xfc009d90>
 8009dc0:	18014b1e 	bne	r3,zero,800a2f0 <___vfiprintf_internal_r+0xb14>
 8009dc4:	843ffc04 	addi	r16,r16,-16
 8009dc8:	0009883a 	mov	r4,zero
 8009dcc:	01400044 	movi	r5,1
 8009dd0:	d811883a 	mov	r8,sp
 8009dd4:	3c3ff316 	blt	r7,r16,8009da4 <__alt_data_end+0xfc009da4>
 8009dd8:	9815883a 	mov	r10,r19
 8009ddc:	8027883a 	mov	r19,r16
 8009de0:	dc012917 	ldw	r16,1188(sp)
 8009de4:	d9012617 	ldw	r4,1176(sp)
 8009de8:	98c7883a 	add	r3,r19,r3
 8009dec:	44c00115 	stw	r19,4(r8)
 8009df0:	41000015 	stw	r4,0(r8)
 8009df4:	d8c11c15 	stw	r3,1136(sp)
 8009df8:	d9411b15 	stw	r5,1132(sp)
 8009dfc:	008001c4 	movi	r2,7
 8009e00:	11425116 	blt	r2,r5,800a748 <___vfiprintf_internal_r+0xf6c>
 8009e04:	d9011d87 	ldb	r4,1142(sp)
 8009e08:	42000204 	addi	r8,r8,8
 8009e0c:	28800044 	addi	r2,r5,1
 8009e10:	20014a1e 	bne	r4,zero,800a33c <___vfiprintf_internal_r+0xb60>
 8009e14:	50000c26 	beq	r10,zero,8009e48 <___vfiprintf_internal_r+0x66c>
 8009e18:	d9011d04 	addi	r4,sp,1140
 8009e1c:	18c00084 	addi	r3,r3,2
 8009e20:	41000015 	stw	r4,0(r8)
 8009e24:	01000084 	movi	r4,2
 8009e28:	41000115 	stw	r4,4(r8)
 8009e2c:	d8c11c15 	stw	r3,1136(sp)
 8009e30:	d8811b15 	stw	r2,1132(sp)
 8009e34:	010001c4 	movi	r4,7
 8009e38:	20822016 	blt	r4,r2,800a6bc <___vfiprintf_internal_r+0xee0>
 8009e3c:	100b883a 	mov	r5,r2
 8009e40:	42000204 	addi	r8,r8,8
 8009e44:	10800044 	addi	r2,r2,1
 8009e48:	01002004 	movi	r4,128
 8009e4c:	b101de26 	beq	r22,r4,800a5c8 <___vfiprintf_internal_r+0xdec>
 8009e50:	8521c83a 	sub	r16,r16,r20
 8009e54:	0400230e 	bge	zero,r16,8009ee4 <___vfiprintf_internal_r+0x708>
 8009e58:	04c00404 	movi	r19,16
 8009e5c:	9c030d0e 	bge	r19,r16,800aa94 <___vfiprintf_internal_r+0x12b8>
 8009e60:	00820074 	movhi	r2,2049
 8009e64:	10872204 	addi	r2,r2,7304
 8009e68:	d8812615 	stw	r2,1176(sp)
 8009e6c:	058001c4 	movi	r22,7
 8009e70:	00000506 	br	8009e88 <___vfiprintf_internal_r+0x6ac>
 8009e74:	28800084 	addi	r2,r5,2
 8009e78:	42000204 	addi	r8,r8,8
 8009e7c:	200b883a 	mov	r5,r4
 8009e80:	843ffc04 	addi	r16,r16,-16
 8009e84:	9c000d0e 	bge	r19,r16,8009ebc <___vfiprintf_internal_r+0x6e0>
 8009e88:	18c00404 	addi	r3,r3,16
 8009e8c:	29000044 	addi	r4,r5,1
 8009e90:	44400015 	stw	r17,0(r8)
 8009e94:	44c00115 	stw	r19,4(r8)
 8009e98:	d8c11c15 	stw	r3,1136(sp)
 8009e9c:	d9011b15 	stw	r4,1132(sp)
 8009ea0:	b13ff40e 	bge	r22,r4,8009e74 <__alt_data_end+0xfc009e74>
 8009ea4:	1801321e 	bne	r3,zero,800a370 <___vfiprintf_internal_r+0xb94>
 8009ea8:	843ffc04 	addi	r16,r16,-16
 8009eac:	000b883a 	mov	r5,zero
 8009eb0:	00800044 	movi	r2,1
 8009eb4:	d811883a 	mov	r8,sp
 8009eb8:	9c3ff316 	blt	r19,r16,8009e88 <__alt_data_end+0xfc009e88>
 8009ebc:	d9012617 	ldw	r4,1176(sp)
 8009ec0:	1c07883a 	add	r3,r3,r16
 8009ec4:	44000115 	stw	r16,4(r8)
 8009ec8:	41000015 	stw	r4,0(r8)
 8009ecc:	d8c11c15 	stw	r3,1136(sp)
 8009ed0:	d8811b15 	stw	r2,1132(sp)
 8009ed4:	010001c4 	movi	r4,7
 8009ed8:	20816216 	blt	r4,r2,800a464 <___vfiprintf_internal_r+0xc88>
 8009edc:	42000204 	addi	r8,r8,8
 8009ee0:	10800044 	addi	r2,r2,1
 8009ee4:	d9012217 	ldw	r4,1160(sp)
 8009ee8:	1d07883a 	add	r3,r3,r20
 8009eec:	45000115 	stw	r20,4(r8)
 8009ef0:	41000015 	stw	r4,0(r8)
 8009ef4:	d8c11c15 	stw	r3,1136(sp)
 8009ef8:	d8811b15 	stw	r2,1132(sp)
 8009efc:	010001c4 	movi	r4,7
 8009f00:	2081610e 	bge	r4,r2,800a488 <___vfiprintf_internal_r+0xcac>
 8009f04:	1802211e 	bne	r3,zero,800a78c <___vfiprintf_internal_r+0xfb0>
 8009f08:	d8011b15 	stw	zero,1132(sp)
 8009f0c:	9480010c 	andi	r18,r18,4
 8009f10:	9002171e 	bne	r18,zero,800a770 <___vfiprintf_internal_r+0xf94>
 8009f14:	d9412417 	ldw	r5,1168(sp)
 8009f18:	a9433716 	blt	r21,r5,800abf8 <___vfiprintf_internal_r+0x141c>
 8009f1c:	d8812517 	ldw	r2,1172(sp)
 8009f20:	1545883a 	add	r2,r2,r21
 8009f24:	d8812515 	stw	r2,1172(sp)
 8009f28:	00019a06 	br	800a594 <___vfiprintf_internal_r+0xdb8>
 8009f2c:	d8c12317 	ldw	r3,1164(sp)
 8009f30:	05400044 	movi	r21,1
 8009f34:	9811883a 	mov	r8,r19
 8009f38:	18800017 	ldw	r2,0(r3)
 8009f3c:	18c00104 	addi	r3,r3,4
 8009f40:	d8c12315 	stw	r3,1164(sp)
 8009f44:	d8c10004 	addi	r3,sp,1024
 8009f48:	d8011d85 	stb	zero,1142(sp)
 8009f4c:	d8810005 	stb	r2,1024(sp)
 8009f50:	a829883a 	mov	r20,r21
 8009f54:	d8c12215 	stw	r3,1160(sp)
 8009f58:	0021883a 	mov	r16,zero
 8009f5c:	003f7806 	br	8009d40 <__alt_data_end+0xfc009d40>
 8009f60:	94800414 	ori	r18,r18,16
 8009f64:	9080080c 	andi	r2,r18,32
 8009f68:	9811883a 	mov	r8,r19
 8009f6c:	10009026 	beq	r2,zero,800a1b0 <___vfiprintf_internal_r+0x9d4>
 8009f70:	d8812317 	ldw	r2,1164(sp)
 8009f74:	d8c12317 	ldw	r3,1164(sp)
 8009f78:	14c00017 	ldw	r19,0(r2)
 8009f7c:	15400117 	ldw	r21,4(r2)
 8009f80:	18c00204 	addi	r3,r3,8
 8009f84:	d8c12315 	stw	r3,1164(sp)
 8009f88:	0005883a 	mov	r2,zero
 8009f8c:	9d46b03a 	or	r3,r19,r21
 8009f90:	d8011d85 	stb	zero,1142(sp)
 8009f94:	8029883a 	mov	r20,r16
 8009f98:	002d883a 	mov	r22,zero
 8009f9c:	003f4606 	br	8009cb8 <__alt_data_end+0xfc009cb8>
 8009fa0:	94800414 	ori	r18,r18,16
 8009fa4:	9080080c 	andi	r2,r18,32
 8009fa8:	9811883a 	mov	r8,r19
 8009fac:	10006226 	beq	r2,zero,800a138 <___vfiprintf_internal_r+0x95c>
 8009fb0:	d9012317 	ldw	r4,1164(sp)
 8009fb4:	00800044 	movi	r2,1
 8009fb8:	24c00017 	ldw	r19,0(r4)
 8009fbc:	25400117 	ldw	r21,4(r4)
 8009fc0:	21000204 	addi	r4,r4,8
 8009fc4:	d9012315 	stw	r4,1164(sp)
 8009fc8:	9d46b03a 	or	r3,r19,r21
 8009fcc:	003ff006 	br	8009f90 <__alt_data_end+0xfc009f90>
 8009fd0:	b9800007 	ldb	r6,0(r23)
 8009fd4:	00801b04 	movi	r2,108
 8009fd8:	3082b226 	beq	r6,r2,800aaa4 <___vfiprintf_internal_r+0x12c8>
 8009fdc:	94800414 	ori	r18,r18,16
 8009fe0:	003e5f06 	br	8009960 <__alt_data_end+0xfc009960>
 8009fe4:	d8c12203 	ldbu	r3,1160(sp)
 8009fe8:	01020074 	movhi	r4,2049
 8009fec:	2106bc04 	addi	r4,r4,6896
 8009ff0:	d8c11d85 	stb	r3,1142(sp)
 8009ff4:	d9012715 	stw	r4,1180(sp)
 8009ff8:	90c0080c 	andi	r3,r18,32
 8009ffc:	9811883a 	mov	r8,r19
 800a000:	d8812317 	ldw	r2,1164(sp)
 800a004:	18005f26 	beq	r3,zero,800a184 <___vfiprintf_internal_r+0x9a8>
 800a008:	d9012317 	ldw	r4,1164(sp)
 800a00c:	14c00017 	ldw	r19,0(r2)
 800a010:	15400117 	ldw	r21,4(r2)
 800a014:	21000204 	addi	r4,r4,8
 800a018:	d9012315 	stw	r4,1164(sp)
 800a01c:	9080004c 	andi	r2,r18,1
 800a020:	1001e226 	beq	r2,zero,800a7ac <___vfiprintf_internal_r+0xfd0>
 800a024:	9d46b03a 	or	r3,r19,r21
 800a028:	18024e26 	beq	r3,zero,800a964 <___vfiprintf_internal_r+0x1188>
 800a02c:	00800c04 	movi	r2,48
 800a030:	d8811d05 	stb	r2,1140(sp)
 800a034:	d9811d45 	stb	r6,1141(sp)
 800a038:	94800094 	ori	r18,r18,2
 800a03c:	00800084 	movi	r2,2
 800a040:	003fd306 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a044:	d9012317 	ldw	r4,1164(sp)
 800a048:	d9412317 	ldw	r5,1164(sp)
 800a04c:	21000017 	ldw	r4,0(r4)
 800a050:	28800104 	addi	r2,r5,4
 800a054:	d9012415 	stw	r4,1168(sp)
 800a058:	203eeb16 	blt	r4,zero,8009c08 <__alt_data_end+0xfc009c08>
 800a05c:	d8812315 	stw	r2,1164(sp)
 800a060:	b9800007 	ldb	r6,0(r23)
 800a064:	003e3e06 	br	8009960 <__alt_data_end+0xfc009960>
 800a068:	b9800007 	ldb	r6,0(r23)
 800a06c:	01000a84 	movi	r4,42
 800a070:	b8800044 	addi	r2,r23,1
 800a074:	3102d226 	beq	r6,r4,800abc0 <___vfiprintf_internal_r+0x13e4>
 800a078:	35bff404 	addi	r22,r6,-48
 800a07c:	102f883a 	mov	r23,r2
 800a080:	0021883a 	mov	r16,zero
 800a084:	adbe3736 	bltu	r21,r22,8009964 <__alt_data_end+0xfc009964>
 800a088:	0009883a 	mov	r4,zero
 800a08c:	01400284 	movi	r5,10
 800a090:	800c2f80 	call	800c2f8 <__mulsi3>
 800a094:	b9800007 	ldb	r6,0(r23)
 800a098:	b089883a 	add	r4,r22,r2
 800a09c:	bdc00044 	addi	r23,r23,1
 800a0a0:	35bff404 	addi	r22,r6,-48
 800a0a4:	adbff92e 	bgeu	r21,r22,800a08c <__alt_data_end+0xfc00a08c>
 800a0a8:	2021883a 	mov	r16,r4
 800a0ac:	203e2d0e 	bge	r4,zero,8009964 <__alt_data_end+0xfc009964>
 800a0b0:	043fffc4 	movi	r16,-1
 800a0b4:	003e2b06 	br	8009964 <__alt_data_end+0xfc009964>
 800a0b8:	94801014 	ori	r18,r18,64
 800a0bc:	b9800007 	ldb	r6,0(r23)
 800a0c0:	003e2706 	br	8009960 <__alt_data_end+0xfc009960>
 800a0c4:	94800814 	ori	r18,r18,32
 800a0c8:	b9800007 	ldb	r6,0(r23)
 800a0cc:	003e2406 	br	8009960 <__alt_data_end+0xfc009960>
 800a0d0:	d9412317 	ldw	r5,1164(sp)
 800a0d4:	d8812317 	ldw	r2,1164(sp)
 800a0d8:	d8011d85 	stb	zero,1142(sp)
 800a0dc:	29400017 	ldw	r5,0(r5)
 800a0e0:	9811883a 	mov	r8,r19
 800a0e4:	14c00104 	addi	r19,r2,4
 800a0e8:	d9412215 	stw	r5,1160(sp)
 800a0ec:	28029026 	beq	r5,zero,800ab30 <___vfiprintf_internal_r+0x1354>
 800a0f0:	d9012217 	ldw	r4,1160(sp)
 800a0f4:	80027616 	blt	r16,zero,800aad0 <___vfiprintf_internal_r+0x12f4>
 800a0f8:	000b883a 	mov	r5,zero
 800a0fc:	800d883a 	mov	r6,r16
 800a100:	da012a15 	stw	r8,1192(sp)
 800a104:	80079980 	call	8007998 <memchr>
 800a108:	da012a17 	ldw	r8,1192(sp)
 800a10c:	1002a026 	beq	r2,zero,800ab90 <___vfiprintf_internal_r+0x13b4>
 800a110:	d8c12217 	ldw	r3,1160(sp)
 800a114:	10e9c83a 	sub	r20,r2,r3
 800a118:	85023816 	blt	r16,r20,800a9fc <___vfiprintf_internal_r+0x1220>
 800a11c:	dd811d83 	ldbu	r22,1142(sp)
 800a120:	dcc12315 	stw	r19,1164(sp)
 800a124:	0021883a 	mov	r16,zero
 800a128:	003efd06 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a12c:	9080080c 	andi	r2,r18,32
 800a130:	9811883a 	mov	r8,r19
 800a134:	103f9e1e 	bne	r2,zero,8009fb0 <__alt_data_end+0xfc009fb0>
 800a138:	9080040c 	andi	r2,r18,16
 800a13c:	10021726 	beq	r2,zero,800a99c <___vfiprintf_internal_r+0x11c0>
 800a140:	d9412317 	ldw	r5,1164(sp)
 800a144:	002b883a 	mov	r21,zero
 800a148:	00800044 	movi	r2,1
 800a14c:	2cc00017 	ldw	r19,0(r5)
 800a150:	29400104 	addi	r5,r5,4
 800a154:	d9412315 	stw	r5,1164(sp)
 800a158:	9807883a 	mov	r3,r19
 800a15c:	003f8c06 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a160:	d8c12203 	ldbu	r3,1160(sp)
 800a164:	01020074 	movhi	r4,2049
 800a168:	2106c104 	addi	r4,r4,6916
 800a16c:	d8c11d85 	stb	r3,1142(sp)
 800a170:	d9012715 	stw	r4,1180(sp)
 800a174:	90c0080c 	andi	r3,r18,32
 800a178:	9811883a 	mov	r8,r19
 800a17c:	d8812317 	ldw	r2,1164(sp)
 800a180:	183fa11e 	bne	r3,zero,800a008 <__alt_data_end+0xfc00a008>
 800a184:	90c0040c 	andi	r3,r18,16
 800a188:	1801e526 	beq	r3,zero,800a920 <___vfiprintf_internal_r+0x1144>
 800a18c:	d9412317 	ldw	r5,1164(sp)
 800a190:	14c00017 	ldw	r19,0(r2)
 800a194:	002b883a 	mov	r21,zero
 800a198:	29400104 	addi	r5,r5,4
 800a19c:	d9412315 	stw	r5,1164(sp)
 800a1a0:	003f9e06 	br	800a01c <__alt_data_end+0xfc00a01c>
 800a1a4:	9080080c 	andi	r2,r18,32
 800a1a8:	9811883a 	mov	r8,r19
 800a1ac:	103f701e 	bne	r2,zero,8009f70 <__alt_data_end+0xfc009f70>
 800a1b0:	9080040c 	andi	r2,r18,16
 800a1b4:	1001ef26 	beq	r2,zero,800a974 <___vfiprintf_internal_r+0x1198>
 800a1b8:	d9012317 	ldw	r4,1164(sp)
 800a1bc:	002b883a 	mov	r21,zero
 800a1c0:	0005883a 	mov	r2,zero
 800a1c4:	24c00017 	ldw	r19,0(r4)
 800a1c8:	21000104 	addi	r4,r4,4
 800a1cc:	d9012315 	stw	r4,1164(sp)
 800a1d0:	9807883a 	mov	r3,r19
 800a1d4:	003f6e06 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a1d8:	d8c12317 	ldw	r3,1164(sp)
 800a1dc:	9811883a 	mov	r8,r19
 800a1e0:	00800c04 	movi	r2,48
 800a1e4:	1cc00017 	ldw	r19,0(r3)
 800a1e8:	01020074 	movhi	r4,2049
 800a1ec:	18c00104 	addi	r3,r3,4
 800a1f0:	d8811d05 	stb	r2,1140(sp)
 800a1f4:	2106c104 	addi	r4,r4,6916
 800a1f8:	00801e04 	movi	r2,120
 800a1fc:	d8811d45 	stb	r2,1141(sp)
 800a200:	d8c12315 	stw	r3,1164(sp)
 800a204:	002b883a 	mov	r21,zero
 800a208:	94800094 	ori	r18,r18,2
 800a20c:	d9012715 	stw	r4,1180(sp)
 800a210:	00800084 	movi	r2,2
 800a214:	9807883a 	mov	r3,r19
 800a218:	003f5d06 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a21c:	d8c12203 	ldbu	r3,1160(sp)
 800a220:	9080080c 	andi	r2,r18,32
 800a224:	9811883a 	mov	r8,r19
 800a228:	d8c11d85 	stb	r3,1142(sp)
 800a22c:	1001b126 	beq	r2,zero,800a8f4 <___vfiprintf_internal_r+0x1118>
 800a230:	d9012317 	ldw	r4,1164(sp)
 800a234:	d9412517 	ldw	r5,1172(sp)
 800a238:	20800017 	ldw	r2,0(r4)
 800a23c:	2807d7fa 	srai	r3,r5,31
 800a240:	21000104 	addi	r4,r4,4
 800a244:	d9012315 	stw	r4,1164(sp)
 800a248:	11400015 	stw	r5,0(r2)
 800a24c:	10c00115 	stw	r3,4(r2)
 800a250:	003d9a06 	br	80098bc <__alt_data_end+0xfc0098bc>
 800a254:	d8812207 	ldb	r2,1160(sp)
 800a258:	1001c41e 	bne	r2,zero,800a96c <___vfiprintf_internal_r+0x1190>
 800a25c:	00c00804 	movi	r3,32
 800a260:	d8c12205 	stb	r3,1160(sp)
 800a264:	b9800007 	ldb	r6,0(r23)
 800a268:	003dbd06 	br	8009960 <__alt_data_end+0xfc009960>
 800a26c:	00c00ac4 	movi	r3,43
 800a270:	d8c12205 	stb	r3,1160(sp)
 800a274:	b9800007 	ldb	r6,0(r23)
 800a278:	003db906 	br	8009960 <__alt_data_end+0xfc009960>
 800a27c:	d8c12203 	ldbu	r3,1160(sp)
 800a280:	9080080c 	andi	r2,r18,32
 800a284:	9811883a 	mov	r8,r19
 800a288:	d8c11d85 	stb	r3,1142(sp)
 800a28c:	d8c12317 	ldw	r3,1164(sp)
 800a290:	103e7e1e 	bne	r2,zero,8009c8c <__alt_data_end+0xfc009c8c>
 800a294:	9080040c 	andi	r2,r18,16
 800a298:	1001a926 	beq	r2,zero,800a940 <___vfiprintf_internal_r+0x1164>
 800a29c:	1cc00017 	ldw	r19,0(r3)
 800a2a0:	d9412317 	ldw	r5,1164(sp)
 800a2a4:	982bd7fa 	srai	r21,r19,31
 800a2a8:	29400104 	addi	r5,r5,4
 800a2ac:	d9412315 	stw	r5,1164(sp)
 800a2b0:	a805883a 	mov	r2,r21
 800a2b4:	003e7b06 	br	8009ca4 <__alt_data_end+0xfc009ca4>
 800a2b8:	94800054 	ori	r18,r18,1
 800a2bc:	b9800007 	ldb	r6,0(r23)
 800a2c0:	003da706 	br	8009960 <__alt_data_end+0xfc009960>
 800a2c4:	d8c12203 	ldbu	r3,1160(sp)
 800a2c8:	9811883a 	mov	r8,r19
 800a2cc:	d8c11d85 	stb	r3,1142(sp)
 800a2d0:	30005826 	beq	r6,zero,800a434 <___vfiprintf_internal_r+0xc58>
 800a2d4:	05400044 	movi	r21,1
 800a2d8:	d8c10004 	addi	r3,sp,1024
 800a2dc:	d9810005 	stb	r6,1024(sp)
 800a2e0:	d8011d85 	stb	zero,1142(sp)
 800a2e4:	a829883a 	mov	r20,r21
 800a2e8:	d8c12215 	stw	r3,1160(sp)
 800a2ec:	003f1a06 	br	8009f58 <__alt_data_end+0xfc009f58>
 800a2f0:	d9012117 	ldw	r4,1156(sp)
 800a2f4:	d9412017 	ldw	r5,1152(sp)
 800a2f8:	d9811a04 	addi	r6,sp,1128
 800a2fc:	d9c12a15 	stw	r7,1192(sp)
 800a300:	db012b15 	stw	r12,1196(sp)
 800a304:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a308:	d9c12a17 	ldw	r7,1192(sp)
 800a30c:	db012b17 	ldw	r12,1196(sp)
 800a310:	10004e1e 	bne	r2,zero,800a44c <___vfiprintf_internal_r+0xc70>
 800a314:	d9011b17 	ldw	r4,1132(sp)
 800a318:	d8c11c17 	ldw	r3,1136(sp)
 800a31c:	d811883a 	mov	r8,sp
 800a320:	21400044 	addi	r5,r4,1
 800a324:	003e9d06 	br	8009d9c <__alt_data_end+0xfc009d9c>
 800a328:	d9411b17 	ldw	r5,1132(sp)
 800a32c:	d8c11c17 	ldw	r3,1136(sp)
 800a330:	28800044 	addi	r2,r5,1
 800a334:	d9011d87 	ldb	r4,1142(sp)
 800a338:	203eb626 	beq	r4,zero,8009e14 <__alt_data_end+0xfc009e14>
 800a33c:	01000044 	movi	r4,1
 800a340:	d9411d84 	addi	r5,sp,1142
 800a344:	1907883a 	add	r3,r3,r4
 800a348:	41400015 	stw	r5,0(r8)
 800a34c:	41000115 	stw	r4,4(r8)
 800a350:	d8c11c15 	stw	r3,1136(sp)
 800a354:	d8811b15 	stw	r2,1132(sp)
 800a358:	014001c4 	movi	r5,7
 800a35c:	2880ce16 	blt	r5,r2,800a698 <___vfiprintf_internal_r+0xebc>
 800a360:	100b883a 	mov	r5,r2
 800a364:	42000204 	addi	r8,r8,8
 800a368:	10800044 	addi	r2,r2,1
 800a36c:	003ea906 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a370:	d9012117 	ldw	r4,1156(sp)
 800a374:	d9412017 	ldw	r5,1152(sp)
 800a378:	d9811a04 	addi	r6,sp,1128
 800a37c:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a380:	1000321e 	bne	r2,zero,800a44c <___vfiprintf_internal_r+0xc70>
 800a384:	d9411b17 	ldw	r5,1132(sp)
 800a388:	d8c11c17 	ldw	r3,1136(sp)
 800a38c:	d811883a 	mov	r8,sp
 800a390:	28800044 	addi	r2,r5,1
 800a394:	003eba06 	br	8009e80 <__alt_data_end+0xfc009e80>
 800a398:	10803fcc 	andi	r2,r2,255
 800a39c:	00c00044 	movi	r3,1
 800a3a0:	10fe4d1e 	bne	r2,r3,8009cd8 <__alt_data_end+0xfc009cd8>
 800a3a4:	a800021e 	bne	r21,zero,800a3b0 <___vfiprintf_internal_r+0xbd4>
 800a3a8:	00800244 	movi	r2,9
 800a3ac:	14c01b2e 	bgeu	r2,r19,800a41c <___vfiprintf_internal_r+0xc40>
 800a3b0:	dc012215 	stw	r16,1160(sp)
 800a3b4:	dd010a04 	addi	r20,sp,1064
 800a3b8:	a821883a 	mov	r16,r21
 800a3bc:	402b883a 	mov	r21,r8
 800a3c0:	9809883a 	mov	r4,r19
 800a3c4:	800b883a 	mov	r5,r16
 800a3c8:	01800284 	movi	r6,10
 800a3cc:	000f883a 	mov	r7,zero
 800a3d0:	800bbb00 	call	800bbb0 <__umoddi3>
 800a3d4:	10800c04 	addi	r2,r2,48
 800a3d8:	a53fffc4 	addi	r20,r20,-1
 800a3dc:	9809883a 	mov	r4,r19
 800a3e0:	800b883a 	mov	r5,r16
 800a3e4:	01800284 	movi	r6,10
 800a3e8:	000f883a 	mov	r7,zero
 800a3ec:	a0800005 	stb	r2,0(r20)
 800a3f0:	800b5700 	call	800b570 <__udivdi3>
 800a3f4:	1027883a 	mov	r19,r2
 800a3f8:	10c4b03a 	or	r2,r2,r3
 800a3fc:	1821883a 	mov	r16,r3
 800a400:	103fef1e 	bne	r2,zero,800a3c0 <__alt_data_end+0xfc00a3c0>
 800a404:	d9011e17 	ldw	r4,1144(sp)
 800a408:	dc012217 	ldw	r16,1160(sp)
 800a40c:	a811883a 	mov	r8,r21
 800a410:	dd012215 	stw	r20,1160(sp)
 800a414:	2529c83a 	sub	r20,r4,r20
 800a418:	003e4106 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a41c:	9cc00c04 	addi	r19,r19,48
 800a420:	d8c109c4 	addi	r3,sp,1063
 800a424:	dcc109c5 	stb	r19,1063(sp)
 800a428:	dd012817 	ldw	r20,1184(sp)
 800a42c:	d8c12215 	stw	r3,1160(sp)
 800a430:	003e3b06 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a434:	d8811c17 	ldw	r2,1136(sp)
 800a438:	10000426 	beq	r2,zero,800a44c <___vfiprintf_internal_r+0xc70>
 800a43c:	d9012117 	ldw	r4,1156(sp)
 800a440:	d9412017 	ldw	r5,1152(sp)
 800a444:	d9811a04 	addi	r6,sp,1128
 800a448:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a44c:	d9412017 	ldw	r5,1152(sp)
 800a450:	2880030b 	ldhu	r2,12(r5)
 800a454:	1080100c 	andi	r2,r2,64
 800a458:	103ddc1e 	bne	r2,zero,8009bcc <__alt_data_end+0xfc009bcc>
 800a45c:	d8812517 	ldw	r2,1172(sp)
 800a460:	003ddb06 	br	8009bd0 <__alt_data_end+0xfc009bd0>
 800a464:	1801061e 	bne	r3,zero,800a880 <___vfiprintf_internal_r+0x10a4>
 800a468:	d8c12217 	ldw	r3,1160(sp)
 800a46c:	00800044 	movi	r2,1
 800a470:	dd000115 	stw	r20,4(sp)
 800a474:	d8c00015 	stw	r3,0(sp)
 800a478:	dd011c15 	stw	r20,1136(sp)
 800a47c:	d8811b15 	stw	r2,1132(sp)
 800a480:	a007883a 	mov	r3,r20
 800a484:	d811883a 	mov	r8,sp
 800a488:	42000204 	addi	r8,r8,8
 800a48c:	9480010c 	andi	r18,r18,4
 800a490:	90003426 	beq	r18,zero,800a564 <___vfiprintf_internal_r+0xd88>
 800a494:	d9412417 	ldw	r5,1168(sp)
 800a498:	2d65c83a 	sub	r18,r5,r21
 800a49c:	0480310e 	bge	zero,r18,800a564 <___vfiprintf_internal_r+0xd88>
 800a4a0:	04000404 	movi	r16,16
 800a4a4:	8481ad0e 	bge	r16,r18,800ab5c <___vfiprintf_internal_r+0x1380>
 800a4a8:	01420074 	movhi	r5,2049
 800a4ac:	29472604 	addi	r5,r5,7320
 800a4b0:	d9011b17 	ldw	r4,1132(sp)
 800a4b4:	d9412615 	stw	r5,1176(sp)
 800a4b8:	04c001c4 	movi	r19,7
 800a4bc:	dd012117 	ldw	r20,1156(sp)
 800a4c0:	dd812017 	ldw	r22,1152(sp)
 800a4c4:	00000506 	br	800a4dc <___vfiprintf_internal_r+0xd00>
 800a4c8:	21400084 	addi	r5,r4,2
 800a4cc:	42000204 	addi	r8,r8,8
 800a4d0:	1009883a 	mov	r4,r2
 800a4d4:	94bffc04 	addi	r18,r18,-16
 800a4d8:	84800d0e 	bge	r16,r18,800a510 <___vfiprintf_internal_r+0xd34>
 800a4dc:	18c00404 	addi	r3,r3,16
 800a4e0:	20800044 	addi	r2,r4,1
 800a4e4:	47000015 	stw	fp,0(r8)
 800a4e8:	44000115 	stw	r16,4(r8)
 800a4ec:	d8c11c15 	stw	r3,1136(sp)
 800a4f0:	d8811b15 	stw	r2,1132(sp)
 800a4f4:	98bff40e 	bge	r19,r2,800a4c8 <__alt_data_end+0xfc00a4c8>
 800a4f8:	1800291e 	bne	r3,zero,800a5a0 <___vfiprintf_internal_r+0xdc4>
 800a4fc:	94bffc04 	addi	r18,r18,-16
 800a500:	0009883a 	mov	r4,zero
 800a504:	01400044 	movi	r5,1
 800a508:	d811883a 	mov	r8,sp
 800a50c:	84bff316 	blt	r16,r18,800a4dc <__alt_data_end+0xfc00a4dc>
 800a510:	d8812617 	ldw	r2,1176(sp)
 800a514:	1c87883a 	add	r3,r3,r18
 800a518:	44800115 	stw	r18,4(r8)
 800a51c:	40800015 	stw	r2,0(r8)
 800a520:	d8c11c15 	stw	r3,1136(sp)
 800a524:	d9411b15 	stw	r5,1132(sp)
 800a528:	008001c4 	movi	r2,7
 800a52c:	11400d0e 	bge	r2,r5,800a564 <___vfiprintf_internal_r+0xd88>
 800a530:	1800061e 	bne	r3,zero,800a54c <___vfiprintf_internal_r+0xd70>
 800a534:	d8c12417 	ldw	r3,1168(sp)
 800a538:	a8c12e16 	blt	r21,r3,800a9f4 <___vfiprintf_internal_r+0x1218>
 800a53c:	d9012517 	ldw	r4,1172(sp)
 800a540:	2549883a 	add	r4,r4,r21
 800a544:	d9012515 	stw	r4,1172(sp)
 800a548:	00001206 	br	800a594 <___vfiprintf_internal_r+0xdb8>
 800a54c:	d9012117 	ldw	r4,1156(sp)
 800a550:	d9412017 	ldw	r5,1152(sp)
 800a554:	d9811a04 	addi	r6,sp,1128
 800a558:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a55c:	103fbb1e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a560:	d8c11c17 	ldw	r3,1136(sp)
 800a564:	d8812417 	ldw	r2,1168(sp)
 800a568:	a880010e 	bge	r21,r2,800a570 <___vfiprintf_internal_r+0xd94>
 800a56c:	102b883a 	mov	r21,r2
 800a570:	d9012517 	ldw	r4,1172(sp)
 800a574:	2549883a 	add	r4,r4,r21
 800a578:	d9012515 	stw	r4,1172(sp)
 800a57c:	18000526 	beq	r3,zero,800a594 <___vfiprintf_internal_r+0xdb8>
 800a580:	d9012117 	ldw	r4,1156(sp)
 800a584:	d9412017 	ldw	r5,1152(sp)
 800a588:	d9811a04 	addi	r6,sp,1128
 800a58c:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a590:	103fae1e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a594:	d8011b15 	stw	zero,1132(sp)
 800a598:	d811883a 	mov	r8,sp
 800a59c:	003cc706 	br	80098bc <__alt_data_end+0xfc0098bc>
 800a5a0:	a009883a 	mov	r4,r20
 800a5a4:	b00b883a 	mov	r5,r22
 800a5a8:	d9811a04 	addi	r6,sp,1128
 800a5ac:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a5b0:	103fa61e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a5b4:	d9011b17 	ldw	r4,1132(sp)
 800a5b8:	d8c11c17 	ldw	r3,1136(sp)
 800a5bc:	d811883a 	mov	r8,sp
 800a5c0:	21400044 	addi	r5,r4,1
 800a5c4:	003fc306 	br	800a4d4 <__alt_data_end+0xfc00a4d4>
 800a5c8:	d9012417 	ldw	r4,1168(sp)
 800a5cc:	256dc83a 	sub	r22,r4,r21
 800a5d0:	05be1f0e 	bge	zero,r22,8009e50 <__alt_data_end+0xfc009e50>
 800a5d4:	04c00404 	movi	r19,16
 800a5d8:	9d81720e 	bge	r19,r22,800aba4 <___vfiprintf_internal_r+0x13c8>
 800a5dc:	00820074 	movhi	r2,2049
 800a5e0:	10872204 	addi	r2,r2,7304
 800a5e4:	d8812615 	stw	r2,1176(sp)
 800a5e8:	028001c4 	movi	r10,7
 800a5ec:	00000506 	br	800a604 <___vfiprintf_internal_r+0xe28>
 800a5f0:	29000084 	addi	r4,r5,2
 800a5f4:	42000204 	addi	r8,r8,8
 800a5f8:	100b883a 	mov	r5,r2
 800a5fc:	b5bffc04 	addi	r22,r22,-16
 800a600:	9d800d0e 	bge	r19,r22,800a638 <___vfiprintf_internal_r+0xe5c>
 800a604:	18c00404 	addi	r3,r3,16
 800a608:	28800044 	addi	r2,r5,1
 800a60c:	44400015 	stw	r17,0(r8)
 800a610:	44c00115 	stw	r19,4(r8)
 800a614:	d8c11c15 	stw	r3,1136(sp)
 800a618:	d8811b15 	stw	r2,1132(sp)
 800a61c:	50bff40e 	bge	r10,r2,800a5f0 <__alt_data_end+0xfc00a5f0>
 800a620:	1800111e 	bne	r3,zero,800a668 <___vfiprintf_internal_r+0xe8c>
 800a624:	b5bffc04 	addi	r22,r22,-16
 800a628:	000b883a 	mov	r5,zero
 800a62c:	01000044 	movi	r4,1
 800a630:	d811883a 	mov	r8,sp
 800a634:	9dbff316 	blt	r19,r22,800a604 <__alt_data_end+0xfc00a604>
 800a638:	d9412617 	ldw	r5,1176(sp)
 800a63c:	1d87883a 	add	r3,r3,r22
 800a640:	45800115 	stw	r22,4(r8)
 800a644:	41400015 	stw	r5,0(r8)
 800a648:	d8c11c15 	stw	r3,1136(sp)
 800a64c:	d9011b15 	stw	r4,1132(sp)
 800a650:	008001c4 	movi	r2,7
 800a654:	11008516 	blt	r2,r4,800a86c <___vfiprintf_internal_r+0x1090>
 800a658:	42000204 	addi	r8,r8,8
 800a65c:	20800044 	addi	r2,r4,1
 800a660:	200b883a 	mov	r5,r4
 800a664:	003dfa06 	br	8009e50 <__alt_data_end+0xfc009e50>
 800a668:	d9012117 	ldw	r4,1156(sp)
 800a66c:	d9412017 	ldw	r5,1152(sp)
 800a670:	d9811a04 	addi	r6,sp,1128
 800a674:	da812a15 	stw	r10,1192(sp)
 800a678:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a67c:	da812a17 	ldw	r10,1192(sp)
 800a680:	103f721e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a684:	d9411b17 	ldw	r5,1132(sp)
 800a688:	d8c11c17 	ldw	r3,1136(sp)
 800a68c:	d811883a 	mov	r8,sp
 800a690:	29000044 	addi	r4,r5,1
 800a694:	003fd906 	br	800a5fc <__alt_data_end+0xfc00a5fc>
 800a698:	1800681e 	bne	r3,zero,800a83c <___vfiprintf_internal_r+0x1060>
 800a69c:	50004d26 	beq	r10,zero,800a7d4 <___vfiprintf_internal_r+0xff8>
 800a6a0:	d8811d04 	addi	r2,sp,1140
 800a6a4:	00c00084 	movi	r3,2
 800a6a8:	d8800015 	stw	r2,0(sp)
 800a6ac:	d8c00115 	stw	r3,4(sp)
 800a6b0:	2005883a 	mov	r2,r4
 800a6b4:	d811883a 	mov	r8,sp
 800a6b8:	003de006 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a6bc:	1800551e 	bne	r3,zero,800a814 <___vfiprintf_internal_r+0x1038>
 800a6c0:	000b883a 	mov	r5,zero
 800a6c4:	00800044 	movi	r2,1
 800a6c8:	d811883a 	mov	r8,sp
 800a6cc:	003dde06 	br	8009e48 <__alt_data_end+0xfc009e48>
 800a6d0:	10803fcc 	andi	r2,r2,255
 800a6d4:	1000191e 	bne	r2,zero,800a73c <___vfiprintf_internal_r+0xf60>
 800a6d8:	9080004c 	andi	r2,r18,1
 800a6dc:	10001726 	beq	r2,zero,800a73c <___vfiprintf_internal_r+0xf60>
 800a6e0:	00800c04 	movi	r2,48
 800a6e4:	d8c109c4 	addi	r3,sp,1063
 800a6e8:	d88109c5 	stb	r2,1063(sp)
 800a6ec:	dd012817 	ldw	r20,1184(sp)
 800a6f0:	d8c12215 	stw	r3,1160(sp)
 800a6f4:	003d8a06 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a6f8:	d9012717 	ldw	r4,1180(sp)
 800a6fc:	dd010a04 	addi	r20,sp,1064
 800a700:	988003cc 	andi	r2,r19,15
 800a704:	a806973a 	slli	r3,r21,28
 800a708:	2085883a 	add	r2,r4,r2
 800a70c:	9826d13a 	srli	r19,r19,4
 800a710:	10800003 	ldbu	r2,0(r2)
 800a714:	a82ad13a 	srli	r21,r21,4
 800a718:	a53fffc4 	addi	r20,r20,-1
 800a71c:	1ce6b03a 	or	r19,r3,r19
 800a720:	a0800005 	stb	r2,0(r20)
 800a724:	9d44b03a 	or	r2,r19,r21
 800a728:	103ff51e 	bne	r2,zero,800a700 <__alt_data_end+0xfc00a700>
 800a72c:	d9411e17 	ldw	r5,1144(sp)
 800a730:	dd012215 	stw	r20,1160(sp)
 800a734:	2d29c83a 	sub	r20,r5,r20
 800a738:	003d7906 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a73c:	d8c10a04 	addi	r3,sp,1064
 800a740:	d8c12215 	stw	r3,1160(sp)
 800a744:	003d7606 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a748:	18009e1e 	bne	r3,zero,800a9c4 <___vfiprintf_internal_r+0x11e8>
 800a74c:	d8811d87 	ldb	r2,1142(sp)
 800a750:	10005f26 	beq	r2,zero,800a8d0 <___vfiprintf_internal_r+0x10f4>
 800a754:	00c00044 	movi	r3,1
 800a758:	d9011d84 	addi	r4,sp,1142
 800a75c:	1805883a 	mov	r2,r3
 800a760:	d9000015 	stw	r4,0(sp)
 800a764:	d8c00115 	stw	r3,4(sp)
 800a768:	d811883a 	mov	r8,sp
 800a76c:	003efc06 	br	800a360 <__alt_data_end+0xfc00a360>
 800a770:	d9412417 	ldw	r5,1168(sp)
 800a774:	d811883a 	mov	r8,sp
 800a778:	2d65c83a 	sub	r18,r5,r21
 800a77c:	04bf4816 	blt	zero,r18,800a4a0 <__alt_data_end+0xfc00a4a0>
 800a780:	003f6c06 	br	800a534 <__alt_data_end+0xfc00a534>
 800a784:	b829883a 	mov	r20,r23
 800a788:	003c6906 	br	8009930 <__alt_data_end+0xfc009930>
 800a78c:	d9012117 	ldw	r4,1156(sp)
 800a790:	d9412017 	ldw	r5,1152(sp)
 800a794:	d9811a04 	addi	r6,sp,1128
 800a798:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a79c:	103f2b1e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a7a0:	d8c11c17 	ldw	r3,1136(sp)
 800a7a4:	d811883a 	mov	r8,sp
 800a7a8:	003f3806 	br	800a48c <__alt_data_end+0xfc00a48c>
 800a7ac:	00800084 	movi	r2,2
 800a7b0:	9d46b03a 	or	r3,r19,r21
 800a7b4:	003df606 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a7b8:	d9012117 	ldw	r4,1156(sp)
 800a7bc:	d9412017 	ldw	r5,1152(sp)
 800a7c0:	d9811a04 	addi	r6,sp,1128
 800a7c4:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a7c8:	103f201e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a7cc:	d811883a 	mov	r8,sp
 800a7d0:	003cc606 	br	8009aec <__alt_data_end+0xfc009aec>
 800a7d4:	000b883a 	mov	r5,zero
 800a7d8:	2005883a 	mov	r2,r4
 800a7dc:	d811883a 	mov	r8,sp
 800a7e0:	003d9906 	br	8009e48 <__alt_data_end+0xfc009e48>
 800a7e4:	10803fcc 	andi	r2,r2,255
 800a7e8:	1080201c 	xori	r2,r2,128
 800a7ec:	10bfe004 	addi	r2,r2,-128
 800a7f0:	01000c04 	movi	r4,48
 800a7f4:	1100b226 	beq	r2,r4,800aac0 <___vfiprintf_internal_r+0x12e4>
 800a7f8:	d9412217 	ldw	r5,1160(sp)
 800a7fc:	d8811e17 	ldw	r2,1144(sp)
 800a800:	193fffc5 	stb	r4,-1(r3)
 800a804:	297fffc4 	addi	r5,r5,-1
 800a808:	d9412215 	stw	r5,1160(sp)
 800a80c:	1169c83a 	sub	r20,r2,r5
 800a810:	003d4306 	br	8009d20 <__alt_data_end+0xfc009d20>
 800a814:	d9012117 	ldw	r4,1156(sp)
 800a818:	d9412017 	ldw	r5,1152(sp)
 800a81c:	d9811a04 	addi	r6,sp,1128
 800a820:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a824:	103f091e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a828:	d9411b17 	ldw	r5,1132(sp)
 800a82c:	d8c11c17 	ldw	r3,1136(sp)
 800a830:	d811883a 	mov	r8,sp
 800a834:	28800044 	addi	r2,r5,1
 800a838:	003d8306 	br	8009e48 <__alt_data_end+0xfc009e48>
 800a83c:	d9012117 	ldw	r4,1156(sp)
 800a840:	d9412017 	ldw	r5,1152(sp)
 800a844:	d9811a04 	addi	r6,sp,1128
 800a848:	da812a15 	stw	r10,1192(sp)
 800a84c:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a850:	da812a17 	ldw	r10,1192(sp)
 800a854:	103efd1e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a858:	d9411b17 	ldw	r5,1132(sp)
 800a85c:	d8c11c17 	ldw	r3,1136(sp)
 800a860:	d811883a 	mov	r8,sp
 800a864:	28800044 	addi	r2,r5,1
 800a868:	003d6a06 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a86c:	1800a01e 	bne	r3,zero,800aaf0 <___vfiprintf_internal_r+0x1314>
 800a870:	000b883a 	mov	r5,zero
 800a874:	00800044 	movi	r2,1
 800a878:	d811883a 	mov	r8,sp
 800a87c:	003d7406 	br	8009e50 <__alt_data_end+0xfc009e50>
 800a880:	d9012117 	ldw	r4,1156(sp)
 800a884:	d9412017 	ldw	r5,1152(sp)
 800a888:	d9811a04 	addi	r6,sp,1128
 800a88c:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a890:	103eee1e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a894:	d8811b17 	ldw	r2,1132(sp)
 800a898:	d8c11c17 	ldw	r3,1136(sp)
 800a89c:	d811883a 	mov	r8,sp
 800a8a0:	10800044 	addi	r2,r2,1
 800a8a4:	003d8f06 	br	8009ee4 <__alt_data_end+0xfc009ee4>
 800a8a8:	04e7c83a 	sub	r19,zero,r19
 800a8ac:	9804c03a 	cmpne	r2,r19,zero
 800a8b0:	056bc83a 	sub	r21,zero,r21
 800a8b4:	a8abc83a 	sub	r21,r21,r2
 800a8b8:	05800b44 	movi	r22,45
 800a8bc:	dd811d85 	stb	r22,1142(sp)
 800a8c0:	8029883a 	mov	r20,r16
 800a8c4:	00800044 	movi	r2,1
 800a8c8:	9d46b03a 	or	r3,r19,r21
 800a8cc:	003cfa06 	br	8009cb8 <__alt_data_end+0xfc009cb8>
 800a8d0:	000b883a 	mov	r5,zero
 800a8d4:	00800044 	movi	r2,1
 800a8d8:	d811883a 	mov	r8,sp
 800a8dc:	503d5a26 	beq	r10,zero,8009e48 <__alt_data_end+0xfc009e48>
 800a8e0:	00c00084 	movi	r3,2
 800a8e4:	d9011d04 	addi	r4,sp,1140
 800a8e8:	d9000015 	stw	r4,0(sp)
 800a8ec:	d8c00115 	stw	r3,4(sp)
 800a8f0:	003d5206 	br	8009e3c <__alt_data_end+0xfc009e3c>
 800a8f4:	9080040c 	andi	r2,r18,16
 800a8f8:	1000421e 	bne	r2,zero,800aa04 <___vfiprintf_internal_r+0x1228>
 800a8fc:	9480100c 	andi	r18,r18,64
 800a900:	90009c26 	beq	r18,zero,800ab74 <___vfiprintf_internal_r+0x1398>
 800a904:	d9412317 	ldw	r5,1164(sp)
 800a908:	d8c12517 	ldw	r3,1172(sp)
 800a90c:	28800017 	ldw	r2,0(r5)
 800a910:	29400104 	addi	r5,r5,4
 800a914:	d9412315 	stw	r5,1164(sp)
 800a918:	10c0000d 	sth	r3,0(r2)
 800a91c:	003be706 	br	80098bc <__alt_data_end+0xfc0098bc>
 800a920:	90c0100c 	andi	r3,r18,64
 800a924:	18003e26 	beq	r3,zero,800aa20 <___vfiprintf_internal_r+0x1244>
 800a928:	d8c12317 	ldw	r3,1164(sp)
 800a92c:	14c0000b 	ldhu	r19,0(r2)
 800a930:	002b883a 	mov	r21,zero
 800a934:	18c00104 	addi	r3,r3,4
 800a938:	d8c12315 	stw	r3,1164(sp)
 800a93c:	003db706 	br	800a01c <__alt_data_end+0xfc00a01c>
 800a940:	9080100c 	andi	r2,r18,64
 800a944:	10004c26 	beq	r2,zero,800aa78 <___vfiprintf_internal_r+0x129c>
 800a948:	1cc0000f 	ldh	r19,0(r3)
 800a94c:	d8812317 	ldw	r2,1164(sp)
 800a950:	982bd7fa 	srai	r21,r19,31
 800a954:	10800104 	addi	r2,r2,4
 800a958:	d8812315 	stw	r2,1164(sp)
 800a95c:	a805883a 	mov	r2,r21
 800a960:	003cd006 	br	8009ca4 <__alt_data_end+0xfc009ca4>
 800a964:	00800084 	movi	r2,2
 800a968:	003d8906 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a96c:	b9800007 	ldb	r6,0(r23)
 800a970:	003bfb06 	br	8009960 <__alt_data_end+0xfc009960>
 800a974:	9080100c 	andi	r2,r18,64
 800a978:	10003726 	beq	r2,zero,800aa58 <___vfiprintf_internal_r+0x127c>
 800a97c:	d9412317 	ldw	r5,1164(sp)
 800a980:	002b883a 	mov	r21,zero
 800a984:	0005883a 	mov	r2,zero
 800a988:	2cc0000b 	ldhu	r19,0(r5)
 800a98c:	29400104 	addi	r5,r5,4
 800a990:	d9412315 	stw	r5,1164(sp)
 800a994:	9807883a 	mov	r3,r19
 800a998:	003d7d06 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a99c:	9080100c 	andi	r2,r18,64
 800a9a0:	10002526 	beq	r2,zero,800aa38 <___vfiprintf_internal_r+0x125c>
 800a9a4:	d8812317 	ldw	r2,1164(sp)
 800a9a8:	002b883a 	mov	r21,zero
 800a9ac:	14c0000b 	ldhu	r19,0(r2)
 800a9b0:	10800104 	addi	r2,r2,4
 800a9b4:	d8812315 	stw	r2,1164(sp)
 800a9b8:	9807883a 	mov	r3,r19
 800a9bc:	00800044 	movi	r2,1
 800a9c0:	003d7306 	br	8009f90 <__alt_data_end+0xfc009f90>
 800a9c4:	d9012117 	ldw	r4,1156(sp)
 800a9c8:	d9412017 	ldw	r5,1152(sp)
 800a9cc:	d9811a04 	addi	r6,sp,1128
 800a9d0:	da812a15 	stw	r10,1192(sp)
 800a9d4:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800a9d8:	da812a17 	ldw	r10,1192(sp)
 800a9dc:	103e9b1e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800a9e0:	d9411b17 	ldw	r5,1132(sp)
 800a9e4:	d8c11c17 	ldw	r3,1136(sp)
 800a9e8:	d811883a 	mov	r8,sp
 800a9ec:	28800044 	addi	r2,r5,1
 800a9f0:	003e5006 	br	800a334 <__alt_data_end+0xfc00a334>
 800a9f4:	182b883a 	mov	r21,r3
 800a9f8:	003ed006 	br	800a53c <__alt_data_end+0xfc00a53c>
 800a9fc:	8029883a 	mov	r20,r16
 800aa00:	003dc606 	br	800a11c <__alt_data_end+0xfc00a11c>
 800aa04:	d8c12317 	ldw	r3,1164(sp)
 800aa08:	d9012517 	ldw	r4,1172(sp)
 800aa0c:	18800017 	ldw	r2,0(r3)
 800aa10:	18c00104 	addi	r3,r3,4
 800aa14:	d8c12315 	stw	r3,1164(sp)
 800aa18:	11000015 	stw	r4,0(r2)
 800aa1c:	003ba706 	br	80098bc <__alt_data_end+0xfc0098bc>
 800aa20:	d9012317 	ldw	r4,1164(sp)
 800aa24:	14c00017 	ldw	r19,0(r2)
 800aa28:	002b883a 	mov	r21,zero
 800aa2c:	21000104 	addi	r4,r4,4
 800aa30:	d9012315 	stw	r4,1164(sp)
 800aa34:	003d7906 	br	800a01c <__alt_data_end+0xfc00a01c>
 800aa38:	d8c12317 	ldw	r3,1164(sp)
 800aa3c:	002b883a 	mov	r21,zero
 800aa40:	00800044 	movi	r2,1
 800aa44:	1cc00017 	ldw	r19,0(r3)
 800aa48:	18c00104 	addi	r3,r3,4
 800aa4c:	d8c12315 	stw	r3,1164(sp)
 800aa50:	9807883a 	mov	r3,r19
 800aa54:	003d4e06 	br	8009f90 <__alt_data_end+0xfc009f90>
 800aa58:	d8812317 	ldw	r2,1164(sp)
 800aa5c:	002b883a 	mov	r21,zero
 800aa60:	14c00017 	ldw	r19,0(r2)
 800aa64:	10800104 	addi	r2,r2,4
 800aa68:	d8812315 	stw	r2,1164(sp)
 800aa6c:	9807883a 	mov	r3,r19
 800aa70:	0005883a 	mov	r2,zero
 800aa74:	003d4606 	br	8009f90 <__alt_data_end+0xfc009f90>
 800aa78:	1cc00017 	ldw	r19,0(r3)
 800aa7c:	d8c12317 	ldw	r3,1164(sp)
 800aa80:	982bd7fa 	srai	r21,r19,31
 800aa84:	18c00104 	addi	r3,r3,4
 800aa88:	d8c12315 	stw	r3,1164(sp)
 800aa8c:	a805883a 	mov	r2,r21
 800aa90:	003c8406 	br	8009ca4 <__alt_data_end+0xfc009ca4>
 800aa94:	01020074 	movhi	r4,2049
 800aa98:	21072204 	addi	r4,r4,7304
 800aa9c:	d9012615 	stw	r4,1176(sp)
 800aaa0:	003d0606 	br	8009ebc <__alt_data_end+0xfc009ebc>
 800aaa4:	b9800043 	ldbu	r6,1(r23)
 800aaa8:	94800814 	ori	r18,r18,32
 800aaac:	bdc00044 	addi	r23,r23,1
 800aab0:	31803fcc 	andi	r6,r6,255
 800aab4:	3180201c 	xori	r6,r6,128
 800aab8:	31bfe004 	addi	r6,r6,-128
 800aabc:	003ba806 	br	8009960 <__alt_data_end+0xfc009960>
 800aac0:	d8811e17 	ldw	r2,1144(sp)
 800aac4:	d8c12217 	ldw	r3,1160(sp)
 800aac8:	10e9c83a 	sub	r20,r2,r3
 800aacc:	003c9406 	br	8009d20 <__alt_data_end+0xfc009d20>
 800aad0:	da012a15 	stw	r8,1192(sp)
 800aad4:	80022ec0 	call	80022ec <strlen>
 800aad8:	1029883a 	mov	r20,r2
 800aadc:	dd811d83 	ldbu	r22,1142(sp)
 800aae0:	dcc12315 	stw	r19,1164(sp)
 800aae4:	0021883a 	mov	r16,zero
 800aae8:	da012a17 	ldw	r8,1192(sp)
 800aaec:	003c8c06 	br	8009d20 <__alt_data_end+0xfc009d20>
 800aaf0:	d9012117 	ldw	r4,1156(sp)
 800aaf4:	d9412017 	ldw	r5,1152(sp)
 800aaf8:	d9811a04 	addi	r6,sp,1128
 800aafc:	80096c80 	call	80096c8 <__sprint_r.part.0>
 800ab00:	103e521e 	bne	r2,zero,800a44c <__alt_data_end+0xfc00a44c>
 800ab04:	d9411b17 	ldw	r5,1132(sp)
 800ab08:	d8c11c17 	ldw	r3,1136(sp)
 800ab0c:	d811883a 	mov	r8,sp
 800ab10:	28800044 	addi	r2,r5,1
 800ab14:	003cce06 	br	8009e50 <__alt_data_end+0xfc009e50>
 800ab18:	01420074 	movhi	r5,2049
 800ab1c:	29472604 	addi	r5,r5,7320
 800ab20:	d9412615 	stw	r5,1176(sp)
 800ab24:	d9411b17 	ldw	r5,1132(sp)
 800ab28:	29400044 	addi	r5,r5,1
 800ab2c:	003cad06 	br	8009de4 <__alt_data_end+0xfc009de4>
 800ab30:	00800184 	movi	r2,6
 800ab34:	1400012e 	bgeu	r2,r16,800ab3c <___vfiprintf_internal_r+0x1360>
 800ab38:	1021883a 	mov	r16,r2
 800ab3c:	8029883a 	mov	r20,r16
 800ab40:	802b883a 	mov	r21,r16
 800ab44:	80001c16 	blt	r16,zero,800abb8 <___vfiprintf_internal_r+0x13dc>
 800ab48:	00c20074 	movhi	r3,2049
 800ab4c:	18c6c604 	addi	r3,r3,6936
 800ab50:	dcc12315 	stw	r19,1164(sp)
 800ab54:	d8c12215 	stw	r3,1160(sp)
 800ab58:	003cff06 	br	8009f58 <__alt_data_end+0xfc009f58>
 800ab5c:	d9411b17 	ldw	r5,1132(sp)
 800ab60:	00820074 	movhi	r2,2049
 800ab64:	10872604 	addi	r2,r2,7320
 800ab68:	d8812615 	stw	r2,1176(sp)
 800ab6c:	29400044 	addi	r5,r5,1
 800ab70:	003e6706 	br	800a510 <__alt_data_end+0xfc00a510>
 800ab74:	d9012317 	ldw	r4,1164(sp)
 800ab78:	d9412517 	ldw	r5,1172(sp)
 800ab7c:	20800017 	ldw	r2,0(r4)
 800ab80:	21000104 	addi	r4,r4,4
 800ab84:	d9012315 	stw	r4,1164(sp)
 800ab88:	11400015 	stw	r5,0(r2)
 800ab8c:	003b4b06 	br	80098bc <__alt_data_end+0xfc0098bc>
 800ab90:	8029883a 	mov	r20,r16
 800ab94:	dd811d83 	ldbu	r22,1142(sp)
 800ab98:	dcc12315 	stw	r19,1164(sp)
 800ab9c:	0021883a 	mov	r16,zero
 800aba0:	003c5f06 	br	8009d20 <__alt_data_end+0xfc009d20>
 800aba4:	01020074 	movhi	r4,2049
 800aba8:	21072204 	addi	r4,r4,7304
 800abac:	d9012615 	stw	r4,1176(sp)
 800abb0:	1009883a 	mov	r4,r2
 800abb4:	003ea006 	br	800a638 <__alt_data_end+0xfc00a638>
 800abb8:	002b883a 	mov	r21,zero
 800abbc:	003fe206 	br	800ab48 <__alt_data_end+0xfc00ab48>
 800abc0:	d9412317 	ldw	r5,1164(sp)
 800abc4:	b807883a 	mov	r3,r23
 800abc8:	102f883a 	mov	r23,r2
 800abcc:	2c000017 	ldw	r16,0(r5)
 800abd0:	29000104 	addi	r4,r5,4
 800abd4:	d9012315 	stw	r4,1164(sp)
 800abd8:	80000416 	blt	r16,zero,800abec <___vfiprintf_internal_r+0x1410>
 800abdc:	19800047 	ldb	r6,1(r3)
 800abe0:	003b5f06 	br	8009960 <__alt_data_end+0xfc009960>
 800abe4:	043fffc4 	movi	r16,-1
 800abe8:	003bef06 	br	8009ba8 <__alt_data_end+0xfc009ba8>
 800abec:	043fffc4 	movi	r16,-1
 800abf0:	19800047 	ldb	r6,1(r3)
 800abf4:	003b5a06 	br	8009960 <__alt_data_end+0xfc009960>
 800abf8:	282b883a 	mov	r21,r5
 800abfc:	003cc706 	br	8009f1c <__alt_data_end+0xfc009f1c>

0800ac00 <__vfiprintf_internal>:
 800ac00:	2007883a 	mov	r3,r4
 800ac04:	01020074 	movhi	r4,2049
 800ac08:	210e2304 	addi	r4,r4,14476
 800ac0c:	21000017 	ldw	r4,0(r4)
 800ac10:	2805883a 	mov	r2,r5
 800ac14:	300f883a 	mov	r7,r6
 800ac18:	180b883a 	mov	r5,r3
 800ac1c:	100d883a 	mov	r6,r2
 800ac20:	80097dc1 	jmpi	80097dc <___vfiprintf_internal_r>

0800ac24 <_write_r>:
 800ac24:	defffd04 	addi	sp,sp,-12
 800ac28:	dc000015 	stw	r16,0(sp)
 800ac2c:	04020074 	movhi	r16,2049
 800ac30:	dc400115 	stw	r17,4(sp)
 800ac34:	8414f404 	addi	r16,r16,21456
 800ac38:	2023883a 	mov	r17,r4
 800ac3c:	2809883a 	mov	r4,r5
 800ac40:	300b883a 	mov	r5,r6
 800ac44:	380d883a 	mov	r6,r7
 800ac48:	dfc00215 	stw	ra,8(sp)
 800ac4c:	80000015 	stw	zero,0(r16)
 800ac50:	800f4440 	call	800f444 <write>
 800ac54:	00ffffc4 	movi	r3,-1
 800ac58:	10c00526 	beq	r2,r3,800ac70 <_write_r+0x4c>
 800ac5c:	dfc00217 	ldw	ra,8(sp)
 800ac60:	dc400117 	ldw	r17,4(sp)
 800ac64:	dc000017 	ldw	r16,0(sp)
 800ac68:	dec00304 	addi	sp,sp,12
 800ac6c:	f800283a 	ret
 800ac70:	80c00017 	ldw	r3,0(r16)
 800ac74:	183ff926 	beq	r3,zero,800ac5c <__alt_data_end+0xfc00ac5c>
 800ac78:	88c00015 	stw	r3,0(r17)
 800ac7c:	003ff706 	br	800ac5c <__alt_data_end+0xfc00ac5c>

0800ac80 <_close_r>:
 800ac80:	defffd04 	addi	sp,sp,-12
 800ac84:	dc000015 	stw	r16,0(sp)
 800ac88:	04020074 	movhi	r16,2049
 800ac8c:	dc400115 	stw	r17,4(sp)
 800ac90:	8414f404 	addi	r16,r16,21456
 800ac94:	2023883a 	mov	r17,r4
 800ac98:	2809883a 	mov	r4,r5
 800ac9c:	dfc00215 	stw	ra,8(sp)
 800aca0:	80000015 	stw	zero,0(r16)
 800aca4:	800eb6c0 	call	800eb6c <close>
 800aca8:	00ffffc4 	movi	r3,-1
 800acac:	10c00526 	beq	r2,r3,800acc4 <_close_r+0x44>
 800acb0:	dfc00217 	ldw	ra,8(sp)
 800acb4:	dc400117 	ldw	r17,4(sp)
 800acb8:	dc000017 	ldw	r16,0(sp)
 800acbc:	dec00304 	addi	sp,sp,12
 800acc0:	f800283a 	ret
 800acc4:	80c00017 	ldw	r3,0(r16)
 800acc8:	183ff926 	beq	r3,zero,800acb0 <__alt_data_end+0xfc00acb0>
 800accc:	88c00015 	stw	r3,0(r17)
 800acd0:	003ff706 	br	800acb0 <__alt_data_end+0xfc00acb0>

0800acd4 <_calloc_r>:
 800acd4:	defffe04 	addi	sp,sp,-8
 800acd8:	dc000015 	stw	r16,0(sp)
 800acdc:	2021883a 	mov	r16,r4
 800ace0:	2809883a 	mov	r4,r5
 800ace4:	300b883a 	mov	r5,r6
 800ace8:	dfc00115 	stw	ra,4(sp)
 800acec:	800c2f80 	call	800c2f8 <__mulsi3>
 800acf0:	8009883a 	mov	r4,r16
 800acf4:	100b883a 	mov	r5,r2
 800acf8:	80071f00 	call	80071f0 <_malloc_r>
 800acfc:	1021883a 	mov	r16,r2
 800ad00:	10002826 	beq	r2,zero,800ada4 <_calloc_r+0xd0>
 800ad04:	11bfff17 	ldw	r6,-4(r2)
 800ad08:	00bfff04 	movi	r2,-4
 800ad0c:	00c00904 	movi	r3,36
 800ad10:	308c703a 	and	r6,r6,r2
 800ad14:	308d883a 	add	r6,r6,r2
 800ad18:	19801436 	bltu	r3,r6,800ad6c <_calloc_r+0x98>
 800ad1c:	008004c4 	movi	r2,19
 800ad20:	11800936 	bltu	r2,r6,800ad48 <_calloc_r+0x74>
 800ad24:	8005883a 	mov	r2,r16
 800ad28:	10000015 	stw	zero,0(r2)
 800ad2c:	10000115 	stw	zero,4(r2)
 800ad30:	10000215 	stw	zero,8(r2)
 800ad34:	8005883a 	mov	r2,r16
 800ad38:	dfc00117 	ldw	ra,4(sp)
 800ad3c:	dc000017 	ldw	r16,0(sp)
 800ad40:	dec00204 	addi	sp,sp,8
 800ad44:	f800283a 	ret
 800ad48:	80000015 	stw	zero,0(r16)
 800ad4c:	80000115 	stw	zero,4(r16)
 800ad50:	008006c4 	movi	r2,27
 800ad54:	11800d2e 	bgeu	r2,r6,800ad8c <_calloc_r+0xb8>
 800ad58:	80000215 	stw	zero,8(r16)
 800ad5c:	80000315 	stw	zero,12(r16)
 800ad60:	30c00c26 	beq	r6,r3,800ad94 <_calloc_r+0xc0>
 800ad64:	80800404 	addi	r2,r16,16
 800ad68:	003fef06 	br	800ad28 <__alt_data_end+0xfc00ad28>
 800ad6c:	8009883a 	mov	r4,r16
 800ad70:	000b883a 	mov	r5,zero
 800ad74:	8007d140 	call	8007d14 <memset>
 800ad78:	8005883a 	mov	r2,r16
 800ad7c:	dfc00117 	ldw	ra,4(sp)
 800ad80:	dc000017 	ldw	r16,0(sp)
 800ad84:	dec00204 	addi	sp,sp,8
 800ad88:	f800283a 	ret
 800ad8c:	80800204 	addi	r2,r16,8
 800ad90:	003fe506 	br	800ad28 <__alt_data_end+0xfc00ad28>
 800ad94:	80000415 	stw	zero,16(r16)
 800ad98:	80800604 	addi	r2,r16,24
 800ad9c:	80000515 	stw	zero,20(r16)
 800ada0:	003fe106 	br	800ad28 <__alt_data_end+0xfc00ad28>
 800ada4:	0005883a 	mov	r2,zero
 800ada8:	003fe306 	br	800ad38 <__alt_data_end+0xfc00ad38>

0800adac <_fclose_r>:
 800adac:	28003226 	beq	r5,zero,800ae78 <_fclose_r+0xcc>
 800adb0:	defffc04 	addi	sp,sp,-16
 800adb4:	dc400115 	stw	r17,4(sp)
 800adb8:	2023883a 	mov	r17,r4
 800adbc:	dc000015 	stw	r16,0(sp)
 800adc0:	dfc00315 	stw	ra,12(sp)
 800adc4:	dc800215 	stw	r18,8(sp)
 800adc8:	2821883a 	mov	r16,r5
 800adcc:	80064f00 	call	80064f0 <__sfp_lock_acquire>
 800add0:	88000226 	beq	r17,zero,800addc <_fclose_r+0x30>
 800add4:	88800e17 	ldw	r2,56(r17)
 800add8:	10002926 	beq	r2,zero,800ae80 <_fclose_r+0xd4>
 800addc:	8080030f 	ldh	r2,12(r16)
 800ade0:	10002226 	beq	r2,zero,800ae6c <_fclose_r+0xc0>
 800ade4:	8809883a 	mov	r4,r17
 800ade8:	800b883a 	mov	r5,r16
 800adec:	8005f240 	call	8005f24 <_fflush_r>
 800adf0:	1025883a 	mov	r18,r2
 800adf4:	80800b17 	ldw	r2,44(r16)
 800adf8:	10000426 	beq	r2,zero,800ae0c <_fclose_r+0x60>
 800adfc:	81400717 	ldw	r5,28(r16)
 800ae00:	8809883a 	mov	r4,r17
 800ae04:	103ee83a 	callr	r2
 800ae08:	10002616 	blt	r2,zero,800aea4 <_fclose_r+0xf8>
 800ae0c:	8080030b 	ldhu	r2,12(r16)
 800ae10:	1080200c 	andi	r2,r2,128
 800ae14:	10001f1e 	bne	r2,zero,800ae94 <_fclose_r+0xe8>
 800ae18:	81400c17 	ldw	r5,48(r16)
 800ae1c:	28000526 	beq	r5,zero,800ae34 <_fclose_r+0x88>
 800ae20:	80801004 	addi	r2,r16,64
 800ae24:	28800226 	beq	r5,r2,800ae30 <_fclose_r+0x84>
 800ae28:	8809883a 	mov	r4,r17
 800ae2c:	80066540 	call	8006654 <_free_r>
 800ae30:	80000c15 	stw	zero,48(r16)
 800ae34:	81401117 	ldw	r5,68(r16)
 800ae38:	28000326 	beq	r5,zero,800ae48 <_fclose_r+0x9c>
 800ae3c:	8809883a 	mov	r4,r17
 800ae40:	80066540 	call	8006654 <_free_r>
 800ae44:	80001115 	stw	zero,68(r16)
 800ae48:	8000030d 	sth	zero,12(r16)
 800ae4c:	80064f40 	call	80064f4 <__sfp_lock_release>
 800ae50:	9005883a 	mov	r2,r18
 800ae54:	dfc00317 	ldw	ra,12(sp)
 800ae58:	dc800217 	ldw	r18,8(sp)
 800ae5c:	dc400117 	ldw	r17,4(sp)
 800ae60:	dc000017 	ldw	r16,0(sp)
 800ae64:	dec00404 	addi	sp,sp,16
 800ae68:	f800283a 	ret
 800ae6c:	80064f40 	call	80064f4 <__sfp_lock_release>
 800ae70:	0005883a 	mov	r2,zero
 800ae74:	003ff706 	br	800ae54 <__alt_data_end+0xfc00ae54>
 800ae78:	0005883a 	mov	r2,zero
 800ae7c:	f800283a 	ret
 800ae80:	8809883a 	mov	r4,r17
 800ae84:	80064e00 	call	80064e0 <__sinit>
 800ae88:	8080030f 	ldh	r2,12(r16)
 800ae8c:	103fd51e 	bne	r2,zero,800ade4 <__alt_data_end+0xfc00ade4>
 800ae90:	003ff606 	br	800ae6c <__alt_data_end+0xfc00ae6c>
 800ae94:	81400417 	ldw	r5,16(r16)
 800ae98:	8809883a 	mov	r4,r17
 800ae9c:	80066540 	call	8006654 <_free_r>
 800aea0:	003fdd06 	br	800ae18 <__alt_data_end+0xfc00ae18>
 800aea4:	04bfffc4 	movi	r18,-1
 800aea8:	003fd806 	br	800ae0c <__alt_data_end+0xfc00ae0c>

0800aeac <fclose>:
 800aeac:	00820074 	movhi	r2,2049
 800aeb0:	108e2304 	addi	r2,r2,14476
 800aeb4:	200b883a 	mov	r5,r4
 800aeb8:	11000017 	ldw	r4,0(r2)
 800aebc:	800adac1 	jmpi	800adac <_fclose_r>

0800aec0 <_fputwc_r>:
 800aec0:	3080030b 	ldhu	r2,12(r6)
 800aec4:	defff804 	addi	sp,sp,-32
 800aec8:	dcc00415 	stw	r19,16(sp)
 800aecc:	dc800315 	stw	r18,12(sp)
 800aed0:	dc000115 	stw	r16,4(sp)
 800aed4:	dfc00715 	stw	ra,28(sp)
 800aed8:	dd400615 	stw	r21,24(sp)
 800aedc:	dd000515 	stw	r20,20(sp)
 800aee0:	dc400215 	stw	r17,8(sp)
 800aee4:	10c8000c 	andi	r3,r2,8192
 800aee8:	3021883a 	mov	r16,r6
 800aeec:	2027883a 	mov	r19,r4
 800aef0:	2825883a 	mov	r18,r5
 800aef4:	1800051e 	bne	r3,zero,800af0c <_fputwc_r+0x4c>
 800aef8:	30c01917 	ldw	r3,100(r6)
 800aefc:	10880014 	ori	r2,r2,8192
 800af00:	3080030d 	sth	r2,12(r6)
 800af04:	18880014 	ori	r2,r3,8192
 800af08:	30801915 	stw	r2,100(r6)
 800af0c:	8006fe00 	call	8006fe0 <__locale_mb_cur_max>
 800af10:	00c00044 	movi	r3,1
 800af14:	10c03e26 	beq	r2,r3,800b010 <_fputwc_r+0x150>
 800af18:	9809883a 	mov	r4,r19
 800af1c:	d80b883a 	mov	r5,sp
 800af20:	900d883a 	mov	r6,r18
 800af24:	81c01704 	addi	r7,r16,92
 800af28:	800b3700 	call	800b370 <_wcrtomb_r>
 800af2c:	1029883a 	mov	r20,r2
 800af30:	00bfffc4 	movi	r2,-1
 800af34:	a0802026 	beq	r20,r2,800afb8 <_fputwc_r+0xf8>
 800af38:	d9400003 	ldbu	r5,0(sp)
 800af3c:	a0001c26 	beq	r20,zero,800afb0 <_fputwc_r+0xf0>
 800af40:	0023883a 	mov	r17,zero
 800af44:	05400284 	movi	r21,10
 800af48:	00000906 	br	800af70 <_fputwc_r+0xb0>
 800af4c:	80800017 	ldw	r2,0(r16)
 800af50:	11400005 	stb	r5,0(r2)
 800af54:	80c00017 	ldw	r3,0(r16)
 800af58:	18c00044 	addi	r3,r3,1
 800af5c:	80c00015 	stw	r3,0(r16)
 800af60:	8c400044 	addi	r17,r17,1
 800af64:	dc45883a 	add	r2,sp,r17
 800af68:	8d00112e 	bgeu	r17,r20,800afb0 <_fputwc_r+0xf0>
 800af6c:	11400003 	ldbu	r5,0(r2)
 800af70:	80c00217 	ldw	r3,8(r16)
 800af74:	18ffffc4 	addi	r3,r3,-1
 800af78:	80c00215 	stw	r3,8(r16)
 800af7c:	183ff30e 	bge	r3,zero,800af4c <__alt_data_end+0xfc00af4c>
 800af80:	80800617 	ldw	r2,24(r16)
 800af84:	18801916 	blt	r3,r2,800afec <_fputwc_r+0x12c>
 800af88:	80800017 	ldw	r2,0(r16)
 800af8c:	11400005 	stb	r5,0(r2)
 800af90:	80800017 	ldw	r2,0(r16)
 800af94:	10c00003 	ldbu	r3,0(r2)
 800af98:	10800044 	addi	r2,r2,1
 800af9c:	1d402326 	beq	r3,r21,800b02c <_fputwc_r+0x16c>
 800afa0:	80800015 	stw	r2,0(r16)
 800afa4:	8c400044 	addi	r17,r17,1
 800afa8:	dc45883a 	add	r2,sp,r17
 800afac:	8d3fef36 	bltu	r17,r20,800af6c <__alt_data_end+0xfc00af6c>
 800afb0:	9005883a 	mov	r2,r18
 800afb4:	00000406 	br	800afc8 <_fputwc_r+0x108>
 800afb8:	80c0030b 	ldhu	r3,12(r16)
 800afbc:	a005883a 	mov	r2,r20
 800afc0:	18c01014 	ori	r3,r3,64
 800afc4:	80c0030d 	sth	r3,12(r16)
 800afc8:	dfc00717 	ldw	ra,28(sp)
 800afcc:	dd400617 	ldw	r21,24(sp)
 800afd0:	dd000517 	ldw	r20,20(sp)
 800afd4:	dcc00417 	ldw	r19,16(sp)
 800afd8:	dc800317 	ldw	r18,12(sp)
 800afdc:	dc400217 	ldw	r17,8(sp)
 800afe0:	dc000117 	ldw	r16,4(sp)
 800afe4:	dec00804 	addi	sp,sp,32
 800afe8:	f800283a 	ret
 800afec:	9809883a 	mov	r4,r19
 800aff0:	29403fcc 	andi	r5,r5,255
 800aff4:	800d883a 	mov	r6,r16
 800aff8:	800b2000 	call	800b200 <__swbuf_r>
 800affc:	10bfffe0 	cmpeqi	r2,r2,-1
 800b000:	10803fcc 	andi	r2,r2,255
 800b004:	103fd626 	beq	r2,zero,800af60 <__alt_data_end+0xfc00af60>
 800b008:	00bfffc4 	movi	r2,-1
 800b00c:	003fee06 	br	800afc8 <__alt_data_end+0xfc00afc8>
 800b010:	90ffffc4 	addi	r3,r18,-1
 800b014:	01003f84 	movi	r4,254
 800b018:	20ffbf36 	bltu	r4,r3,800af18 <__alt_data_end+0xfc00af18>
 800b01c:	900b883a 	mov	r5,r18
 800b020:	dc800005 	stb	r18,0(sp)
 800b024:	1029883a 	mov	r20,r2
 800b028:	003fc506 	br	800af40 <__alt_data_end+0xfc00af40>
 800b02c:	9809883a 	mov	r4,r19
 800b030:	a80b883a 	mov	r5,r21
 800b034:	800d883a 	mov	r6,r16
 800b038:	800b2000 	call	800b200 <__swbuf_r>
 800b03c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b040:	003fef06 	br	800b000 <__alt_data_end+0xfc00b000>

0800b044 <fputwc>:
 800b044:	defffc04 	addi	sp,sp,-16
 800b048:	dc000115 	stw	r16,4(sp)
 800b04c:	04020074 	movhi	r16,2049
 800b050:	840e2304 	addi	r16,r16,14476
 800b054:	dc400215 	stw	r17,8(sp)
 800b058:	2023883a 	mov	r17,r4
 800b05c:	81000017 	ldw	r4,0(r16)
 800b060:	dfc00315 	stw	ra,12(sp)
 800b064:	280d883a 	mov	r6,r5
 800b068:	20000626 	beq	r4,zero,800b084 <fputwc+0x40>
 800b06c:	20800e17 	ldw	r2,56(r4)
 800b070:	1000041e 	bne	r2,zero,800b084 <fputwc+0x40>
 800b074:	d9400015 	stw	r5,0(sp)
 800b078:	80064e00 	call	80064e0 <__sinit>
 800b07c:	81000017 	ldw	r4,0(r16)
 800b080:	d9800017 	ldw	r6,0(sp)
 800b084:	880b883a 	mov	r5,r17
 800b088:	dfc00317 	ldw	ra,12(sp)
 800b08c:	dc400217 	ldw	r17,8(sp)
 800b090:	dc000117 	ldw	r16,4(sp)
 800b094:	dec00404 	addi	sp,sp,16
 800b098:	800aec01 	jmpi	800aec0 <_fputwc_r>

0800b09c <_fstat_r>:
 800b09c:	defffd04 	addi	sp,sp,-12
 800b0a0:	dc000015 	stw	r16,0(sp)
 800b0a4:	04020074 	movhi	r16,2049
 800b0a8:	dc400115 	stw	r17,4(sp)
 800b0ac:	8414f404 	addi	r16,r16,21456
 800b0b0:	2023883a 	mov	r17,r4
 800b0b4:	2809883a 	mov	r4,r5
 800b0b8:	300b883a 	mov	r5,r6
 800b0bc:	dfc00215 	stw	ra,8(sp)
 800b0c0:	80000015 	stw	zero,0(r16)
 800b0c4:	800ecc00 	call	800ecc0 <fstat>
 800b0c8:	00ffffc4 	movi	r3,-1
 800b0cc:	10c00526 	beq	r2,r3,800b0e4 <_fstat_r+0x48>
 800b0d0:	dfc00217 	ldw	ra,8(sp)
 800b0d4:	dc400117 	ldw	r17,4(sp)
 800b0d8:	dc000017 	ldw	r16,0(sp)
 800b0dc:	dec00304 	addi	sp,sp,12
 800b0e0:	f800283a 	ret
 800b0e4:	80c00017 	ldw	r3,0(r16)
 800b0e8:	183ff926 	beq	r3,zero,800b0d0 <__alt_data_end+0xfc00b0d0>
 800b0ec:	88c00015 	stw	r3,0(r17)
 800b0f0:	003ff706 	br	800b0d0 <__alt_data_end+0xfc00b0d0>

0800b0f4 <_isatty_r>:
 800b0f4:	defffd04 	addi	sp,sp,-12
 800b0f8:	dc000015 	stw	r16,0(sp)
 800b0fc:	04020074 	movhi	r16,2049
 800b100:	dc400115 	stw	r17,4(sp)
 800b104:	8414f404 	addi	r16,r16,21456
 800b108:	2023883a 	mov	r17,r4
 800b10c:	2809883a 	mov	r4,r5
 800b110:	dfc00215 	stw	ra,8(sp)
 800b114:	80000015 	stw	zero,0(r16)
 800b118:	800edc80 	call	800edc8 <isatty>
 800b11c:	00ffffc4 	movi	r3,-1
 800b120:	10c00526 	beq	r2,r3,800b138 <_isatty_r+0x44>
 800b124:	dfc00217 	ldw	ra,8(sp)
 800b128:	dc400117 	ldw	r17,4(sp)
 800b12c:	dc000017 	ldw	r16,0(sp)
 800b130:	dec00304 	addi	sp,sp,12
 800b134:	f800283a 	ret
 800b138:	80c00017 	ldw	r3,0(r16)
 800b13c:	183ff926 	beq	r3,zero,800b124 <__alt_data_end+0xfc00b124>
 800b140:	88c00015 	stw	r3,0(r17)
 800b144:	003ff706 	br	800b124 <__alt_data_end+0xfc00b124>

0800b148 <_lseek_r>:
 800b148:	defffd04 	addi	sp,sp,-12
 800b14c:	dc000015 	stw	r16,0(sp)
 800b150:	04020074 	movhi	r16,2049
 800b154:	dc400115 	stw	r17,4(sp)
 800b158:	8414f404 	addi	r16,r16,21456
 800b15c:	2023883a 	mov	r17,r4
 800b160:	2809883a 	mov	r4,r5
 800b164:	300b883a 	mov	r5,r6
 800b168:	380d883a 	mov	r6,r7
 800b16c:	dfc00215 	stw	ra,8(sp)
 800b170:	80000015 	stw	zero,0(r16)
 800b174:	800efa80 	call	800efa8 <lseek>
 800b178:	00ffffc4 	movi	r3,-1
 800b17c:	10c00526 	beq	r2,r3,800b194 <_lseek_r+0x4c>
 800b180:	dfc00217 	ldw	ra,8(sp)
 800b184:	dc400117 	ldw	r17,4(sp)
 800b188:	dc000017 	ldw	r16,0(sp)
 800b18c:	dec00304 	addi	sp,sp,12
 800b190:	f800283a 	ret
 800b194:	80c00017 	ldw	r3,0(r16)
 800b198:	183ff926 	beq	r3,zero,800b180 <__alt_data_end+0xfc00b180>
 800b19c:	88c00015 	stw	r3,0(r17)
 800b1a0:	003ff706 	br	800b180 <__alt_data_end+0xfc00b180>

0800b1a4 <_read_r>:
 800b1a4:	defffd04 	addi	sp,sp,-12
 800b1a8:	dc000015 	stw	r16,0(sp)
 800b1ac:	04020074 	movhi	r16,2049
 800b1b0:	dc400115 	stw	r17,4(sp)
 800b1b4:	8414f404 	addi	r16,r16,21456
 800b1b8:	2023883a 	mov	r17,r4
 800b1bc:	2809883a 	mov	r4,r5
 800b1c0:	300b883a 	mov	r5,r6
 800b1c4:	380d883a 	mov	r6,r7
 800b1c8:	dfc00215 	stw	ra,8(sp)
 800b1cc:	80000015 	stw	zero,0(r16)
 800b1d0:	800f1900 	call	800f190 <read>
 800b1d4:	00ffffc4 	movi	r3,-1
 800b1d8:	10c00526 	beq	r2,r3,800b1f0 <_read_r+0x4c>
 800b1dc:	dfc00217 	ldw	ra,8(sp)
 800b1e0:	dc400117 	ldw	r17,4(sp)
 800b1e4:	dc000017 	ldw	r16,0(sp)
 800b1e8:	dec00304 	addi	sp,sp,12
 800b1ec:	f800283a 	ret
 800b1f0:	80c00017 	ldw	r3,0(r16)
 800b1f4:	183ff926 	beq	r3,zero,800b1dc <__alt_data_end+0xfc00b1dc>
 800b1f8:	88c00015 	stw	r3,0(r17)
 800b1fc:	003ff706 	br	800b1dc <__alt_data_end+0xfc00b1dc>

0800b200 <__swbuf_r>:
 800b200:	defffc04 	addi	sp,sp,-16
 800b204:	dc800215 	stw	r18,8(sp)
 800b208:	dc400115 	stw	r17,4(sp)
 800b20c:	dc000015 	stw	r16,0(sp)
 800b210:	dfc00315 	stw	ra,12(sp)
 800b214:	2025883a 	mov	r18,r4
 800b218:	2823883a 	mov	r17,r5
 800b21c:	3021883a 	mov	r16,r6
 800b220:	20000226 	beq	r4,zero,800b22c <__swbuf_r+0x2c>
 800b224:	20800e17 	ldw	r2,56(r4)
 800b228:	10004126 	beq	r2,zero,800b330 <__swbuf_r+0x130>
 800b22c:	80c00617 	ldw	r3,24(r16)
 800b230:	8180030b 	ldhu	r6,12(r16)
 800b234:	80c00215 	stw	r3,8(r16)
 800b238:	30c0020c 	andi	r3,r6,8
 800b23c:	18003526 	beq	r3,zero,800b314 <__swbuf_r+0x114>
 800b240:	80c00417 	ldw	r3,16(r16)
 800b244:	18003326 	beq	r3,zero,800b314 <__swbuf_r+0x114>
 800b248:	3088000c 	andi	r2,r6,8192
 800b24c:	8c403fcc 	andi	r17,r17,255
 800b250:	10001726 	beq	r2,zero,800b2b0 <__swbuf_r+0xb0>
 800b254:	80800017 	ldw	r2,0(r16)
 800b258:	81000517 	ldw	r4,20(r16)
 800b25c:	10c7c83a 	sub	r3,r2,r3
 800b260:	19001d0e 	bge	r3,r4,800b2d8 <__swbuf_r+0xd8>
 800b264:	18c00044 	addi	r3,r3,1
 800b268:	81400217 	ldw	r5,8(r16)
 800b26c:	11000044 	addi	r4,r2,1
 800b270:	81000015 	stw	r4,0(r16)
 800b274:	297fffc4 	addi	r5,r5,-1
 800b278:	81400215 	stw	r5,8(r16)
 800b27c:	14400005 	stb	r17,0(r2)
 800b280:	80800517 	ldw	r2,20(r16)
 800b284:	10c01d26 	beq	r2,r3,800b2fc <__swbuf_r+0xfc>
 800b288:	8080030b 	ldhu	r2,12(r16)
 800b28c:	1080004c 	andi	r2,r2,1
 800b290:	1000181e 	bne	r2,zero,800b2f4 <__swbuf_r+0xf4>
 800b294:	8805883a 	mov	r2,r17
 800b298:	dfc00317 	ldw	ra,12(sp)
 800b29c:	dc800217 	ldw	r18,8(sp)
 800b2a0:	dc400117 	ldw	r17,4(sp)
 800b2a4:	dc000017 	ldw	r16,0(sp)
 800b2a8:	dec00404 	addi	sp,sp,16
 800b2ac:	f800283a 	ret
 800b2b0:	81001917 	ldw	r4,100(r16)
 800b2b4:	00b7ffc4 	movi	r2,-8193
 800b2b8:	31880014 	ori	r6,r6,8192
 800b2bc:	2084703a 	and	r2,r4,r2
 800b2c0:	80801915 	stw	r2,100(r16)
 800b2c4:	80800017 	ldw	r2,0(r16)
 800b2c8:	81000517 	ldw	r4,20(r16)
 800b2cc:	8180030d 	sth	r6,12(r16)
 800b2d0:	10c7c83a 	sub	r3,r2,r3
 800b2d4:	193fe316 	blt	r3,r4,800b264 <__alt_data_end+0xfc00b264>
 800b2d8:	9009883a 	mov	r4,r18
 800b2dc:	800b883a 	mov	r5,r16
 800b2e0:	8005f240 	call	8005f24 <_fflush_r>
 800b2e4:	1000091e 	bne	r2,zero,800b30c <__swbuf_r+0x10c>
 800b2e8:	80800017 	ldw	r2,0(r16)
 800b2ec:	00c00044 	movi	r3,1
 800b2f0:	003fdd06 	br	800b268 <__alt_data_end+0xfc00b268>
 800b2f4:	00800284 	movi	r2,10
 800b2f8:	88bfe61e 	bne	r17,r2,800b294 <__alt_data_end+0xfc00b294>
 800b2fc:	9009883a 	mov	r4,r18
 800b300:	800b883a 	mov	r5,r16
 800b304:	8005f240 	call	8005f24 <_fflush_r>
 800b308:	103fe226 	beq	r2,zero,800b294 <__alt_data_end+0xfc00b294>
 800b30c:	00bfffc4 	movi	r2,-1
 800b310:	003fe106 	br	800b298 <__alt_data_end+0xfc00b298>
 800b314:	9009883a 	mov	r4,r18
 800b318:	800b883a 	mov	r5,r16
 800b31c:	80044a40 	call	80044a4 <__swsetup_r>
 800b320:	1000051e 	bne	r2,zero,800b338 <__swbuf_r+0x138>
 800b324:	8180030b 	ldhu	r6,12(r16)
 800b328:	80c00417 	ldw	r3,16(r16)
 800b32c:	003fc606 	br	800b248 <__alt_data_end+0xfc00b248>
 800b330:	80064e00 	call	80064e0 <__sinit>
 800b334:	003fbd06 	br	800b22c <__alt_data_end+0xfc00b22c>
 800b338:	80c0030b 	ldhu	r3,12(r16)
 800b33c:	00bfffc4 	movi	r2,-1
 800b340:	18c01014 	ori	r3,r3,64
 800b344:	80c0030d 	sth	r3,12(r16)
 800b348:	00c00244 	movi	r3,9
 800b34c:	90c00015 	stw	r3,0(r18)
 800b350:	003fd106 	br	800b298 <__alt_data_end+0xfc00b298>

0800b354 <__swbuf>:
 800b354:	00c20074 	movhi	r3,2049
 800b358:	18ce2304 	addi	r3,r3,14476
 800b35c:	2005883a 	mov	r2,r4
 800b360:	19000017 	ldw	r4,0(r3)
 800b364:	280d883a 	mov	r6,r5
 800b368:	100b883a 	mov	r5,r2
 800b36c:	800b2001 	jmpi	800b200 <__swbuf_r>

0800b370 <_wcrtomb_r>:
 800b370:	defff604 	addi	sp,sp,-40
 800b374:	00820074 	movhi	r2,2049
 800b378:	dc800815 	stw	r18,32(sp)
 800b37c:	dc400715 	stw	r17,28(sp)
 800b380:	dc000615 	stw	r16,24(sp)
 800b384:	108e2704 	addi	r2,r2,14492
 800b388:	dfc00915 	stw	ra,36(sp)
 800b38c:	2021883a 	mov	r16,r4
 800b390:	3823883a 	mov	r17,r7
 800b394:	14800017 	ldw	r18,0(r2)
 800b398:	28001426 	beq	r5,zero,800b3ec <_wcrtomb_r+0x7c>
 800b39c:	d9400415 	stw	r5,16(sp)
 800b3a0:	d9800515 	stw	r6,20(sp)
 800b3a4:	8006fd40 	call	8006fd4 <__locale_charset>
 800b3a8:	d9400417 	ldw	r5,16(sp)
 800b3ac:	d9800517 	ldw	r6,20(sp)
 800b3b0:	8009883a 	mov	r4,r16
 800b3b4:	dc400015 	stw	r17,0(sp)
 800b3b8:	100f883a 	mov	r7,r2
 800b3bc:	903ee83a 	callr	r18
 800b3c0:	00ffffc4 	movi	r3,-1
 800b3c4:	10c0031e 	bne	r2,r3,800b3d4 <_wcrtomb_r+0x64>
 800b3c8:	88000015 	stw	zero,0(r17)
 800b3cc:	00c02284 	movi	r3,138
 800b3d0:	80c00015 	stw	r3,0(r16)
 800b3d4:	dfc00917 	ldw	ra,36(sp)
 800b3d8:	dc800817 	ldw	r18,32(sp)
 800b3dc:	dc400717 	ldw	r17,28(sp)
 800b3e0:	dc000617 	ldw	r16,24(sp)
 800b3e4:	dec00a04 	addi	sp,sp,40
 800b3e8:	f800283a 	ret
 800b3ec:	8006fd40 	call	8006fd4 <__locale_charset>
 800b3f0:	8009883a 	mov	r4,r16
 800b3f4:	dc400015 	stw	r17,0(sp)
 800b3f8:	d9400104 	addi	r5,sp,4
 800b3fc:	000d883a 	mov	r6,zero
 800b400:	100f883a 	mov	r7,r2
 800b404:	903ee83a 	callr	r18
 800b408:	003fed06 	br	800b3c0 <__alt_data_end+0xfc00b3c0>

0800b40c <wcrtomb>:
 800b40c:	defff504 	addi	sp,sp,-44
 800b410:	dc400515 	stw	r17,20(sp)
 800b414:	dc000415 	stw	r16,16(sp)
 800b418:	dfc00a15 	stw	ra,40(sp)
 800b41c:	dd400915 	stw	r21,36(sp)
 800b420:	dd000815 	stw	r20,32(sp)
 800b424:	dcc00715 	stw	r19,28(sp)
 800b428:	dc800615 	stw	r18,24(sp)
 800b42c:	2021883a 	mov	r16,r4
 800b430:	3023883a 	mov	r17,r6
 800b434:	20001d26 	beq	r4,zero,800b4ac <wcrtomb+0xa0>
 800b438:	04820074 	movhi	r18,2049
 800b43c:	948e2304 	addi	r18,r18,14476
 800b440:	00820074 	movhi	r2,2049
 800b444:	95400017 	ldw	r21,0(r18)
 800b448:	108e2704 	addi	r2,r2,14492
 800b44c:	15000017 	ldw	r20,0(r2)
 800b450:	2827883a 	mov	r19,r5
 800b454:	8006fd40 	call	8006fd4 <__locale_charset>
 800b458:	a809883a 	mov	r4,r21
 800b45c:	dc400015 	stw	r17,0(sp)
 800b460:	800b883a 	mov	r5,r16
 800b464:	980d883a 	mov	r6,r19
 800b468:	100f883a 	mov	r7,r2
 800b46c:	a03ee83a 	callr	r20
 800b470:	00ffffc4 	movi	r3,-1
 800b474:	10c0041e 	bne	r2,r3,800b488 <wcrtomb+0x7c>
 800b478:	90c00017 	ldw	r3,0(r18)
 800b47c:	01002284 	movi	r4,138
 800b480:	88000015 	stw	zero,0(r17)
 800b484:	19000015 	stw	r4,0(r3)
 800b488:	dfc00a17 	ldw	ra,40(sp)
 800b48c:	dd400917 	ldw	r21,36(sp)
 800b490:	dd000817 	ldw	r20,32(sp)
 800b494:	dcc00717 	ldw	r19,28(sp)
 800b498:	dc800617 	ldw	r18,24(sp)
 800b49c:	dc400517 	ldw	r17,20(sp)
 800b4a0:	dc000417 	ldw	r16,16(sp)
 800b4a4:	dec00b04 	addi	sp,sp,44
 800b4a8:	f800283a 	ret
 800b4ac:	04820074 	movhi	r18,2049
 800b4b0:	948e2304 	addi	r18,r18,14476
 800b4b4:	00820074 	movhi	r2,2049
 800b4b8:	94c00017 	ldw	r19,0(r18)
 800b4bc:	108e2704 	addi	r2,r2,14492
 800b4c0:	14000017 	ldw	r16,0(r2)
 800b4c4:	8006fd40 	call	8006fd4 <__locale_charset>
 800b4c8:	9809883a 	mov	r4,r19
 800b4cc:	dc400015 	stw	r17,0(sp)
 800b4d0:	d9400104 	addi	r5,sp,4
 800b4d4:	000d883a 	mov	r6,zero
 800b4d8:	100f883a 	mov	r7,r2
 800b4dc:	803ee83a 	callr	r16
 800b4e0:	003fe306 	br	800b470 <__alt_data_end+0xfc00b470>

0800b4e4 <__ascii_wctomb>:
 800b4e4:	28000526 	beq	r5,zero,800b4fc <__ascii_wctomb+0x18>
 800b4e8:	00803fc4 	movi	r2,255
 800b4ec:	11800536 	bltu	r2,r6,800b504 <__ascii_wctomb+0x20>
 800b4f0:	29800005 	stb	r6,0(r5)
 800b4f4:	00800044 	movi	r2,1
 800b4f8:	f800283a 	ret
 800b4fc:	0005883a 	mov	r2,zero
 800b500:	f800283a 	ret
 800b504:	00802284 	movi	r2,138
 800b508:	20800015 	stw	r2,0(r4)
 800b50c:	00bfffc4 	movi	r2,-1
 800b510:	f800283a 	ret

0800b514 <_wctomb_r>:
 800b514:	00820074 	movhi	r2,2049
 800b518:	defff904 	addi	sp,sp,-28
 800b51c:	108e2704 	addi	r2,r2,14492
 800b520:	dfc00615 	stw	ra,24(sp)
 800b524:	dc400515 	stw	r17,20(sp)
 800b528:	dc000415 	stw	r16,16(sp)
 800b52c:	3823883a 	mov	r17,r7
 800b530:	14000017 	ldw	r16,0(r2)
 800b534:	d9000115 	stw	r4,4(sp)
 800b538:	d9400215 	stw	r5,8(sp)
 800b53c:	d9800315 	stw	r6,12(sp)
 800b540:	8006fd40 	call	8006fd4 <__locale_charset>
 800b544:	d9000117 	ldw	r4,4(sp)
 800b548:	d9400217 	ldw	r5,8(sp)
 800b54c:	d9800317 	ldw	r6,12(sp)
 800b550:	dc400015 	stw	r17,0(sp)
 800b554:	100f883a 	mov	r7,r2
 800b558:	803ee83a 	callr	r16
 800b55c:	dfc00617 	ldw	ra,24(sp)
 800b560:	dc400517 	ldw	r17,20(sp)
 800b564:	dc000417 	ldw	r16,16(sp)
 800b568:	dec00704 	addi	sp,sp,28
 800b56c:	f800283a 	ret

0800b570 <__udivdi3>:
 800b570:	defff504 	addi	sp,sp,-44
 800b574:	dcc00415 	stw	r19,16(sp)
 800b578:	dc000115 	stw	r16,4(sp)
 800b57c:	dfc00a15 	stw	ra,40(sp)
 800b580:	df000915 	stw	fp,36(sp)
 800b584:	ddc00815 	stw	r23,32(sp)
 800b588:	dd800715 	stw	r22,28(sp)
 800b58c:	dd400615 	stw	r21,24(sp)
 800b590:	dd000515 	stw	r20,20(sp)
 800b594:	dc800315 	stw	r18,12(sp)
 800b598:	dc400215 	stw	r17,8(sp)
 800b59c:	2027883a 	mov	r19,r4
 800b5a0:	2821883a 	mov	r16,r5
 800b5a4:	3800471e 	bne	r7,zero,800b6c4 <__udivdi3+0x154>
 800b5a8:	3025883a 	mov	r18,r6
 800b5ac:	2023883a 	mov	r17,r4
 800b5b0:	2980592e 	bgeu	r5,r6,800b718 <__udivdi3+0x1a8>
 800b5b4:	00bfffd4 	movui	r2,65535
 800b5b8:	2829883a 	mov	r20,r5
 800b5bc:	1180b236 	bltu	r2,r6,800b888 <__udivdi3+0x318>
 800b5c0:	00803fc4 	movi	r2,255
 800b5c4:	1181622e 	bgeu	r2,r6,800bb50 <__udivdi3+0x5e0>
 800b5c8:	00800204 	movi	r2,8
 800b5cc:	1007883a 	mov	r3,r2
 800b5d0:	3084d83a 	srl	r2,r6,r2
 800b5d4:	01020074 	movhi	r4,2049
 800b5d8:	21072a04 	addi	r4,r4,7336
 800b5dc:	2085883a 	add	r2,r4,r2
 800b5e0:	11000003 	ldbu	r4,0(r2)
 800b5e4:	20c9883a 	add	r4,r4,r3
 800b5e8:	00c00804 	movi	r3,32
 800b5ec:	1907c83a 	sub	r3,r3,r4
 800b5f0:	18000526 	beq	r3,zero,800b608 <__udivdi3+0x98>
 800b5f4:	80e0983a 	sll	r16,r16,r3
 800b5f8:	9908d83a 	srl	r4,r19,r4
 800b5fc:	30e4983a 	sll	r18,r6,r3
 800b600:	98e2983a 	sll	r17,r19,r3
 800b604:	8128b03a 	or	r20,r16,r4
 800b608:	902ad43a 	srli	r21,r18,16
 800b60c:	a009883a 	mov	r4,r20
 800b610:	95bfffcc 	andi	r22,r18,65535
 800b614:	a80b883a 	mov	r5,r21
 800b618:	800c2f00 	call	800c2f0 <__umodsi3>
 800b61c:	a009883a 	mov	r4,r20
 800b620:	a80b883a 	mov	r5,r21
 800b624:	102f883a 	mov	r23,r2
 800b628:	800c2e80 	call	800c2e8 <__udivsi3>
 800b62c:	1009883a 	mov	r4,r2
 800b630:	b00b883a 	mov	r5,r22
 800b634:	1021883a 	mov	r16,r2
 800b638:	800c2f80 	call	800c2f8 <__mulsi3>
 800b63c:	b82e943a 	slli	r23,r23,16
 800b640:	8808d43a 	srli	r4,r17,16
 800b644:	b906b03a 	or	r3,r23,r4
 800b648:	1880052e 	bgeu	r3,r2,800b660 <__udivdi3+0xf0>
 800b64c:	1c87883a 	add	r3,r3,r18
 800b650:	813fffc4 	addi	r4,r16,-1
 800b654:	1c800136 	bltu	r3,r18,800b65c <__udivdi3+0xec>
 800b658:	18815236 	bltu	r3,r2,800bba4 <__udivdi3+0x634>
 800b65c:	2021883a 	mov	r16,r4
 800b660:	18a7c83a 	sub	r19,r3,r2
 800b664:	9809883a 	mov	r4,r19
 800b668:	a80b883a 	mov	r5,r21
 800b66c:	800c2f00 	call	800c2f0 <__umodsi3>
 800b670:	1029883a 	mov	r20,r2
 800b674:	9809883a 	mov	r4,r19
 800b678:	a80b883a 	mov	r5,r21
 800b67c:	a028943a 	slli	r20,r20,16
 800b680:	800c2e80 	call	800c2e8 <__udivsi3>
 800b684:	1009883a 	mov	r4,r2
 800b688:	b00b883a 	mov	r5,r22
 800b68c:	8c7fffcc 	andi	r17,r17,65535
 800b690:	1027883a 	mov	r19,r2
 800b694:	a462b03a 	or	r17,r20,r17
 800b698:	800c2f80 	call	800c2f8 <__mulsi3>
 800b69c:	8880052e 	bgeu	r17,r2,800b6b4 <__udivdi3+0x144>
 800b6a0:	8ca3883a 	add	r17,r17,r18
 800b6a4:	98ffffc4 	addi	r3,r19,-1
 800b6a8:	8c811036 	bltu	r17,r18,800baec <__udivdi3+0x57c>
 800b6ac:	88810f2e 	bgeu	r17,r2,800baec <__udivdi3+0x57c>
 800b6b0:	9cffff84 	addi	r19,r19,-2
 800b6b4:	8020943a 	slli	r16,r16,16
 800b6b8:	0007883a 	mov	r3,zero
 800b6bc:	9c04b03a 	or	r2,r19,r16
 800b6c0:	00006006 	br	800b844 <__udivdi3+0x2d4>
 800b6c4:	29c05d36 	bltu	r5,r7,800b83c <__udivdi3+0x2cc>
 800b6c8:	00bfffd4 	movui	r2,65535
 800b6cc:	11c0692e 	bgeu	r2,r7,800b874 <__udivdi3+0x304>
 800b6d0:	00804034 	movhi	r2,256
 800b6d4:	10bfffc4 	addi	r2,r2,-1
 800b6d8:	11c10e2e 	bgeu	r2,r7,800bb14 <__udivdi3+0x5a4>
 800b6dc:	01400604 	movi	r5,24
 800b6e0:	2811883a 	mov	r8,r5
 800b6e4:	394ad83a 	srl	r5,r7,r5
 800b6e8:	00820074 	movhi	r2,2049
 800b6ec:	10872a04 	addi	r2,r2,7336
 800b6f0:	114b883a 	add	r5,r2,r5
 800b6f4:	29400003 	ldbu	r5,0(r5)
 800b6f8:	00c00804 	movi	r3,32
 800b6fc:	2a0b883a 	add	r5,r5,r8
 800b700:	196fc83a 	sub	r23,r3,r5
 800b704:	b8006b1e 	bne	r23,zero,800b8b4 <__udivdi3+0x344>
 800b708:	3c011436 	bltu	r7,r16,800bb5c <__udivdi3+0x5ec>
 800b70c:	9985403a 	cmpgeu	r2,r19,r6
 800b710:	0007883a 	mov	r3,zero
 800b714:	00004b06 	br	800b844 <__udivdi3+0x2d4>
 800b718:	3000041e 	bne	r6,zero,800b72c <__udivdi3+0x1bc>
 800b71c:	01000044 	movi	r4,1
 800b720:	000b883a 	mov	r5,zero
 800b724:	800c2e80 	call	800c2e8 <__udivsi3>
 800b728:	1025883a 	mov	r18,r2
 800b72c:	00bfffd4 	movui	r2,65535
 800b730:	14805b2e 	bgeu	r2,r18,800b8a0 <__udivdi3+0x330>
 800b734:	00804034 	movhi	r2,256
 800b738:	10bfffc4 	addi	r2,r2,-1
 800b73c:	1480fe2e 	bgeu	r2,r18,800bb38 <__udivdi3+0x5c8>
 800b740:	00800604 	movi	r2,24
 800b744:	1007883a 	mov	r3,r2
 800b748:	9084d83a 	srl	r2,r18,r2
 800b74c:	01020074 	movhi	r4,2049
 800b750:	21072a04 	addi	r4,r4,7336
 800b754:	2085883a 	add	r2,r4,r2
 800b758:	11800003 	ldbu	r6,0(r2)
 800b75c:	01c00804 	movi	r7,32
 800b760:	30c7883a 	add	r3,r6,r3
 800b764:	38cfc83a 	sub	r7,r7,r3
 800b768:	3800a71e 	bne	r7,zero,800ba08 <__udivdi3+0x498>
 800b76c:	9028d43a 	srli	r20,r18,16
 800b770:	84a1c83a 	sub	r16,r16,r18
 800b774:	957fffcc 	andi	r21,r18,65535
 800b778:	00c00044 	movi	r3,1
 800b77c:	8009883a 	mov	r4,r16
 800b780:	a00b883a 	mov	r5,r20
 800b784:	d8c00015 	stw	r3,0(sp)
 800b788:	800c2f00 	call	800c2f0 <__umodsi3>
 800b78c:	8009883a 	mov	r4,r16
 800b790:	a00b883a 	mov	r5,r20
 800b794:	102d883a 	mov	r22,r2
 800b798:	800c2e80 	call	800c2e8 <__udivsi3>
 800b79c:	1009883a 	mov	r4,r2
 800b7a0:	a80b883a 	mov	r5,r21
 800b7a4:	1021883a 	mov	r16,r2
 800b7a8:	800c2f80 	call	800c2f8 <__mulsi3>
 800b7ac:	b02c943a 	slli	r22,r22,16
 800b7b0:	880ed43a 	srli	r7,r17,16
 800b7b4:	d8c00017 	ldw	r3,0(sp)
 800b7b8:	b1ccb03a 	or	r6,r22,r7
 800b7bc:	3080052e 	bgeu	r6,r2,800b7d4 <__udivdi3+0x264>
 800b7c0:	348d883a 	add	r6,r6,r18
 800b7c4:	813fffc4 	addi	r4,r16,-1
 800b7c8:	34800136 	bltu	r6,r18,800b7d0 <__udivdi3+0x260>
 800b7cc:	3080f236 	bltu	r6,r2,800bb98 <__udivdi3+0x628>
 800b7d0:	2021883a 	mov	r16,r4
 800b7d4:	30a7c83a 	sub	r19,r6,r2
 800b7d8:	9809883a 	mov	r4,r19
 800b7dc:	a00b883a 	mov	r5,r20
 800b7e0:	d8c00015 	stw	r3,0(sp)
 800b7e4:	800c2f00 	call	800c2f0 <__umodsi3>
 800b7e8:	102d883a 	mov	r22,r2
 800b7ec:	9809883a 	mov	r4,r19
 800b7f0:	a00b883a 	mov	r5,r20
 800b7f4:	b02c943a 	slli	r22,r22,16
 800b7f8:	800c2e80 	call	800c2e8 <__udivsi3>
 800b7fc:	1009883a 	mov	r4,r2
 800b800:	a80b883a 	mov	r5,r21
 800b804:	8c7fffcc 	andi	r17,r17,65535
 800b808:	1027883a 	mov	r19,r2
 800b80c:	b462b03a 	or	r17,r22,r17
 800b810:	800c2f80 	call	800c2f8 <__mulsi3>
 800b814:	d8c00017 	ldw	r3,0(sp)
 800b818:	8880052e 	bgeu	r17,r2,800b830 <__udivdi3+0x2c0>
 800b81c:	8ca3883a 	add	r17,r17,r18
 800b820:	993fffc4 	addi	r4,r19,-1
 800b824:	8c80af36 	bltu	r17,r18,800bae4 <__udivdi3+0x574>
 800b828:	8880ae2e 	bgeu	r17,r2,800bae4 <__udivdi3+0x574>
 800b82c:	9cffff84 	addi	r19,r19,-2
 800b830:	8020943a 	slli	r16,r16,16
 800b834:	9c04b03a 	or	r2,r19,r16
 800b838:	00000206 	br	800b844 <__udivdi3+0x2d4>
 800b83c:	0007883a 	mov	r3,zero
 800b840:	0005883a 	mov	r2,zero
 800b844:	dfc00a17 	ldw	ra,40(sp)
 800b848:	df000917 	ldw	fp,36(sp)
 800b84c:	ddc00817 	ldw	r23,32(sp)
 800b850:	dd800717 	ldw	r22,28(sp)
 800b854:	dd400617 	ldw	r21,24(sp)
 800b858:	dd000517 	ldw	r20,20(sp)
 800b85c:	dcc00417 	ldw	r19,16(sp)
 800b860:	dc800317 	ldw	r18,12(sp)
 800b864:	dc400217 	ldw	r17,8(sp)
 800b868:	dc000117 	ldw	r16,4(sp)
 800b86c:	dec00b04 	addi	sp,sp,44
 800b870:	f800283a 	ret
 800b874:	00803fc4 	movi	r2,255
 800b878:	11c0a92e 	bgeu	r2,r7,800bb20 <__udivdi3+0x5b0>
 800b87c:	01400204 	movi	r5,8
 800b880:	2811883a 	mov	r8,r5
 800b884:	003f9706 	br	800b6e4 <__alt_data_end+0xfc00b6e4>
 800b888:	00804034 	movhi	r2,256
 800b88c:	10bfffc4 	addi	r2,r2,-1
 800b890:	1180a62e 	bgeu	r2,r6,800bb2c <__udivdi3+0x5bc>
 800b894:	00800604 	movi	r2,24
 800b898:	1007883a 	mov	r3,r2
 800b89c:	003f4c06 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800b8a0:	00803fc4 	movi	r2,255
 800b8a4:	1480a72e 	bgeu	r2,r18,800bb44 <__udivdi3+0x5d4>
 800b8a8:	00800204 	movi	r2,8
 800b8ac:	1007883a 	mov	r3,r2
 800b8b0:	003fa506 	br	800b748 <__alt_data_end+0xfc00b748>
 800b8b4:	3178d83a 	srl	fp,r6,r5
 800b8b8:	3dce983a 	sll	r7,r7,r23
 800b8bc:	8168d83a 	srl	r20,r16,r5
 800b8c0:	9950d83a 	srl	r8,r19,r5
 800b8c4:	3f38b03a 	or	fp,r7,fp
 800b8c8:	e024d43a 	srli	r18,fp,16
 800b8cc:	85e0983a 	sll	r16,r16,r23
 800b8d0:	a009883a 	mov	r4,r20
 800b8d4:	900b883a 	mov	r5,r18
 800b8d8:	8220b03a 	or	r16,r16,r8
 800b8dc:	35ea983a 	sll	r21,r6,r23
 800b8e0:	800c2f00 	call	800c2f0 <__umodsi3>
 800b8e4:	a009883a 	mov	r4,r20
 800b8e8:	900b883a 	mov	r5,r18
 800b8ec:	1023883a 	mov	r17,r2
 800b8f0:	e5bfffcc 	andi	r22,fp,65535
 800b8f4:	800c2e80 	call	800c2e8 <__udivsi3>
 800b8f8:	1009883a 	mov	r4,r2
 800b8fc:	b00b883a 	mov	r5,r22
 800b900:	1029883a 	mov	r20,r2
 800b904:	800c2f80 	call	800c2f8 <__mulsi3>
 800b908:	8806943a 	slli	r3,r17,16
 800b90c:	8014d43a 	srli	r10,r16,16
 800b910:	1a92b03a 	or	r9,r3,r10
 800b914:	4880042e 	bgeu	r9,r2,800b928 <__udivdi3+0x3b8>
 800b918:	4f13883a 	add	r9,r9,fp
 800b91c:	a0ffffc4 	addi	r3,r20,-1
 800b920:	4f00952e 	bgeu	r9,fp,800bb78 <__udivdi3+0x608>
 800b924:	1829883a 	mov	r20,r3
 800b928:	48a3c83a 	sub	r17,r9,r2
 800b92c:	8809883a 	mov	r4,r17
 800b930:	900b883a 	mov	r5,r18
 800b934:	800c2f00 	call	800c2f0 <__umodsi3>
 800b938:	8809883a 	mov	r4,r17
 800b93c:	900b883a 	mov	r5,r18
 800b940:	d8800015 	stw	r2,0(sp)
 800b944:	800c2e80 	call	800c2e8 <__udivsi3>
 800b948:	1009883a 	mov	r4,r2
 800b94c:	b00b883a 	mov	r5,r22
 800b950:	1023883a 	mov	r17,r2
 800b954:	800c2f80 	call	800c2f8 <__mulsi3>
 800b958:	d8c00017 	ldw	r3,0(sp)
 800b95c:	823fffcc 	andi	r8,r16,65535
 800b960:	1806943a 	slli	r3,r3,16
 800b964:	1a20b03a 	or	r16,r3,r8
 800b968:	8080042e 	bgeu	r16,r2,800b97c <__udivdi3+0x40c>
 800b96c:	8721883a 	add	r16,r16,fp
 800b970:	88ffffc4 	addi	r3,r17,-1
 800b974:	87007c2e 	bgeu	r16,fp,800bb68 <__udivdi3+0x5f8>
 800b978:	1823883a 	mov	r17,r3
 800b97c:	a028943a 	slli	r20,r20,16
 800b980:	acbfffcc 	andi	r18,r21,65535
 800b984:	900b883a 	mov	r5,r18
 800b988:	8d28b03a 	or	r20,r17,r20
 800b98c:	a022d43a 	srli	r17,r20,16
 800b990:	a5bfffcc 	andi	r22,r20,65535
 800b994:	b009883a 	mov	r4,r22
 800b998:	a82ad43a 	srli	r21,r21,16
 800b99c:	80a1c83a 	sub	r16,r16,r2
 800b9a0:	800c2f80 	call	800c2f8 <__mulsi3>
 800b9a4:	8809883a 	mov	r4,r17
 800b9a8:	900b883a 	mov	r5,r18
 800b9ac:	1039883a 	mov	fp,r2
 800b9b0:	800c2f80 	call	800c2f8 <__mulsi3>
 800b9b4:	8809883a 	mov	r4,r17
 800b9b8:	a80b883a 	mov	r5,r21
 800b9bc:	1025883a 	mov	r18,r2
 800b9c0:	800c2f80 	call	800c2f8 <__mulsi3>
 800b9c4:	b009883a 	mov	r4,r22
 800b9c8:	a80b883a 	mov	r5,r21
 800b9cc:	1023883a 	mov	r17,r2
 800b9d0:	800c2f80 	call	800c2f8 <__mulsi3>
 800b9d4:	e006d43a 	srli	r3,fp,16
 800b9d8:	9085883a 	add	r2,r18,r2
 800b9dc:	10c7883a 	add	r3,r2,r3
 800b9e0:	1c80022e 	bgeu	r3,r18,800b9ec <__udivdi3+0x47c>
 800b9e4:	00800074 	movhi	r2,1
 800b9e8:	88a3883a 	add	r17,r17,r2
 800b9ec:	1808d43a 	srli	r4,r3,16
 800b9f0:	8909883a 	add	r4,r17,r4
 800b9f4:	81004436 	bltu	r16,r4,800bb08 <__udivdi3+0x598>
 800b9f8:	81003e26 	beq	r16,r4,800baf4 <__udivdi3+0x584>
 800b9fc:	a005883a 	mov	r2,r20
 800ba00:	0007883a 	mov	r3,zero
 800ba04:	003f8f06 	br	800b844 <__alt_data_end+0xfc00b844>
 800ba08:	91e4983a 	sll	r18,r18,r7
 800ba0c:	80eed83a 	srl	r23,r16,r3
 800ba10:	81cc983a 	sll	r6,r16,r7
 800ba14:	9028d43a 	srli	r20,r18,16
 800ba18:	98c6d83a 	srl	r3,r19,r3
 800ba1c:	b809883a 	mov	r4,r23
 800ba20:	a00b883a 	mov	r5,r20
 800ba24:	30ecb03a 	or	r22,r6,r3
 800ba28:	99e2983a 	sll	r17,r19,r7
 800ba2c:	800c2f00 	call	800c2f0 <__umodsi3>
 800ba30:	b809883a 	mov	r4,r23
 800ba34:	a00b883a 	mov	r5,r20
 800ba38:	1021883a 	mov	r16,r2
 800ba3c:	957fffcc 	andi	r21,r18,65535
 800ba40:	800c2e80 	call	800c2e8 <__udivsi3>
 800ba44:	a80b883a 	mov	r5,r21
 800ba48:	1009883a 	mov	r4,r2
 800ba4c:	102f883a 	mov	r23,r2
 800ba50:	800c2f80 	call	800c2f8 <__mulsi3>
 800ba54:	8020943a 	slli	r16,r16,16
 800ba58:	b00ad43a 	srli	r5,r22,16
 800ba5c:	814cb03a 	or	r6,r16,r5
 800ba60:	3080062e 	bgeu	r6,r2,800ba7c <__udivdi3+0x50c>
 800ba64:	348d883a 	add	r6,r6,r18
 800ba68:	b8ffffc4 	addi	r3,r23,-1
 800ba6c:	34804836 	bltu	r6,r18,800bb90 <__udivdi3+0x620>
 800ba70:	3080472e 	bgeu	r6,r2,800bb90 <__udivdi3+0x620>
 800ba74:	bdffff84 	addi	r23,r23,-2
 800ba78:	348d883a 	add	r6,r6,r18
 800ba7c:	30a7c83a 	sub	r19,r6,r2
 800ba80:	9809883a 	mov	r4,r19
 800ba84:	a00b883a 	mov	r5,r20
 800ba88:	800c2f00 	call	800c2f0 <__umodsi3>
 800ba8c:	9809883a 	mov	r4,r19
 800ba90:	a00b883a 	mov	r5,r20
 800ba94:	1039883a 	mov	fp,r2
 800ba98:	800c2e80 	call	800c2e8 <__udivsi3>
 800ba9c:	1009883a 	mov	r4,r2
 800baa0:	a80b883a 	mov	r5,r21
 800baa4:	e038943a 	slli	fp,fp,16
 800baa8:	1027883a 	mov	r19,r2
 800baac:	800c2f80 	call	800c2f8 <__mulsi3>
 800bab0:	b1bfffcc 	andi	r6,r22,65535
 800bab4:	e18cb03a 	or	r6,fp,r6
 800bab8:	3080062e 	bgeu	r6,r2,800bad4 <__udivdi3+0x564>
 800babc:	348d883a 	add	r6,r6,r18
 800bac0:	98ffffc4 	addi	r3,r19,-1
 800bac4:	34803036 	bltu	r6,r18,800bb88 <__udivdi3+0x618>
 800bac8:	30802f2e 	bgeu	r6,r2,800bb88 <__udivdi3+0x618>
 800bacc:	9cffff84 	addi	r19,r19,-2
 800bad0:	348d883a 	add	r6,r6,r18
 800bad4:	b82e943a 	slli	r23,r23,16
 800bad8:	30a1c83a 	sub	r16,r6,r2
 800badc:	9dc6b03a 	or	r3,r19,r23
 800bae0:	003f2606 	br	800b77c <__alt_data_end+0xfc00b77c>
 800bae4:	2027883a 	mov	r19,r4
 800bae8:	003f5106 	br	800b830 <__alt_data_end+0xfc00b830>
 800baec:	1827883a 	mov	r19,r3
 800baf0:	003ef006 	br	800b6b4 <__alt_data_end+0xfc00b6b4>
 800baf4:	1808943a 	slli	r4,r3,16
 800baf8:	9dc6983a 	sll	r3,r19,r23
 800bafc:	e73fffcc 	andi	fp,fp,65535
 800bb00:	2709883a 	add	r4,r4,fp
 800bb04:	193fbd2e 	bgeu	r3,r4,800b9fc <__alt_data_end+0xfc00b9fc>
 800bb08:	a0bfffc4 	addi	r2,r20,-1
 800bb0c:	0007883a 	mov	r3,zero
 800bb10:	003f4c06 	br	800b844 <__alt_data_end+0xfc00b844>
 800bb14:	01400404 	movi	r5,16
 800bb18:	2811883a 	mov	r8,r5
 800bb1c:	003ef106 	br	800b6e4 <__alt_data_end+0xfc00b6e4>
 800bb20:	000b883a 	mov	r5,zero
 800bb24:	0011883a 	mov	r8,zero
 800bb28:	003eee06 	br	800b6e4 <__alt_data_end+0xfc00b6e4>
 800bb2c:	00800404 	movi	r2,16
 800bb30:	1007883a 	mov	r3,r2
 800bb34:	003ea606 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800bb38:	00800404 	movi	r2,16
 800bb3c:	1007883a 	mov	r3,r2
 800bb40:	003f0106 	br	800b748 <__alt_data_end+0xfc00b748>
 800bb44:	0005883a 	mov	r2,zero
 800bb48:	0007883a 	mov	r3,zero
 800bb4c:	003efe06 	br	800b748 <__alt_data_end+0xfc00b748>
 800bb50:	0005883a 	mov	r2,zero
 800bb54:	0007883a 	mov	r3,zero
 800bb58:	003e9d06 	br	800b5d0 <__alt_data_end+0xfc00b5d0>
 800bb5c:	0007883a 	mov	r3,zero
 800bb60:	00800044 	movi	r2,1
 800bb64:	003f3706 	br	800b844 <__alt_data_end+0xfc00b844>
 800bb68:	80bf832e 	bgeu	r16,r2,800b978 <__alt_data_end+0xfc00b978>
 800bb6c:	8c7fff84 	addi	r17,r17,-2
 800bb70:	8721883a 	add	r16,r16,fp
 800bb74:	003f8106 	br	800b97c <__alt_data_end+0xfc00b97c>
 800bb78:	48bf6a2e 	bgeu	r9,r2,800b924 <__alt_data_end+0xfc00b924>
 800bb7c:	a53fff84 	addi	r20,r20,-2
 800bb80:	4f13883a 	add	r9,r9,fp
 800bb84:	003f6806 	br	800b928 <__alt_data_end+0xfc00b928>
 800bb88:	1827883a 	mov	r19,r3
 800bb8c:	003fd106 	br	800bad4 <__alt_data_end+0xfc00bad4>
 800bb90:	182f883a 	mov	r23,r3
 800bb94:	003fb906 	br	800ba7c <__alt_data_end+0xfc00ba7c>
 800bb98:	843fff84 	addi	r16,r16,-2
 800bb9c:	348d883a 	add	r6,r6,r18
 800bba0:	003f0c06 	br	800b7d4 <__alt_data_end+0xfc00b7d4>
 800bba4:	843fff84 	addi	r16,r16,-2
 800bba8:	1c87883a 	add	r3,r3,r18
 800bbac:	003eac06 	br	800b660 <__alt_data_end+0xfc00b660>

0800bbb0 <__umoddi3>:
 800bbb0:	defff404 	addi	sp,sp,-48
 800bbb4:	dd800815 	stw	r22,32(sp)
 800bbb8:	dc400315 	stw	r17,12(sp)
 800bbbc:	dc000215 	stw	r16,8(sp)
 800bbc0:	dfc00b15 	stw	ra,44(sp)
 800bbc4:	df000a15 	stw	fp,40(sp)
 800bbc8:	ddc00915 	stw	r23,36(sp)
 800bbcc:	dd400715 	stw	r21,28(sp)
 800bbd0:	dd000615 	stw	r20,24(sp)
 800bbd4:	dcc00515 	stw	r19,20(sp)
 800bbd8:	dc800415 	stw	r18,16(sp)
 800bbdc:	2021883a 	mov	r16,r4
 800bbe0:	2823883a 	mov	r17,r5
 800bbe4:	282d883a 	mov	r22,r5
 800bbe8:	38003c1e 	bne	r7,zero,800bcdc <__umoddi3+0x12c>
 800bbec:	3027883a 	mov	r19,r6
 800bbf0:	2029883a 	mov	r20,r4
 800bbf4:	2980522e 	bgeu	r5,r6,800bd40 <__umoddi3+0x190>
 800bbf8:	00bfffd4 	movui	r2,65535
 800bbfc:	1180a436 	bltu	r2,r6,800be90 <__umoddi3+0x2e0>
 800bc00:	00803fc4 	movi	r2,255
 800bc04:	11815e2e 	bgeu	r2,r6,800c180 <__umoddi3+0x5d0>
 800bc08:	01400204 	movi	r5,8
 800bc0c:	2805883a 	mov	r2,r5
 800bc10:	314ad83a 	srl	r5,r6,r5
 800bc14:	00c20074 	movhi	r3,2049
 800bc18:	18c72a04 	addi	r3,r3,7336
 800bc1c:	194b883a 	add	r5,r3,r5
 800bc20:	29000003 	ldbu	r4,0(r5)
 800bc24:	2089883a 	add	r4,r4,r2
 800bc28:	00800804 	movi	r2,32
 800bc2c:	1105c83a 	sub	r2,r2,r4
 800bc30:	10010c26 	beq	r2,zero,800c064 <__umoddi3+0x4b4>
 800bc34:	88a2983a 	sll	r17,r17,r2
 800bc38:	8108d83a 	srl	r4,r16,r4
 800bc3c:	30a6983a 	sll	r19,r6,r2
 800bc40:	80a8983a 	sll	r20,r16,r2
 800bc44:	1025883a 	mov	r18,r2
 800bc48:	892cb03a 	or	r22,r17,r4
 800bc4c:	9822d43a 	srli	r17,r19,16
 800bc50:	b009883a 	mov	r4,r22
 800bc54:	9d7fffcc 	andi	r21,r19,65535
 800bc58:	880b883a 	mov	r5,r17
 800bc5c:	800c2f00 	call	800c2f0 <__umodsi3>
 800bc60:	b009883a 	mov	r4,r22
 800bc64:	880b883a 	mov	r5,r17
 800bc68:	102f883a 	mov	r23,r2
 800bc6c:	800c2e80 	call	800c2e8 <__udivsi3>
 800bc70:	1009883a 	mov	r4,r2
 800bc74:	a80b883a 	mov	r5,r21
 800bc78:	800c2f80 	call	800c2f8 <__mulsi3>
 800bc7c:	b82e943a 	slli	r23,r23,16
 800bc80:	a008d43a 	srli	r4,r20,16
 800bc84:	b906b03a 	or	r3,r23,r4
 800bc88:	1880042e 	bgeu	r3,r2,800bc9c <__umoddi3+0xec>
 800bc8c:	1cc7883a 	add	r3,r3,r19
 800bc90:	1cc00236 	bltu	r3,r19,800bc9c <__umoddi3+0xec>
 800bc94:	1880012e 	bgeu	r3,r2,800bc9c <__umoddi3+0xec>
 800bc98:	1cc7883a 	add	r3,r3,r19
 800bc9c:	18a1c83a 	sub	r16,r3,r2
 800bca0:	8009883a 	mov	r4,r16
 800bca4:	880b883a 	mov	r5,r17
 800bca8:	800c2f00 	call	800c2f0 <__umodsi3>
 800bcac:	8009883a 	mov	r4,r16
 800bcb0:	880b883a 	mov	r5,r17
 800bcb4:	102d883a 	mov	r22,r2
 800bcb8:	800c2e80 	call	800c2e8 <__udivsi3>
 800bcbc:	1009883a 	mov	r4,r2
 800bcc0:	a80b883a 	mov	r5,r21
 800bcc4:	b02c943a 	slli	r22,r22,16
 800bcc8:	800c2f80 	call	800c2f8 <__mulsi3>
 800bccc:	a13fffcc 	andi	r4,r20,65535
 800bcd0:	b106b03a 	or	r3,r22,r4
 800bcd4:	1880572e 	bgeu	r3,r2,800be34 <__umoddi3+0x284>
 800bcd8:	00005206 	br	800be24 <__umoddi3+0x274>
 800bcdc:	29c05936 	bltu	r5,r7,800be44 <__umoddi3+0x294>
 800bce0:	00bfffd4 	movui	r2,65535
 800bce4:	11c0652e 	bgeu	r2,r7,800be7c <__umoddi3+0x2cc>
 800bce8:	00804034 	movhi	r2,256
 800bcec:	10bfffc4 	addi	r2,r2,-1
 800bcf0:	11c1172e 	bgeu	r2,r7,800c150 <__umoddi3+0x5a0>
 800bcf4:	01400604 	movi	r5,24
 800bcf8:	282b883a 	mov	r21,r5
 800bcfc:	394ad83a 	srl	r5,r7,r5
 800bd00:	00c20074 	movhi	r3,2049
 800bd04:	18c72a04 	addi	r3,r3,7336
 800bd08:	194b883a 	add	r5,r3,r5
 800bd0c:	28800003 	ldbu	r2,0(r5)
 800bd10:	00c00804 	movi	r3,32
 800bd14:	156b883a 	add	r21,r2,r21
 800bd18:	1d69c83a 	sub	r20,r3,r21
 800bd1c:	a000671e 	bne	r20,zero,800bebc <__umoddi3+0x30c>
 800bd20:	3c400136 	bltu	r7,r17,800bd28 <__umoddi3+0x178>
 800bd24:	81812336 	bltu	r16,r6,800c1b4 <__umoddi3+0x604>
 800bd28:	8185c83a 	sub	r2,r16,r6
 800bd2c:	89e3c83a 	sub	r17,r17,r7
 800bd30:	8087803a 	cmpltu	r3,r16,r2
 800bd34:	88edc83a 	sub	r22,r17,r3
 800bd38:	b007883a 	mov	r3,r22
 800bd3c:	00004306 	br	800be4c <__umoddi3+0x29c>
 800bd40:	3000041e 	bne	r6,zero,800bd54 <__umoddi3+0x1a4>
 800bd44:	01000044 	movi	r4,1
 800bd48:	000b883a 	mov	r5,zero
 800bd4c:	800c2e80 	call	800c2e8 <__udivsi3>
 800bd50:	1027883a 	mov	r19,r2
 800bd54:	00bfffd4 	movui	r2,65535
 800bd58:	14c0532e 	bgeu	r2,r19,800bea8 <__umoddi3+0x2f8>
 800bd5c:	00804034 	movhi	r2,256
 800bd60:	10bfffc4 	addi	r2,r2,-1
 800bd64:	14c1032e 	bgeu	r2,r19,800c174 <__umoddi3+0x5c4>
 800bd68:	00800604 	movi	r2,24
 800bd6c:	1007883a 	mov	r3,r2
 800bd70:	9884d83a 	srl	r2,r19,r2
 800bd74:	01020074 	movhi	r4,2049
 800bd78:	21072a04 	addi	r4,r4,7336
 800bd7c:	2085883a 	add	r2,r4,r2
 800bd80:	11000003 	ldbu	r4,0(r2)
 800bd84:	00800804 	movi	r2,32
 800bd88:	20c7883a 	add	r3,r4,r3
 800bd8c:	10c5c83a 	sub	r2,r2,r3
 800bd90:	1000b61e 	bne	r2,zero,800c06c <__umoddi3+0x4bc>
 800bd94:	982ad43a 	srli	r21,r19,16
 800bd98:	8ce3c83a 	sub	r17,r17,r19
 800bd9c:	9dbfffcc 	andi	r22,r19,65535
 800bda0:	0025883a 	mov	r18,zero
 800bda4:	8809883a 	mov	r4,r17
 800bda8:	a80b883a 	mov	r5,r21
 800bdac:	800c2f00 	call	800c2f0 <__umodsi3>
 800bdb0:	8809883a 	mov	r4,r17
 800bdb4:	a80b883a 	mov	r5,r21
 800bdb8:	102f883a 	mov	r23,r2
 800bdbc:	800c2e80 	call	800c2e8 <__udivsi3>
 800bdc0:	1009883a 	mov	r4,r2
 800bdc4:	b00b883a 	mov	r5,r22
 800bdc8:	800c2f80 	call	800c2f8 <__mulsi3>
 800bdcc:	b82e943a 	slli	r23,r23,16
 800bdd0:	a008d43a 	srli	r4,r20,16
 800bdd4:	b906b03a 	or	r3,r23,r4
 800bdd8:	1880032e 	bgeu	r3,r2,800bde8 <__umoddi3+0x238>
 800bddc:	1cc7883a 	add	r3,r3,r19
 800bde0:	1cc00136 	bltu	r3,r19,800bde8 <__umoddi3+0x238>
 800bde4:	1880f136 	bltu	r3,r2,800c1ac <__umoddi3+0x5fc>
 800bde8:	18a1c83a 	sub	r16,r3,r2
 800bdec:	8009883a 	mov	r4,r16
 800bdf0:	a80b883a 	mov	r5,r21
 800bdf4:	800c2f00 	call	800c2f0 <__umodsi3>
 800bdf8:	8009883a 	mov	r4,r16
 800bdfc:	a80b883a 	mov	r5,r21
 800be00:	1023883a 	mov	r17,r2
 800be04:	800c2e80 	call	800c2e8 <__udivsi3>
 800be08:	1009883a 	mov	r4,r2
 800be0c:	b00b883a 	mov	r5,r22
 800be10:	8822943a 	slli	r17,r17,16
 800be14:	800c2f80 	call	800c2f8 <__mulsi3>
 800be18:	a13fffcc 	andi	r4,r20,65535
 800be1c:	8906b03a 	or	r3,r17,r4
 800be20:	1880042e 	bgeu	r3,r2,800be34 <__umoddi3+0x284>
 800be24:	1cc7883a 	add	r3,r3,r19
 800be28:	1cc00236 	bltu	r3,r19,800be34 <__umoddi3+0x284>
 800be2c:	1880012e 	bgeu	r3,r2,800be34 <__umoddi3+0x284>
 800be30:	1cc7883a 	add	r3,r3,r19
 800be34:	1887c83a 	sub	r3,r3,r2
 800be38:	1c84d83a 	srl	r2,r3,r18
 800be3c:	0007883a 	mov	r3,zero
 800be40:	00000206 	br	800be4c <__umoddi3+0x29c>
 800be44:	2005883a 	mov	r2,r4
 800be48:	2807883a 	mov	r3,r5
 800be4c:	dfc00b17 	ldw	ra,44(sp)
 800be50:	df000a17 	ldw	fp,40(sp)
 800be54:	ddc00917 	ldw	r23,36(sp)
 800be58:	dd800817 	ldw	r22,32(sp)
 800be5c:	dd400717 	ldw	r21,28(sp)
 800be60:	dd000617 	ldw	r20,24(sp)
 800be64:	dcc00517 	ldw	r19,20(sp)
 800be68:	dc800417 	ldw	r18,16(sp)
 800be6c:	dc400317 	ldw	r17,12(sp)
 800be70:	dc000217 	ldw	r16,8(sp)
 800be74:	dec00c04 	addi	sp,sp,48
 800be78:	f800283a 	ret
 800be7c:	00803fc4 	movi	r2,255
 800be80:	11c0b02e 	bgeu	r2,r7,800c144 <__umoddi3+0x594>
 800be84:	01400204 	movi	r5,8
 800be88:	282b883a 	mov	r21,r5
 800be8c:	003f9b06 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800be90:	00804034 	movhi	r2,256
 800be94:	10bfffc4 	addi	r2,r2,-1
 800be98:	1180b02e 	bgeu	r2,r6,800c15c <__umoddi3+0x5ac>
 800be9c:	01400604 	movi	r5,24
 800bea0:	2805883a 	mov	r2,r5
 800bea4:	003f5a06 	br	800bc10 <__alt_data_end+0xfc00bc10>
 800bea8:	00803fc4 	movi	r2,255
 800beac:	14c0ae2e 	bgeu	r2,r19,800c168 <__umoddi3+0x5b8>
 800beb0:	00800204 	movi	r2,8
 800beb4:	1007883a 	mov	r3,r2
 800beb8:	003fad06 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800bebc:	3d0a983a 	sll	r5,r7,r20
 800bec0:	356cd83a 	srl	r22,r6,r21
 800bec4:	8d78d83a 	srl	fp,r17,r21
 800bec8:	8d10983a 	sll	r8,r17,r20
 800becc:	2dacb03a 	or	r22,r5,r22
 800bed0:	b02ed43a 	srli	r23,r22,16
 800bed4:	8564d83a 	srl	r18,r16,r21
 800bed8:	e009883a 	mov	r4,fp
 800bedc:	b80b883a 	mov	r5,r23
 800bee0:	44a4b03a 	or	r18,r8,r18
 800bee4:	3526983a 	sll	r19,r6,r20
 800bee8:	800c2f00 	call	800c2f0 <__umodsi3>
 800beec:	e009883a 	mov	r4,fp
 800bef0:	b80b883a 	mov	r5,r23
 800bef4:	b47fffcc 	andi	r17,r22,65535
 800bef8:	d8800015 	stw	r2,0(sp)
 800befc:	800c2e80 	call	800c2e8 <__udivsi3>
 800bf00:	1009883a 	mov	r4,r2
 800bf04:	880b883a 	mov	r5,r17
 800bf08:	1039883a 	mov	fp,r2
 800bf0c:	800c2f80 	call	800c2f8 <__mulsi3>
 800bf10:	d9800017 	ldw	r6,0(sp)
 800bf14:	9008d43a 	srli	r4,r18,16
 800bf18:	8520983a 	sll	r16,r16,r20
 800bf1c:	300c943a 	slli	r6,r6,16
 800bf20:	3106b03a 	or	r3,r6,r4
 800bf24:	1880042e 	bgeu	r3,r2,800bf38 <__umoddi3+0x388>
 800bf28:	1d87883a 	add	r3,r3,r22
 800bf2c:	e13fffc4 	addi	r4,fp,-1
 800bf30:	1d809a2e 	bgeu	r3,r22,800c19c <__umoddi3+0x5ec>
 800bf34:	2039883a 	mov	fp,r4
 800bf38:	1887c83a 	sub	r3,r3,r2
 800bf3c:	1809883a 	mov	r4,r3
 800bf40:	b80b883a 	mov	r5,r23
 800bf44:	d8c00115 	stw	r3,4(sp)
 800bf48:	800c2f00 	call	800c2f0 <__umodsi3>
 800bf4c:	d8c00117 	ldw	r3,4(sp)
 800bf50:	b80b883a 	mov	r5,r23
 800bf54:	d8800015 	stw	r2,0(sp)
 800bf58:	1809883a 	mov	r4,r3
 800bf5c:	800c2e80 	call	800c2e8 <__udivsi3>
 800bf60:	880b883a 	mov	r5,r17
 800bf64:	1009883a 	mov	r4,r2
 800bf68:	102f883a 	mov	r23,r2
 800bf6c:	800c2f80 	call	800c2f8 <__mulsi3>
 800bf70:	d9800017 	ldw	r6,0(sp)
 800bf74:	947fffcc 	andi	r17,r18,65535
 800bf78:	300c943a 	slli	r6,r6,16
 800bf7c:	3464b03a 	or	r18,r6,r17
 800bf80:	9080042e 	bgeu	r18,r2,800bf94 <__umoddi3+0x3e4>
 800bf84:	95a5883a 	add	r18,r18,r22
 800bf88:	b8ffffc4 	addi	r3,r23,-1
 800bf8c:	95807f2e 	bgeu	r18,r22,800c18c <__umoddi3+0x5dc>
 800bf90:	182f883a 	mov	r23,r3
 800bf94:	e038943a 	slli	fp,fp,16
 800bf98:	980cd43a 	srli	r6,r19,16
 800bf9c:	98ffffcc 	andi	r3,r19,65535
 800bfa0:	bf38b03a 	or	fp,r23,fp
 800bfa4:	e02ed43a 	srli	r23,fp,16
 800bfa8:	e73fffcc 	andi	fp,fp,65535
 800bfac:	180b883a 	mov	r5,r3
 800bfb0:	e009883a 	mov	r4,fp
 800bfb4:	d9800015 	stw	r6,0(sp)
 800bfb8:	d8c00115 	stw	r3,4(sp)
 800bfbc:	90a5c83a 	sub	r18,r18,r2
 800bfc0:	800c2f80 	call	800c2f8 <__mulsi3>
 800bfc4:	d8c00117 	ldw	r3,4(sp)
 800bfc8:	b809883a 	mov	r4,r23
 800bfcc:	1023883a 	mov	r17,r2
 800bfd0:	180b883a 	mov	r5,r3
 800bfd4:	800c2f80 	call	800c2f8 <__mulsi3>
 800bfd8:	d9800017 	ldw	r6,0(sp)
 800bfdc:	b809883a 	mov	r4,r23
 800bfe0:	d8800115 	stw	r2,4(sp)
 800bfe4:	300b883a 	mov	r5,r6
 800bfe8:	302f883a 	mov	r23,r6
 800bfec:	800c2f80 	call	800c2f8 <__mulsi3>
 800bff0:	e009883a 	mov	r4,fp
 800bff4:	b80b883a 	mov	r5,r23
 800bff8:	d8800015 	stw	r2,0(sp)
 800bffc:	800c2f80 	call	800c2f8 <__mulsi3>
 800c000:	d8c00117 	ldw	r3,4(sp)
 800c004:	880cd43a 	srli	r6,r17,16
 800c008:	d9c00017 	ldw	r7,0(sp)
 800c00c:	1885883a 	add	r2,r3,r2
 800c010:	118d883a 	add	r6,r2,r6
 800c014:	30c0022e 	bgeu	r6,r3,800c020 <__umoddi3+0x470>
 800c018:	00800074 	movhi	r2,1
 800c01c:	388f883a 	add	r7,r7,r2
 800c020:	3006d43a 	srli	r3,r6,16
 800c024:	300c943a 	slli	r6,r6,16
 800c028:	8c7fffcc 	andi	r17,r17,65535
 800c02c:	38c7883a 	add	r3,r7,r3
 800c030:	3463883a 	add	r17,r6,r17
 800c034:	90c03d36 	bltu	r18,r3,800c12c <__umoddi3+0x57c>
 800c038:	90c06026 	beq	r18,r3,800c1bc <__umoddi3+0x60c>
 800c03c:	90c9c83a 	sub	r4,r18,r3
 800c040:	880f883a 	mov	r7,r17
 800c044:	81cfc83a 	sub	r7,r16,r7
 800c048:	81c7803a 	cmpltu	r3,r16,r7
 800c04c:	20c7c83a 	sub	r3,r4,r3
 800c050:	1d44983a 	sll	r2,r3,r21
 800c054:	3d0ed83a 	srl	r7,r7,r20
 800c058:	1d06d83a 	srl	r3,r3,r20
 800c05c:	11c4b03a 	or	r2,r2,r7
 800c060:	003f7a06 	br	800be4c <__alt_data_end+0xfc00be4c>
 800c064:	0025883a 	mov	r18,zero
 800c068:	003ef806 	br	800bc4c <__alt_data_end+0xfc00bc4c>
 800c06c:	98a6983a 	sll	r19,r19,r2
 800c070:	88e8d83a 	srl	r20,r17,r3
 800c074:	80c6d83a 	srl	r3,r16,r3
 800c078:	982ad43a 	srli	r21,r19,16
 800c07c:	88a2983a 	sll	r17,r17,r2
 800c080:	a009883a 	mov	r4,r20
 800c084:	a80b883a 	mov	r5,r21
 800c088:	88eeb03a 	or	r23,r17,r3
 800c08c:	1025883a 	mov	r18,r2
 800c090:	800c2f00 	call	800c2f0 <__umodsi3>
 800c094:	a009883a 	mov	r4,r20
 800c098:	a80b883a 	mov	r5,r21
 800c09c:	1023883a 	mov	r17,r2
 800c0a0:	9dbfffcc 	andi	r22,r19,65535
 800c0a4:	800c2e80 	call	800c2e8 <__udivsi3>
 800c0a8:	1009883a 	mov	r4,r2
 800c0ac:	b00b883a 	mov	r5,r22
 800c0b0:	800c2f80 	call	800c2f8 <__mulsi3>
 800c0b4:	8822943a 	slli	r17,r17,16
 800c0b8:	b808d43a 	srli	r4,r23,16
 800c0bc:	84a8983a 	sll	r20,r16,r18
 800c0c0:	8906b03a 	or	r3,r17,r4
 800c0c4:	1880042e 	bgeu	r3,r2,800c0d8 <__umoddi3+0x528>
 800c0c8:	1cc7883a 	add	r3,r3,r19
 800c0cc:	1cc00236 	bltu	r3,r19,800c0d8 <__umoddi3+0x528>
 800c0d0:	1880012e 	bgeu	r3,r2,800c0d8 <__umoddi3+0x528>
 800c0d4:	1cc7883a 	add	r3,r3,r19
 800c0d8:	18a1c83a 	sub	r16,r3,r2
 800c0dc:	8009883a 	mov	r4,r16
 800c0e0:	a80b883a 	mov	r5,r21
 800c0e4:	800c2f00 	call	800c2f0 <__umodsi3>
 800c0e8:	8009883a 	mov	r4,r16
 800c0ec:	a80b883a 	mov	r5,r21
 800c0f0:	1039883a 	mov	fp,r2
 800c0f4:	800c2e80 	call	800c2e8 <__udivsi3>
 800c0f8:	1009883a 	mov	r4,r2
 800c0fc:	b00b883a 	mov	r5,r22
 800c100:	800c2f80 	call	800c2f8 <__mulsi3>
 800c104:	e006943a 	slli	r3,fp,16
 800c108:	b93fffcc 	andi	r4,r23,65535
 800c10c:	1906b03a 	or	r3,r3,r4
 800c110:	1880042e 	bgeu	r3,r2,800c124 <__umoddi3+0x574>
 800c114:	1cc7883a 	add	r3,r3,r19
 800c118:	1cc00236 	bltu	r3,r19,800c124 <__umoddi3+0x574>
 800c11c:	1880012e 	bgeu	r3,r2,800c124 <__umoddi3+0x574>
 800c120:	1cc7883a 	add	r3,r3,r19
 800c124:	18a3c83a 	sub	r17,r3,r2
 800c128:	003f1e06 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800c12c:	8ccfc83a 	sub	r7,r17,r19
 800c130:	1d89c83a 	sub	r4,r3,r22
 800c134:	89e3803a 	cmpltu	r17,r17,r7
 800c138:	2463c83a 	sub	r17,r4,r17
 800c13c:	9449c83a 	sub	r4,r18,r17
 800c140:	003fc006 	br	800c044 <__alt_data_end+0xfc00c044>
 800c144:	000b883a 	mov	r5,zero
 800c148:	002b883a 	mov	r21,zero
 800c14c:	003eeb06 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800c150:	01400404 	movi	r5,16
 800c154:	282b883a 	mov	r21,r5
 800c158:	003ee806 	br	800bcfc <__alt_data_end+0xfc00bcfc>
 800c15c:	01400404 	movi	r5,16
 800c160:	2805883a 	mov	r2,r5
 800c164:	003eaa06 	br	800bc10 <__alt_data_end+0xfc00bc10>
 800c168:	0005883a 	mov	r2,zero
 800c16c:	0007883a 	mov	r3,zero
 800c170:	003eff06 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800c174:	00800404 	movi	r2,16
 800c178:	1007883a 	mov	r3,r2
 800c17c:	003efc06 	br	800bd70 <__alt_data_end+0xfc00bd70>
 800c180:	000b883a 	mov	r5,zero
 800c184:	0005883a 	mov	r2,zero
 800c188:	003ea106 	br	800bc10 <__alt_data_end+0xfc00bc10>
 800c18c:	90bf802e 	bgeu	r18,r2,800bf90 <__alt_data_end+0xfc00bf90>
 800c190:	bdffff84 	addi	r23,r23,-2
 800c194:	95a5883a 	add	r18,r18,r22
 800c198:	003f7e06 	br	800bf94 <__alt_data_end+0xfc00bf94>
 800c19c:	18bf652e 	bgeu	r3,r2,800bf34 <__alt_data_end+0xfc00bf34>
 800c1a0:	e73fff84 	addi	fp,fp,-2
 800c1a4:	1d87883a 	add	r3,r3,r22
 800c1a8:	003f6306 	br	800bf38 <__alt_data_end+0xfc00bf38>
 800c1ac:	1cc7883a 	add	r3,r3,r19
 800c1b0:	003f0d06 	br	800bde8 <__alt_data_end+0xfc00bde8>
 800c1b4:	8005883a 	mov	r2,r16
 800c1b8:	003edf06 	br	800bd38 <__alt_data_end+0xfc00bd38>
 800c1bc:	847fdb36 	bltu	r16,r17,800c12c <__alt_data_end+0xfc00c12c>
 800c1c0:	880f883a 	mov	r7,r17
 800c1c4:	0009883a 	mov	r4,zero
 800c1c8:	003f9e06 	br	800c044 <__alt_data_end+0xfc00c044>

0800c1cc <udivmodsi4>:
 800c1cc:	2900182e 	bgeu	r5,r4,800c230 <udivmodsi4+0x64>
 800c1d0:	28001716 	blt	r5,zero,800c230 <udivmodsi4+0x64>
 800c1d4:	00800804 	movi	r2,32
 800c1d8:	00c00044 	movi	r3,1
 800c1dc:	00000206 	br	800c1e8 <udivmodsi4+0x1c>
 800c1e0:	10001126 	beq	r2,zero,800c228 <udivmodsi4+0x5c>
 800c1e4:	28000516 	blt	r5,zero,800c1fc <udivmodsi4+0x30>
 800c1e8:	294b883a 	add	r5,r5,r5
 800c1ec:	10bfffc4 	addi	r2,r2,-1
 800c1f0:	18c7883a 	add	r3,r3,r3
 800c1f4:	293ffa36 	bltu	r5,r4,800c1e0 <__alt_data_end+0xfc00c1e0>
 800c1f8:	18000b26 	beq	r3,zero,800c228 <udivmodsi4+0x5c>
 800c1fc:	0005883a 	mov	r2,zero
 800c200:	21400236 	bltu	r4,r5,800c20c <udivmodsi4+0x40>
 800c204:	2149c83a 	sub	r4,r4,r5
 800c208:	10c4b03a 	or	r2,r2,r3
 800c20c:	1806d07a 	srli	r3,r3,1
 800c210:	280ad07a 	srli	r5,r5,1
 800c214:	183ffa1e 	bne	r3,zero,800c200 <__alt_data_end+0xfc00c200>
 800c218:	3000011e 	bne	r6,zero,800c220 <udivmodsi4+0x54>
 800c21c:	f800283a 	ret
 800c220:	2005883a 	mov	r2,r4
 800c224:	f800283a 	ret
 800c228:	0005883a 	mov	r2,zero
 800c22c:	003ffa06 	br	800c218 <__alt_data_end+0xfc00c218>
 800c230:	00c00044 	movi	r3,1
 800c234:	003ff106 	br	800c1fc <__alt_data_end+0xfc00c1fc>

0800c238 <__divsi3>:
 800c238:	defffe04 	addi	sp,sp,-8
 800c23c:	dfc00115 	stw	ra,4(sp)
 800c240:	dc000015 	stw	r16,0(sp)
 800c244:	20000b16 	blt	r4,zero,800c274 <__divsi3+0x3c>
 800c248:	0021883a 	mov	r16,zero
 800c24c:	28000c16 	blt	r5,zero,800c280 <__divsi3+0x48>
 800c250:	000d883a 	mov	r6,zero
 800c254:	800c1cc0 	call	800c1cc <udivmodsi4>
 800c258:	0407c83a 	sub	r3,zero,r16
 800c25c:	1884f03a 	xor	r2,r3,r2
 800c260:	1405883a 	add	r2,r2,r16
 800c264:	dfc00117 	ldw	ra,4(sp)
 800c268:	dc000017 	ldw	r16,0(sp)
 800c26c:	dec00204 	addi	sp,sp,8
 800c270:	f800283a 	ret
 800c274:	0109c83a 	sub	r4,zero,r4
 800c278:	04000044 	movi	r16,1
 800c27c:	283ff40e 	bge	r5,zero,800c250 <__alt_data_end+0xfc00c250>
 800c280:	014bc83a 	sub	r5,zero,r5
 800c284:	8400005c 	xori	r16,r16,1
 800c288:	003ff106 	br	800c250 <__alt_data_end+0xfc00c250>

0800c28c <__modsi3>:
 800c28c:	defffd04 	addi	sp,sp,-12
 800c290:	dfc00215 	stw	ra,8(sp)
 800c294:	dc400115 	stw	r17,4(sp)
 800c298:	dc000015 	stw	r16,0(sp)
 800c29c:	20000c16 	blt	r4,zero,800c2d0 <__modsi3+0x44>
 800c2a0:	0023883a 	mov	r17,zero
 800c2a4:	0021883a 	mov	r16,zero
 800c2a8:	28000d16 	blt	r5,zero,800c2e0 <__modsi3+0x54>
 800c2ac:	01800044 	movi	r6,1
 800c2b0:	800c1cc0 	call	800c1cc <udivmodsi4>
 800c2b4:	1404f03a 	xor	r2,r2,r16
 800c2b8:	8885883a 	add	r2,r17,r2
 800c2bc:	dfc00217 	ldw	ra,8(sp)
 800c2c0:	dc400117 	ldw	r17,4(sp)
 800c2c4:	dc000017 	ldw	r16,0(sp)
 800c2c8:	dec00304 	addi	sp,sp,12
 800c2cc:	f800283a 	ret
 800c2d0:	0109c83a 	sub	r4,zero,r4
 800c2d4:	04400044 	movi	r17,1
 800c2d8:	043fffc4 	movi	r16,-1
 800c2dc:	283ff30e 	bge	r5,zero,800c2ac <__alt_data_end+0xfc00c2ac>
 800c2e0:	014bc83a 	sub	r5,zero,r5
 800c2e4:	003ff106 	br	800c2ac <__alt_data_end+0xfc00c2ac>

0800c2e8 <__udivsi3>:
 800c2e8:	000d883a 	mov	r6,zero
 800c2ec:	800c1cc1 	jmpi	800c1cc <udivmodsi4>

0800c2f0 <__umodsi3>:
 800c2f0:	01800044 	movi	r6,1
 800c2f4:	800c1cc1 	jmpi	800c1cc <udivmodsi4>

0800c2f8 <__mulsi3>:
 800c2f8:	0005883a 	mov	r2,zero
 800c2fc:	20000726 	beq	r4,zero,800c31c <__mulsi3+0x24>
 800c300:	20c0004c 	andi	r3,r4,1
 800c304:	2008d07a 	srli	r4,r4,1
 800c308:	18000126 	beq	r3,zero,800c310 <__mulsi3+0x18>
 800c30c:	1145883a 	add	r2,r2,r5
 800c310:	294b883a 	add	r5,r5,r5
 800c314:	203ffa1e 	bne	r4,zero,800c300 <__alt_data_end+0xfc00c300>
 800c318:	f800283a 	ret
 800c31c:	f800283a 	ret

0800c320 <__adddf3>:
 800c320:	02000434 	movhi	r8,16
 800c324:	423fffc4 	addi	r8,r8,-1
 800c328:	defffb04 	addi	sp,sp,-20
 800c32c:	2a12703a 	and	r9,r5,r8
 800c330:	2806d7fa 	srli	r3,r5,31
 800c334:	3a10703a 	and	r8,r7,r8
 800c338:	3804d53a 	srli	r2,r7,20
 800c33c:	3014d77a 	srli	r10,r6,29
 800c340:	dc000015 	stw	r16,0(sp)
 800c344:	481290fa 	slli	r9,r9,3
 800c348:	2820d53a 	srli	r16,r5,20
 800c34c:	401090fa 	slli	r8,r8,3
 800c350:	200ad77a 	srli	r5,r4,29
 800c354:	380ed7fa 	srli	r7,r7,31
 800c358:	dc800215 	stw	r18,8(sp)
 800c35c:	dc400115 	stw	r17,4(sp)
 800c360:	dfc00415 	stw	ra,16(sp)
 800c364:	dcc00315 	stw	r19,12(sp)
 800c368:	1c803fcc 	andi	r18,r3,255
 800c36c:	8401ffcc 	andi	r16,r16,2047
 800c370:	494ab03a 	or	r5,r9,r5
 800c374:	202290fa 	slli	r17,r4,3
 800c378:	1081ffcc 	andi	r2,r2,2047
 800c37c:	4290b03a 	or	r8,r8,r10
 800c380:	300c90fa 	slli	r6,r6,3
 800c384:	91c07026 	beq	r18,r7,800c548 <__adddf3+0x228>
 800c388:	8087c83a 	sub	r3,r16,r2
 800c38c:	00c0b30e 	bge	zero,r3,800c65c <__adddf3+0x33c>
 800c390:	10002a1e 	bne	r2,zero,800c43c <__adddf3+0x11c>
 800c394:	4184b03a 	or	r2,r8,r6
 800c398:	1000991e 	bne	r2,zero,800c600 <__adddf3+0x2e0>
 800c39c:	888001cc 	andi	r2,r17,7
 800c3a0:	10005b26 	beq	r2,zero,800c510 <__adddf3+0x1f0>
 800c3a4:	88c003cc 	andi	r3,r17,15
 800c3a8:	00800104 	movi	r2,4
 800c3ac:	18805826 	beq	r3,r2,800c510 <__adddf3+0x1f0>
 800c3b0:	89800104 	addi	r6,r17,4
 800c3b4:	3463803a 	cmpltu	r17,r6,r17
 800c3b8:	2c4b883a 	add	r5,r5,r17
 800c3bc:	2880202c 	andhi	r2,r5,128
 800c3c0:	9007883a 	mov	r3,r18
 800c3c4:	3023883a 	mov	r17,r6
 800c3c8:	10005426 	beq	r2,zero,800c51c <__adddf3+0x1fc>
 800c3cc:	84000044 	addi	r16,r16,1
 800c3d0:	0081ffc4 	movi	r2,2047
 800c3d4:	8080c126 	beq	r16,r2,800c6dc <__adddf3+0x3bc>
 800c3d8:	013fe034 	movhi	r4,65408
 800c3dc:	213fffc4 	addi	r4,r4,-1
 800c3e0:	290a703a 	and	r5,r5,r4
 800c3e4:	2804977a 	slli	r2,r5,29
 800c3e8:	280a927a 	slli	r5,r5,9
 800c3ec:	8822d0fa 	srli	r17,r17,3
 800c3f0:	8401ffcc 	andi	r16,r16,2047
 800c3f4:	2808d33a 	srli	r4,r5,12
 800c3f8:	1444b03a 	or	r2,r2,r17
 800c3fc:	8401ffcc 	andi	r16,r16,2047
 800c400:	800a953a 	slli	r5,r16,20
 800c404:	18c03fcc 	andi	r3,r3,255
 800c408:	04000434 	movhi	r16,16
 800c40c:	180697fa 	slli	r3,r3,31
 800c410:	843fffc4 	addi	r16,r16,-1
 800c414:	2420703a 	and	r16,r4,r16
 800c418:	8160b03a 	or	r16,r16,r5
 800c41c:	80c6b03a 	or	r3,r16,r3
 800c420:	dfc00417 	ldw	ra,16(sp)
 800c424:	dcc00317 	ldw	r19,12(sp)
 800c428:	dc800217 	ldw	r18,8(sp)
 800c42c:	dc400117 	ldw	r17,4(sp)
 800c430:	dc000017 	ldw	r16,0(sp)
 800c434:	dec00504 	addi	sp,sp,20
 800c438:	f800283a 	ret
 800c43c:	0081ffc4 	movi	r2,2047
 800c440:	80bfd626 	beq	r16,r2,800c39c <__alt_data_end+0xfc00c39c>
 800c444:	42002034 	orhi	r8,r8,128
 800c448:	00800e04 	movi	r2,56
 800c44c:	10c0a616 	blt	r2,r3,800c6e8 <__adddf3+0x3c8>
 800c450:	008007c4 	movi	r2,31
 800c454:	10c0c916 	blt	r2,r3,800c77c <__adddf3+0x45c>
 800c458:	00800804 	movi	r2,32
 800c45c:	10c5c83a 	sub	r2,r2,r3
 800c460:	408e983a 	sll	r7,r8,r2
 800c464:	30c8d83a 	srl	r4,r6,r3
 800c468:	3084983a 	sll	r2,r6,r2
 800c46c:	40c6d83a 	srl	r3,r8,r3
 800c470:	390cb03a 	or	r6,r7,r4
 800c474:	1004c03a 	cmpne	r2,r2,zero
 800c478:	308cb03a 	or	r6,r6,r2
 800c47c:	898dc83a 	sub	r6,r17,r6
 800c480:	89a3803a 	cmpltu	r17,r17,r6
 800c484:	28cbc83a 	sub	r5,r5,r3
 800c488:	2c4bc83a 	sub	r5,r5,r17
 800c48c:	3023883a 	mov	r17,r6
 800c490:	2880202c 	andhi	r2,r5,128
 800c494:	10006d26 	beq	r2,zero,800c64c <__adddf3+0x32c>
 800c498:	04c02034 	movhi	r19,128
 800c49c:	9cffffc4 	addi	r19,r19,-1
 800c4a0:	2ce6703a 	and	r19,r5,r19
 800c4a4:	98007e26 	beq	r19,zero,800c6a0 <__adddf3+0x380>
 800c4a8:	9809883a 	mov	r4,r19
 800c4ac:	800eab80 	call	800eab8 <__clzsi2>
 800c4b0:	10fffe04 	addi	r3,r2,-8
 800c4b4:	010007c4 	movi	r4,31
 800c4b8:	20c07f16 	blt	r4,r3,800c6b8 <__adddf3+0x398>
 800c4bc:	01400a04 	movi	r5,40
 800c4c0:	2885c83a 	sub	r2,r5,r2
 800c4c4:	888ad83a 	srl	r5,r17,r2
 800c4c8:	98e6983a 	sll	r19,r19,r3
 800c4cc:	88e2983a 	sll	r17,r17,r3
 800c4d0:	2ce6b03a 	or	r19,r5,r19
 800c4d4:	1c007c16 	blt	r3,r16,800c6c8 <__adddf3+0x3a8>
 800c4d8:	1c21c83a 	sub	r16,r3,r16
 800c4dc:	81400044 	addi	r5,r16,1
 800c4e0:	00c007c4 	movi	r3,31
 800c4e4:	19409816 	blt	r3,r5,800c748 <__adddf3+0x428>
 800c4e8:	1c21c83a 	sub	r16,r3,r16
 800c4ec:	8c08983a 	sll	r4,r17,r16
 800c4f0:	8946d83a 	srl	r3,r17,r5
 800c4f4:	9c20983a 	sll	r16,r19,r16
 800c4f8:	2008c03a 	cmpne	r4,r4,zero
 800c4fc:	994ad83a 	srl	r5,r19,r5
 800c500:	1c06b03a 	or	r3,r3,r16
 800c504:	1922b03a 	or	r17,r3,r4
 800c508:	0021883a 	mov	r16,zero
 800c50c:	003fa306 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c510:	2880202c 	andhi	r2,r5,128
 800c514:	9007883a 	mov	r3,r18
 800c518:	103fac1e 	bne	r2,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800c51c:	2804977a 	slli	r2,r5,29
 800c520:	8822d0fa 	srli	r17,r17,3
 800c524:	0101ffc4 	movi	r4,2047
 800c528:	280ad0fa 	srli	r5,r5,3
 800c52c:	1444b03a 	or	r2,r2,r17
 800c530:	81002c26 	beq	r16,r4,800c5e4 <__adddf3+0x2c4>
 800c534:	8120703a 	and	r16,r16,r4
 800c538:	01000434 	movhi	r4,16
 800c53c:	213fffc4 	addi	r4,r4,-1
 800c540:	2908703a 	and	r4,r5,r4
 800c544:	003fad06 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800c548:	8089c83a 	sub	r4,r16,r2
 800c54c:	01006a0e 	bge	zero,r4,800c6f8 <__adddf3+0x3d8>
 800c550:	10003326 	beq	r2,zero,800c620 <__adddf3+0x300>
 800c554:	0081ffc4 	movi	r2,2047
 800c558:	80bf9026 	beq	r16,r2,800c39c <__alt_data_end+0xfc00c39c>
 800c55c:	42002034 	orhi	r8,r8,128
 800c560:	00800e04 	movi	r2,56
 800c564:	1100b116 	blt	r2,r4,800c82c <__adddf3+0x50c>
 800c568:	008007c4 	movi	r2,31
 800c56c:	1100e216 	blt	r2,r4,800c8f8 <__adddf3+0x5d8>
 800c570:	00800804 	movi	r2,32
 800c574:	1105c83a 	sub	r2,r2,r4
 800c578:	4092983a 	sll	r9,r8,r2
 800c57c:	310ed83a 	srl	r7,r6,r4
 800c580:	3084983a 	sll	r2,r6,r2
 800c584:	4110d83a 	srl	r8,r8,r4
 800c588:	49ccb03a 	or	r6,r9,r7
 800c58c:	1004c03a 	cmpne	r2,r2,zero
 800c590:	308cb03a 	or	r6,r6,r2
 800c594:	344d883a 	add	r6,r6,r17
 800c598:	3463803a 	cmpltu	r17,r6,r17
 800c59c:	414b883a 	add	r5,r8,r5
 800c5a0:	2c4b883a 	add	r5,r5,r17
 800c5a4:	3023883a 	mov	r17,r6
 800c5a8:	2880202c 	andhi	r2,r5,128
 800c5ac:	10002726 	beq	r2,zero,800c64c <__adddf3+0x32c>
 800c5b0:	84000044 	addi	r16,r16,1
 800c5b4:	0081ffc4 	movi	r2,2047
 800c5b8:	8080ae26 	beq	r16,r2,800c874 <__adddf3+0x554>
 800c5bc:	00bfe034 	movhi	r2,65408
 800c5c0:	10bfffc4 	addi	r2,r2,-1
 800c5c4:	288a703a 	and	r5,r5,r2
 800c5c8:	880cd07a 	srli	r6,r17,1
 800c5cc:	280897fa 	slli	r4,r5,31
 800c5d0:	88c0004c 	andi	r3,r17,1
 800c5d4:	30e2b03a 	or	r17,r6,r3
 800c5d8:	280ad07a 	srli	r5,r5,1
 800c5dc:	8922b03a 	or	r17,r17,r4
 800c5e0:	003f6e06 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c5e4:	1148b03a 	or	r4,r2,r5
 800c5e8:	20003c26 	beq	r4,zero,800c6dc <__adddf3+0x3bc>
 800c5ec:	29000234 	orhi	r4,r5,8
 800c5f0:	01400434 	movhi	r5,16
 800c5f4:	297fffc4 	addi	r5,r5,-1
 800c5f8:	2148703a 	and	r4,r4,r5
 800c5fc:	003f7f06 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800c600:	18ffffc4 	addi	r3,r3,-1
 800c604:	18004d1e 	bne	r3,zero,800c73c <__adddf3+0x41c>
 800c608:	898dc83a 	sub	r6,r17,r6
 800c60c:	89a3803a 	cmpltu	r17,r17,r6
 800c610:	2a0bc83a 	sub	r5,r5,r8
 800c614:	2c4bc83a 	sub	r5,r5,r17
 800c618:	3023883a 	mov	r17,r6
 800c61c:	003f9c06 	br	800c490 <__alt_data_end+0xfc00c490>
 800c620:	4184b03a 	or	r2,r8,r6
 800c624:	103f5d26 	beq	r2,zero,800c39c <__alt_data_end+0xfc00c39c>
 800c628:	213fffc4 	addi	r4,r4,-1
 800c62c:	203fd926 	beq	r4,zero,800c594 <__alt_data_end+0xfc00c594>
 800c630:	0081ffc4 	movi	r2,2047
 800c634:	80bfca1e 	bne	r16,r2,800c560 <__alt_data_end+0xfc00c560>
 800c638:	003f5806 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c63c:	10c8b03a 	or	r4,r2,r3
 800c640:	20008b26 	beq	r4,zero,800c870 <__adddf3+0x550>
 800c644:	100b883a 	mov	r5,r2
 800c648:	1823883a 	mov	r17,r3
 800c64c:	888001cc 	andi	r2,r17,7
 800c650:	103f541e 	bne	r2,zero,800c3a4 <__alt_data_end+0xfc00c3a4>
 800c654:	9007883a 	mov	r3,r18
 800c658:	003fb006 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c65c:	1800531e 	bne	r3,zero,800c7ac <__adddf3+0x48c>
 800c660:	80800044 	addi	r2,r16,1
 800c664:	1081ffcc 	andi	r2,r2,2047
 800c668:	00c00044 	movi	r3,1
 800c66c:	1880990e 	bge	r3,r2,800c8d4 <__adddf3+0x5b4>
 800c670:	8985c83a 	sub	r2,r17,r6
 800c674:	8887803a 	cmpltu	r3,r17,r2
 800c678:	2a27c83a 	sub	r19,r5,r8
 800c67c:	98e7c83a 	sub	r19,r19,r3
 800c680:	98c0202c 	andhi	r3,r19,128
 800c684:	18006226 	beq	r3,zero,800c810 <__adddf3+0x4f0>
 800c688:	3463c83a 	sub	r17,r6,r17
 800c68c:	4151c83a 	sub	r8,r8,r5
 800c690:	344d803a 	cmpltu	r6,r6,r17
 800c694:	41a7c83a 	sub	r19,r8,r6
 800c698:	3825883a 	mov	r18,r7
 800c69c:	983f821e 	bne	r19,zero,800c4a8 <__alt_data_end+0xfc00c4a8>
 800c6a0:	8809883a 	mov	r4,r17
 800c6a4:	800eab80 	call	800eab8 <__clzsi2>
 800c6a8:	10800804 	addi	r2,r2,32
 800c6ac:	10fffe04 	addi	r3,r2,-8
 800c6b0:	010007c4 	movi	r4,31
 800c6b4:	20ff810e 	bge	r4,r3,800c4bc <__alt_data_end+0xfc00c4bc>
 800c6b8:	14fff604 	addi	r19,r2,-40
 800c6bc:	8ce6983a 	sll	r19,r17,r19
 800c6c0:	0023883a 	mov	r17,zero
 800c6c4:	1c3f840e 	bge	r3,r16,800c4d8 <__alt_data_end+0xfc00c4d8>
 800c6c8:	017fe034 	movhi	r5,65408
 800c6cc:	297fffc4 	addi	r5,r5,-1
 800c6d0:	80e1c83a 	sub	r16,r16,r3
 800c6d4:	994a703a 	and	r5,r19,r5
 800c6d8:	003f3006 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c6dc:	0009883a 	mov	r4,zero
 800c6e0:	0005883a 	mov	r2,zero
 800c6e4:	003f4506 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800c6e8:	418cb03a 	or	r6,r8,r6
 800c6ec:	300cc03a 	cmpne	r6,r6,zero
 800c6f0:	0007883a 	mov	r3,zero
 800c6f4:	003f6106 	br	800c47c <__alt_data_end+0xfc00c47c>
 800c6f8:	2000921e 	bne	r4,zero,800c944 <__adddf3+0x624>
 800c6fc:	80800044 	addi	r2,r16,1
 800c700:	11c1ffcc 	andi	r7,r2,2047
 800c704:	01000044 	movi	r4,1
 800c708:	21c0610e 	bge	r4,r7,800c890 <__adddf3+0x570>
 800c70c:	0101ffc4 	movi	r4,2047
 800c710:	1100a326 	beq	r2,r4,800c9a0 <__adddf3+0x680>
 800c714:	344d883a 	add	r6,r6,r17
 800c718:	3463803a 	cmpltu	r17,r6,r17
 800c71c:	414b883a 	add	r5,r8,r5
 800c720:	2c4b883a 	add	r5,r5,r17
 800c724:	282297fa 	slli	r17,r5,31
 800c728:	300cd07a 	srli	r6,r6,1
 800c72c:	280ad07a 	srli	r5,r5,1
 800c730:	1021883a 	mov	r16,r2
 800c734:	89a2b03a 	or	r17,r17,r6
 800c738:	003f1806 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c73c:	0081ffc4 	movi	r2,2047
 800c740:	80bf411e 	bne	r16,r2,800c448 <__alt_data_end+0xfc00c448>
 800c744:	003f1506 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c748:	80bff844 	addi	r2,r16,-31
 800c74c:	00c00804 	movi	r3,32
 800c750:	9884d83a 	srl	r2,r19,r2
 800c754:	28c04a26 	beq	r5,r3,800c880 <__adddf3+0x560>
 800c758:	00c00fc4 	movi	r3,63
 800c75c:	1c21c83a 	sub	r16,r3,r16
 800c760:	9c26983a 	sll	r19,r19,r16
 800c764:	9c62b03a 	or	r17,r19,r17
 800c768:	8822c03a 	cmpne	r17,r17,zero
 800c76c:	88a2b03a 	or	r17,r17,r2
 800c770:	000b883a 	mov	r5,zero
 800c774:	0021883a 	mov	r16,zero
 800c778:	003fb406 	br	800c64c <__alt_data_end+0xfc00c64c>
 800c77c:	18bff804 	addi	r2,r3,-32
 800c780:	01000804 	movi	r4,32
 800c784:	4084d83a 	srl	r2,r8,r2
 800c788:	19003f26 	beq	r3,r4,800c888 <__adddf3+0x568>
 800c78c:	01001004 	movi	r4,64
 800c790:	20c7c83a 	sub	r3,r4,r3
 800c794:	40d0983a 	sll	r8,r8,r3
 800c798:	418cb03a 	or	r6,r8,r6
 800c79c:	300cc03a 	cmpne	r6,r6,zero
 800c7a0:	308cb03a 	or	r6,r6,r2
 800c7a4:	0007883a 	mov	r3,zero
 800c7a8:	003f3406 	br	800c47c <__alt_data_end+0xfc00c47c>
 800c7ac:	80002326 	beq	r16,zero,800c83c <__adddf3+0x51c>
 800c7b0:	0101ffc4 	movi	r4,2047
 800c7b4:	11005e26 	beq	r2,r4,800c930 <__adddf3+0x610>
 800c7b8:	00c7c83a 	sub	r3,zero,r3
 800c7bc:	29402034 	orhi	r5,r5,128
 800c7c0:	01000e04 	movi	r4,56
 800c7c4:	20c07216 	blt	r4,r3,800c990 <__adddf3+0x670>
 800c7c8:	010007c4 	movi	r4,31
 800c7cc:	20c0ce16 	blt	r4,r3,800cb08 <__adddf3+0x7e8>
 800c7d0:	01000804 	movi	r4,32
 800c7d4:	20c9c83a 	sub	r4,r4,r3
 800c7d8:	2914983a 	sll	r10,r5,r4
 800c7dc:	88d2d83a 	srl	r9,r17,r3
 800c7e0:	8908983a 	sll	r4,r17,r4
 800c7e4:	28c6d83a 	srl	r3,r5,r3
 800c7e8:	5262b03a 	or	r17,r10,r9
 800c7ec:	2008c03a 	cmpne	r4,r4,zero
 800c7f0:	8922b03a 	or	r17,r17,r4
 800c7f4:	3463c83a 	sub	r17,r6,r17
 800c7f8:	40c7c83a 	sub	r3,r8,r3
 800c7fc:	344d803a 	cmpltu	r6,r6,r17
 800c800:	198bc83a 	sub	r5,r3,r6
 800c804:	1021883a 	mov	r16,r2
 800c808:	3825883a 	mov	r18,r7
 800c80c:	003f2006 	br	800c490 <__alt_data_end+0xfc00c490>
 800c810:	9886b03a 	or	r3,r19,r2
 800c814:	1800141e 	bne	r3,zero,800c868 <__adddf3+0x548>
 800c818:	0007883a 	mov	r3,zero
 800c81c:	000b883a 	mov	r5,zero
 800c820:	0023883a 	mov	r17,zero
 800c824:	0021883a 	mov	r16,zero
 800c828:	003f3c06 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c82c:	418cb03a 	or	r6,r8,r6
 800c830:	300cc03a 	cmpne	r6,r6,zero
 800c834:	0011883a 	mov	r8,zero
 800c838:	003f5606 	br	800c594 <__alt_data_end+0xfc00c594>
 800c83c:	2c48b03a 	or	r4,r5,r17
 800c840:	20003b26 	beq	r4,zero,800c930 <__adddf3+0x610>
 800c844:	00c6303a 	nor	r3,zero,r3
 800c848:	1800371e 	bne	r3,zero,800c928 <__adddf3+0x608>
 800c84c:	3463c83a 	sub	r17,r6,r17
 800c850:	414bc83a 	sub	r5,r8,r5
 800c854:	344d803a 	cmpltu	r6,r6,r17
 800c858:	298bc83a 	sub	r5,r5,r6
 800c85c:	1021883a 	mov	r16,r2
 800c860:	3825883a 	mov	r18,r7
 800c864:	003f0a06 	br	800c490 <__alt_data_end+0xfc00c490>
 800c868:	1023883a 	mov	r17,r2
 800c86c:	003f0d06 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c870:	0007883a 	mov	r3,zero
 800c874:	000b883a 	mov	r5,zero
 800c878:	0023883a 	mov	r17,zero
 800c87c:	003f2706 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c880:	0027883a 	mov	r19,zero
 800c884:	003fb706 	br	800c764 <__alt_data_end+0xfc00c764>
 800c888:	0011883a 	mov	r8,zero
 800c88c:	003fc206 	br	800c798 <__alt_data_end+0xfc00c798>
 800c890:	2c44b03a 	or	r2,r5,r17
 800c894:	8000871e 	bne	r16,zero,800cab4 <__adddf3+0x794>
 800c898:	1000b126 	beq	r2,zero,800cb60 <__adddf3+0x840>
 800c89c:	4184b03a 	or	r2,r8,r6
 800c8a0:	103ebe26 	beq	r2,zero,800c39c <__alt_data_end+0xfc00c39c>
 800c8a4:	3445883a 	add	r2,r6,r17
 800c8a8:	1463803a 	cmpltu	r17,r2,r17
 800c8ac:	414b883a 	add	r5,r8,r5
 800c8b0:	2c4b883a 	add	r5,r5,r17
 800c8b4:	28c0202c 	andhi	r3,r5,128
 800c8b8:	1023883a 	mov	r17,r2
 800c8bc:	183f6326 	beq	r3,zero,800c64c <__alt_data_end+0xfc00c64c>
 800c8c0:	00bfe034 	movhi	r2,65408
 800c8c4:	10bfffc4 	addi	r2,r2,-1
 800c8c8:	2021883a 	mov	r16,r4
 800c8cc:	288a703a 	and	r5,r5,r2
 800c8d0:	003eb206 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c8d4:	2c44b03a 	or	r2,r5,r17
 800c8d8:	8000251e 	bne	r16,zero,800c970 <__adddf3+0x650>
 800c8dc:	10004b1e 	bne	r2,zero,800ca0c <__adddf3+0x6ec>
 800c8e0:	4184b03a 	or	r2,r8,r6
 800c8e4:	103fe226 	beq	r2,zero,800c870 <__alt_data_end+0xfc00c870>
 800c8e8:	400b883a 	mov	r5,r8
 800c8ec:	3023883a 	mov	r17,r6
 800c8f0:	3825883a 	mov	r18,r7
 800c8f4:	003ea906 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c8f8:	20bff804 	addi	r2,r4,-32
 800c8fc:	01c00804 	movi	r7,32
 800c900:	4084d83a 	srl	r2,r8,r2
 800c904:	21c07e26 	beq	r4,r7,800cb00 <__adddf3+0x7e0>
 800c908:	01c01004 	movi	r7,64
 800c90c:	3909c83a 	sub	r4,r7,r4
 800c910:	4110983a 	sll	r8,r8,r4
 800c914:	418cb03a 	or	r6,r8,r6
 800c918:	300cc03a 	cmpne	r6,r6,zero
 800c91c:	308cb03a 	or	r6,r6,r2
 800c920:	0011883a 	mov	r8,zero
 800c924:	003f1b06 	br	800c594 <__alt_data_end+0xfc00c594>
 800c928:	0101ffc4 	movi	r4,2047
 800c92c:	113fa41e 	bne	r2,r4,800c7c0 <__alt_data_end+0xfc00c7c0>
 800c930:	400b883a 	mov	r5,r8
 800c934:	3023883a 	mov	r17,r6
 800c938:	1021883a 	mov	r16,r2
 800c93c:	3825883a 	mov	r18,r7
 800c940:	003e9606 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c944:	80001a1e 	bne	r16,zero,800c9b0 <__adddf3+0x690>
 800c948:	2c4eb03a 	or	r7,r5,r17
 800c94c:	38005526 	beq	r7,zero,800caa4 <__adddf3+0x784>
 800c950:	0108303a 	nor	r4,zero,r4
 800c954:	2000511e 	bne	r4,zero,800ca9c <__adddf3+0x77c>
 800c958:	89a3883a 	add	r17,r17,r6
 800c95c:	414b883a 	add	r5,r8,r5
 800c960:	898d803a 	cmpltu	r6,r17,r6
 800c964:	298b883a 	add	r5,r5,r6
 800c968:	1021883a 	mov	r16,r2
 800c96c:	003f0e06 	br	800c5a8 <__alt_data_end+0xfc00c5a8>
 800c970:	1000341e 	bne	r2,zero,800ca44 <__adddf3+0x724>
 800c974:	4184b03a 	or	r2,r8,r6
 800c978:	10006f26 	beq	r2,zero,800cb38 <__adddf3+0x818>
 800c97c:	400b883a 	mov	r5,r8
 800c980:	3023883a 	mov	r17,r6
 800c984:	3825883a 	mov	r18,r7
 800c988:	0401ffc4 	movi	r16,2047
 800c98c:	003e8306 	br	800c39c <__alt_data_end+0xfc00c39c>
 800c990:	2c62b03a 	or	r17,r5,r17
 800c994:	8822c03a 	cmpne	r17,r17,zero
 800c998:	0007883a 	mov	r3,zero
 800c99c:	003f9506 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800c9a0:	1021883a 	mov	r16,r2
 800c9a4:	000b883a 	mov	r5,zero
 800c9a8:	0023883a 	mov	r17,zero
 800c9ac:	003edb06 	br	800c51c <__alt_data_end+0xfc00c51c>
 800c9b0:	01c1ffc4 	movi	r7,2047
 800c9b4:	11c03b26 	beq	r2,r7,800caa4 <__adddf3+0x784>
 800c9b8:	0109c83a 	sub	r4,zero,r4
 800c9bc:	29402034 	orhi	r5,r5,128
 800c9c0:	01c00e04 	movi	r7,56
 800c9c4:	39006216 	blt	r7,r4,800cb50 <__adddf3+0x830>
 800c9c8:	01c007c4 	movi	r7,31
 800c9cc:	39006b16 	blt	r7,r4,800cb7c <__adddf3+0x85c>
 800c9d0:	01c00804 	movi	r7,32
 800c9d4:	390fc83a 	sub	r7,r7,r4
 800c9d8:	29d4983a 	sll	r10,r5,r7
 800c9dc:	8912d83a 	srl	r9,r17,r4
 800c9e0:	89ce983a 	sll	r7,r17,r7
 800c9e4:	2908d83a 	srl	r4,r5,r4
 800c9e8:	5262b03a 	or	r17,r10,r9
 800c9ec:	380ac03a 	cmpne	r5,r7,zero
 800c9f0:	8962b03a 	or	r17,r17,r5
 800c9f4:	89a3883a 	add	r17,r17,r6
 800c9f8:	2211883a 	add	r8,r4,r8
 800c9fc:	898d803a 	cmpltu	r6,r17,r6
 800ca00:	418b883a 	add	r5,r8,r6
 800ca04:	1021883a 	mov	r16,r2
 800ca08:	003ee706 	br	800c5a8 <__alt_data_end+0xfc00c5a8>
 800ca0c:	4184b03a 	or	r2,r8,r6
 800ca10:	103e6226 	beq	r2,zero,800c39c <__alt_data_end+0xfc00c39c>
 800ca14:	8987c83a 	sub	r3,r17,r6
 800ca18:	88c9803a 	cmpltu	r4,r17,r3
 800ca1c:	2a05c83a 	sub	r2,r5,r8
 800ca20:	1105c83a 	sub	r2,r2,r4
 800ca24:	1100202c 	andhi	r4,r2,128
 800ca28:	203f0426 	beq	r4,zero,800c63c <__alt_data_end+0xfc00c63c>
 800ca2c:	3463c83a 	sub	r17,r6,r17
 800ca30:	414bc83a 	sub	r5,r8,r5
 800ca34:	344d803a 	cmpltu	r6,r6,r17
 800ca38:	298bc83a 	sub	r5,r5,r6
 800ca3c:	3825883a 	mov	r18,r7
 800ca40:	003e5606 	br	800c39c <__alt_data_end+0xfc00c39c>
 800ca44:	4184b03a 	or	r2,r8,r6
 800ca48:	10002b26 	beq	r2,zero,800caf8 <__adddf3+0x7d8>
 800ca4c:	2804d0fa 	srli	r2,r5,3
 800ca50:	8822d0fa 	srli	r17,r17,3
 800ca54:	280a977a 	slli	r5,r5,29
 800ca58:	10c0022c 	andhi	r3,r2,8
 800ca5c:	2c62b03a 	or	r17,r5,r17
 800ca60:	18000826 	beq	r3,zero,800ca84 <__adddf3+0x764>
 800ca64:	4008d0fa 	srli	r4,r8,3
 800ca68:	20c0022c 	andhi	r3,r4,8
 800ca6c:	1800051e 	bne	r3,zero,800ca84 <__adddf3+0x764>
 800ca70:	300cd0fa 	srli	r6,r6,3
 800ca74:	4010977a 	slli	r8,r8,29
 800ca78:	2005883a 	mov	r2,r4
 800ca7c:	3825883a 	mov	r18,r7
 800ca80:	41a2b03a 	or	r17,r8,r6
 800ca84:	880ad77a 	srli	r5,r17,29
 800ca88:	100490fa 	slli	r2,r2,3
 800ca8c:	882290fa 	slli	r17,r17,3
 800ca90:	0401ffc4 	movi	r16,2047
 800ca94:	288ab03a 	or	r5,r5,r2
 800ca98:	003e4006 	br	800c39c <__alt_data_end+0xfc00c39c>
 800ca9c:	01c1ffc4 	movi	r7,2047
 800caa0:	11ffc71e 	bne	r2,r7,800c9c0 <__alt_data_end+0xfc00c9c0>
 800caa4:	400b883a 	mov	r5,r8
 800caa8:	3023883a 	mov	r17,r6
 800caac:	1021883a 	mov	r16,r2
 800cab0:	003e3a06 	br	800c39c <__alt_data_end+0xfc00c39c>
 800cab4:	10002d26 	beq	r2,zero,800cb6c <__adddf3+0x84c>
 800cab8:	4184b03a 	or	r2,r8,r6
 800cabc:	10000e26 	beq	r2,zero,800caf8 <__adddf3+0x7d8>
 800cac0:	2804d0fa 	srli	r2,r5,3
 800cac4:	8822d0fa 	srli	r17,r17,3
 800cac8:	280a977a 	slli	r5,r5,29
 800cacc:	10c0022c 	andhi	r3,r2,8
 800cad0:	2c62b03a 	or	r17,r5,r17
 800cad4:	183feb26 	beq	r3,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800cad8:	4008d0fa 	srli	r4,r8,3
 800cadc:	20c0022c 	andhi	r3,r4,8
 800cae0:	183fe81e 	bne	r3,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800cae4:	300cd0fa 	srli	r6,r6,3
 800cae8:	4010977a 	slli	r8,r8,29
 800caec:	2005883a 	mov	r2,r4
 800caf0:	41a2b03a 	or	r17,r8,r6
 800caf4:	003fe306 	br	800ca84 <__alt_data_end+0xfc00ca84>
 800caf8:	0401ffc4 	movi	r16,2047
 800cafc:	003e2706 	br	800c39c <__alt_data_end+0xfc00c39c>
 800cb00:	0011883a 	mov	r8,zero
 800cb04:	003f8306 	br	800c914 <__alt_data_end+0xfc00c914>
 800cb08:	193ff804 	addi	r4,r3,-32
 800cb0c:	02400804 	movi	r9,32
 800cb10:	2908d83a 	srl	r4,r5,r4
 800cb14:	1a402526 	beq	r3,r9,800cbac <__adddf3+0x88c>
 800cb18:	02401004 	movi	r9,64
 800cb1c:	48c7c83a 	sub	r3,r9,r3
 800cb20:	28ca983a 	sll	r5,r5,r3
 800cb24:	2c62b03a 	or	r17,r5,r17
 800cb28:	8822c03a 	cmpne	r17,r17,zero
 800cb2c:	8922b03a 	or	r17,r17,r4
 800cb30:	0007883a 	mov	r3,zero
 800cb34:	003f2f06 	br	800c7f4 <__alt_data_end+0xfc00c7f4>
 800cb38:	01402034 	movhi	r5,128
 800cb3c:	0007883a 	mov	r3,zero
 800cb40:	297fffc4 	addi	r5,r5,-1
 800cb44:	047ffe04 	movi	r17,-8
 800cb48:	0401ffc4 	movi	r16,2047
 800cb4c:	003e7306 	br	800c51c <__alt_data_end+0xfc00c51c>
 800cb50:	2c62b03a 	or	r17,r5,r17
 800cb54:	8822c03a 	cmpne	r17,r17,zero
 800cb58:	0009883a 	mov	r4,zero
 800cb5c:	003fa506 	br	800c9f4 <__alt_data_end+0xfc00c9f4>
 800cb60:	400b883a 	mov	r5,r8
 800cb64:	3023883a 	mov	r17,r6
 800cb68:	003e0c06 	br	800c39c <__alt_data_end+0xfc00c39c>
 800cb6c:	400b883a 	mov	r5,r8
 800cb70:	3023883a 	mov	r17,r6
 800cb74:	0401ffc4 	movi	r16,2047
 800cb78:	003e0806 	br	800c39c <__alt_data_end+0xfc00c39c>
 800cb7c:	21fff804 	addi	r7,r4,-32
 800cb80:	02400804 	movi	r9,32
 800cb84:	29ced83a 	srl	r7,r5,r7
 800cb88:	22400a26 	beq	r4,r9,800cbb4 <__adddf3+0x894>
 800cb8c:	02401004 	movi	r9,64
 800cb90:	4909c83a 	sub	r4,r9,r4
 800cb94:	290a983a 	sll	r5,r5,r4
 800cb98:	2c62b03a 	or	r17,r5,r17
 800cb9c:	8822c03a 	cmpne	r17,r17,zero
 800cba0:	89e2b03a 	or	r17,r17,r7
 800cba4:	0009883a 	mov	r4,zero
 800cba8:	003f9206 	br	800c9f4 <__alt_data_end+0xfc00c9f4>
 800cbac:	000b883a 	mov	r5,zero
 800cbb0:	003fdc06 	br	800cb24 <__alt_data_end+0xfc00cb24>
 800cbb4:	000b883a 	mov	r5,zero
 800cbb8:	003ff706 	br	800cb98 <__alt_data_end+0xfc00cb98>

0800cbbc <__divdf3>:
 800cbbc:	defff004 	addi	sp,sp,-64
 800cbc0:	dc800815 	stw	r18,32(sp)
 800cbc4:	2824d53a 	srli	r18,r5,20
 800cbc8:	dd800c15 	stw	r22,48(sp)
 800cbcc:	282cd7fa 	srli	r22,r5,31
 800cbd0:	dc000615 	stw	r16,24(sp)
 800cbd4:	04000434 	movhi	r16,16
 800cbd8:	df000e15 	stw	fp,56(sp)
 800cbdc:	dd000a15 	stw	r20,40(sp)
 800cbe0:	dcc00915 	stw	r19,36(sp)
 800cbe4:	dc400715 	stw	r17,28(sp)
 800cbe8:	843fffc4 	addi	r16,r16,-1
 800cbec:	dfc00f15 	stw	ra,60(sp)
 800cbf0:	ddc00d15 	stw	r23,52(sp)
 800cbf4:	dd400b15 	stw	r21,44(sp)
 800cbf8:	9481ffcc 	andi	r18,r18,2047
 800cbfc:	2029883a 	mov	r20,r4
 800cc00:	2027883a 	mov	r19,r4
 800cc04:	2c22703a 	and	r17,r5,r16
 800cc08:	b7003fcc 	andi	fp,r22,255
 800cc0c:	90005e26 	beq	r18,zero,800cd88 <__divdf3+0x1cc>
 800cc10:	0081ffc4 	movi	r2,2047
 800cc14:	90803526 	beq	r18,r2,800ccec <__divdf3+0x130>
 800cc18:	8c000434 	orhi	r16,r17,16
 800cc1c:	2004d77a 	srli	r2,r4,29
 800cc20:	802090fa 	slli	r16,r16,3
 800cc24:	202690fa 	slli	r19,r4,3
 800cc28:	94bf0044 	addi	r18,r18,-1023
 800cc2c:	80a2b03a 	or	r17,r16,r2
 800cc30:	0029883a 	mov	r20,zero
 800cc34:	0011883a 	mov	r8,zero
 800cc38:	380ad53a 	srli	r5,r7,20
 800cc3c:	382ed7fa 	srli	r23,r7,31
 800cc40:	04000434 	movhi	r16,16
 800cc44:	843fffc4 	addi	r16,r16,-1
 800cc48:	2941ffcc 	andi	r5,r5,2047
 800cc4c:	302b883a 	mov	r21,r6
 800cc50:	3c20703a 	and	r16,r7,r16
 800cc54:	ba403fcc 	andi	r9,r23,255
 800cc58:	28006726 	beq	r5,zero,800cdf8 <__divdf3+0x23c>
 800cc5c:	0081ffc4 	movi	r2,2047
 800cc60:	28805f26 	beq	r5,r2,800cde0 <__divdf3+0x224>
 800cc64:	84000434 	orhi	r16,r16,16
 800cc68:	3004d77a 	srli	r2,r6,29
 800cc6c:	802090fa 	slli	r16,r16,3
 800cc70:	302a90fa 	slli	r21,r6,3
 800cc74:	297f0044 	addi	r5,r5,-1023
 800cc78:	80a0b03a 	or	r16,r16,r2
 800cc7c:	000f883a 	mov	r7,zero
 800cc80:	3d06b03a 	or	r3,r7,r20
 800cc84:	180690ba 	slli	r3,r3,2
 800cc88:	00820074 	movhi	r2,2049
 800cc8c:	10b32b04 	addi	r2,r2,-13140
 800cc90:	1885883a 	add	r2,r3,r2
 800cc94:	10800017 	ldw	r2,0(r2)
 800cc98:	b5c8f03a 	xor	r4,r22,r23
 800cc9c:	200d883a 	mov	r6,r4
 800cca0:	25003fcc 	andi	r20,r4,255
 800cca4:	9165c83a 	sub	r18,r18,r5
 800cca8:	1000683a 	jmp	r2
 800ccac:	0800cef4 	orhi	zero,at,827
 800ccb0:	0800cd24 	muli	zero,at,820
 800ccb4:	0800ceb8 	rdprs	zero,at,826
 800ccb8:	0800cd08 	cmpgei	zero,at,820
 800ccbc:	0800ceb8 	rdprs	zero,at,826
 800ccc0:	0800ce8c 	andi	zero,at,826
 800ccc4:	0800ceb8 	rdprs	zero,at,826
 800ccc8:	0800cd08 	cmpgei	zero,at,820
 800cccc:	0800cd24 	muli	zero,at,820
 800ccd0:	0800cd24 	muli	zero,at,820
 800ccd4:	0800ce8c 	andi	zero,at,826
 800ccd8:	0800cd08 	cmpgei	zero,at,820
 800ccdc:	0800cd18 	cmpnei	zero,at,820
 800cce0:	0800cd18 	cmpnei	zero,at,820
 800cce4:	0800cd18 	cmpnei	zero,at,820
 800cce8:	0800cec8 	cmpgei	zero,at,827
 800ccec:	8904b03a 	or	r2,r17,r4
 800ccf0:	1000631e 	bne	r2,zero,800ce80 <__divdf3+0x2c4>
 800ccf4:	05000204 	movi	r20,8
 800ccf8:	0023883a 	mov	r17,zero
 800ccfc:	0027883a 	mov	r19,zero
 800cd00:	02000084 	movi	r8,2
 800cd04:	003fcc06 	br	800cc38 <__alt_data_end+0xfc00cc38>
 800cd08:	8023883a 	mov	r17,r16
 800cd0c:	a827883a 	mov	r19,r21
 800cd10:	4839883a 	mov	fp,r9
 800cd14:	3811883a 	mov	r8,r7
 800cd18:	00800084 	movi	r2,2
 800cd1c:	4081531e 	bne	r8,r2,800d26c <__divdf3+0x6b0>
 800cd20:	e029883a 	mov	r20,fp
 800cd24:	a180004c 	andi	r6,r20,1
 800cd28:	0201ffc4 	movi	r8,2047
 800cd2c:	000b883a 	mov	r5,zero
 800cd30:	0027883a 	mov	r19,zero
 800cd34:	4010953a 	slli	r8,r8,20
 800cd38:	30c03fcc 	andi	r3,r6,255
 800cd3c:	04000434 	movhi	r16,16
 800cd40:	180697fa 	slli	r3,r3,31
 800cd44:	843fffc4 	addi	r16,r16,-1
 800cd48:	2c20703a 	and	r16,r5,r16
 800cd4c:	8220b03a 	or	r16,r16,r8
 800cd50:	80c6b03a 	or	r3,r16,r3
 800cd54:	9805883a 	mov	r2,r19
 800cd58:	dfc00f17 	ldw	ra,60(sp)
 800cd5c:	df000e17 	ldw	fp,56(sp)
 800cd60:	ddc00d17 	ldw	r23,52(sp)
 800cd64:	dd800c17 	ldw	r22,48(sp)
 800cd68:	dd400b17 	ldw	r21,44(sp)
 800cd6c:	dd000a17 	ldw	r20,40(sp)
 800cd70:	dcc00917 	ldw	r19,36(sp)
 800cd74:	dc800817 	ldw	r18,32(sp)
 800cd78:	dc400717 	ldw	r17,28(sp)
 800cd7c:	dc000617 	ldw	r16,24(sp)
 800cd80:	dec01004 	addi	sp,sp,64
 800cd84:	f800283a 	ret
 800cd88:	8904b03a 	or	r2,r17,r4
 800cd8c:	10003726 	beq	r2,zero,800ce6c <__divdf3+0x2b0>
 800cd90:	88014d26 	beq	r17,zero,800d2c8 <__divdf3+0x70c>
 800cd94:	8809883a 	mov	r4,r17
 800cd98:	d9800215 	stw	r6,8(sp)
 800cd9c:	d9c00515 	stw	r7,20(sp)
 800cda0:	800eab80 	call	800eab8 <__clzsi2>
 800cda4:	d9800217 	ldw	r6,8(sp)
 800cda8:	d9c00517 	ldw	r7,20(sp)
 800cdac:	1007883a 	mov	r3,r2
 800cdb0:	01000a04 	movi	r4,40
 800cdb4:	1cfffe04 	addi	r19,r3,-8
 800cdb8:	20c9c83a 	sub	r4,r4,r3
 800cdbc:	8cca983a 	sll	r5,r17,r19
 800cdc0:	a108d83a 	srl	r4,r20,r4
 800cdc4:	a4e6983a 	sll	r19,r20,r19
 800cdc8:	2162b03a 	or	r17,r4,r5
 800cdcc:	04bf0344 	movi	r18,-1011
 800cdd0:	90e5c83a 	sub	r18,r18,r3
 800cdd4:	0029883a 	mov	r20,zero
 800cdd8:	0011883a 	mov	r8,zero
 800cddc:	003f9606 	br	800cc38 <__alt_data_end+0xfc00cc38>
 800cde0:	8184b03a 	or	r2,r16,r6
 800cde4:	10001f1e 	bne	r2,zero,800ce64 <__divdf3+0x2a8>
 800cde8:	0021883a 	mov	r16,zero
 800cdec:	002b883a 	mov	r21,zero
 800cdf0:	01c00084 	movi	r7,2
 800cdf4:	003fa206 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800cdf8:	8184b03a 	or	r2,r16,r6
 800cdfc:	10001526 	beq	r2,zero,800ce54 <__divdf3+0x298>
 800ce00:	80013d26 	beq	r16,zero,800d2f8 <__divdf3+0x73c>
 800ce04:	8009883a 	mov	r4,r16
 800ce08:	d9800215 	stw	r6,8(sp)
 800ce0c:	da000315 	stw	r8,12(sp)
 800ce10:	da400415 	stw	r9,16(sp)
 800ce14:	800eab80 	call	800eab8 <__clzsi2>
 800ce18:	d9800217 	ldw	r6,8(sp)
 800ce1c:	da000317 	ldw	r8,12(sp)
 800ce20:	da400417 	ldw	r9,16(sp)
 800ce24:	1007883a 	mov	r3,r2
 800ce28:	01000a04 	movi	r4,40
 800ce2c:	1d7ffe04 	addi	r21,r3,-8
 800ce30:	20c9c83a 	sub	r4,r4,r3
 800ce34:	8560983a 	sll	r16,r16,r21
 800ce38:	3108d83a 	srl	r4,r6,r4
 800ce3c:	356a983a 	sll	r21,r6,r21
 800ce40:	2420b03a 	or	r16,r4,r16
 800ce44:	017f0344 	movi	r5,-1011
 800ce48:	28cbc83a 	sub	r5,r5,r3
 800ce4c:	000f883a 	mov	r7,zero
 800ce50:	003f8b06 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800ce54:	0021883a 	mov	r16,zero
 800ce58:	002b883a 	mov	r21,zero
 800ce5c:	01c00044 	movi	r7,1
 800ce60:	003f8706 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800ce64:	01c000c4 	movi	r7,3
 800ce68:	003f8506 	br	800cc80 <__alt_data_end+0xfc00cc80>
 800ce6c:	05000104 	movi	r20,4
 800ce70:	0023883a 	mov	r17,zero
 800ce74:	0027883a 	mov	r19,zero
 800ce78:	02000044 	movi	r8,1
 800ce7c:	003f6e06 	br	800cc38 <__alt_data_end+0xfc00cc38>
 800ce80:	05000304 	movi	r20,12
 800ce84:	020000c4 	movi	r8,3
 800ce88:	003f6b06 	br	800cc38 <__alt_data_end+0xfc00cc38>
 800ce8c:	01400434 	movhi	r5,16
 800ce90:	000d883a 	mov	r6,zero
 800ce94:	297fffc4 	addi	r5,r5,-1
 800ce98:	04ffffc4 	movi	r19,-1
 800ce9c:	0201ffc4 	movi	r8,2047
 800cea0:	003fa406 	br	800cd34 <__alt_data_end+0xfc00cd34>
 800cea4:	043f0084 	movi	r16,-1022
 800cea8:	84a1c83a 	sub	r16,r16,r18
 800ceac:	00800e04 	movi	r2,56
 800ceb0:	14014d0e 	bge	r2,r16,800d3e8 <__divdf3+0x82c>
 800ceb4:	a180004c 	andi	r6,r20,1
 800ceb8:	0011883a 	mov	r8,zero
 800cebc:	000b883a 	mov	r5,zero
 800cec0:	0027883a 	mov	r19,zero
 800cec4:	003f9b06 	br	800cd34 <__alt_data_end+0xfc00cd34>
 800cec8:	8880022c 	andhi	r2,r17,8
 800cecc:	1000f026 	beq	r2,zero,800d290 <__divdf3+0x6d4>
 800ced0:	8080022c 	andhi	r2,r16,8
 800ced4:	1000ee1e 	bne	r2,zero,800d290 <__divdf3+0x6d4>
 800ced8:	00800434 	movhi	r2,16
 800cedc:	81400234 	orhi	r5,r16,8
 800cee0:	10bfffc4 	addi	r2,r2,-1
 800cee4:	b80d883a 	mov	r6,r23
 800cee8:	288a703a 	and	r5,r5,r2
 800ceec:	a827883a 	mov	r19,r21
 800cef0:	003fea06 	br	800ce9c <__alt_data_end+0xfc00ce9c>
 800cef4:	84411c36 	bltu	r16,r17,800d368 <__divdf3+0x7ac>
 800cef8:	8c011a26 	beq	r17,r16,800d364 <__divdf3+0x7a8>
 800cefc:	94bfffc4 	addi	r18,r18,-1
 800cf00:	dcc00015 	stw	r19,0(sp)
 800cf04:	8811883a 	mov	r8,r17
 800cf08:	002d883a 	mov	r22,zero
 800cf0c:	a80cd63a 	srli	r6,r21,24
 800cf10:	8020923a 	slli	r16,r16,8
 800cf14:	a82a923a 	slli	r21,r21,8
 800cf18:	4009883a 	mov	r4,r8
 800cf1c:	342eb03a 	or	r23,r6,r16
 800cf20:	dd400115 	stw	r21,4(sp)
 800cf24:	b82ad43a 	srli	r21,r23,16
 800cf28:	da000315 	stw	r8,12(sp)
 800cf2c:	bcffffcc 	andi	r19,r23,65535
 800cf30:	a80b883a 	mov	r5,r21
 800cf34:	800c2e80 	call	800c2e8 <__udivsi3>
 800cf38:	1009883a 	mov	r4,r2
 800cf3c:	980b883a 	mov	r5,r19
 800cf40:	1023883a 	mov	r17,r2
 800cf44:	800c2f80 	call	800c2f8 <__mulsi3>
 800cf48:	da000317 	ldw	r8,12(sp)
 800cf4c:	a80b883a 	mov	r5,r21
 800cf50:	1039883a 	mov	fp,r2
 800cf54:	4009883a 	mov	r4,r8
 800cf58:	800c2f00 	call	800c2f0 <__umodsi3>
 800cf5c:	d8c00017 	ldw	r3,0(sp)
 800cf60:	1004943a 	slli	r2,r2,16
 800cf64:	1810d43a 	srli	r8,r3,16
 800cf68:	120eb03a 	or	r7,r2,r8
 800cf6c:	3f00062e 	bgeu	r7,fp,800cf88 <__divdf3+0x3cc>
 800cf70:	3dcf883a 	add	r7,r7,r23
 800cf74:	88bfffc4 	addi	r2,r17,-1
 800cf78:	3dc10a36 	bltu	r7,r23,800d3a4 <__divdf3+0x7e8>
 800cf7c:	3f01092e 	bgeu	r7,fp,800d3a4 <__divdf3+0x7e8>
 800cf80:	8c7fff84 	addi	r17,r17,-2
 800cf84:	3dcf883a 	add	r7,r7,r23
 800cf88:	3f39c83a 	sub	fp,r7,fp
 800cf8c:	e009883a 	mov	r4,fp
 800cf90:	a80b883a 	mov	r5,r21
 800cf94:	800c2e80 	call	800c2e8 <__udivsi3>
 800cf98:	1009883a 	mov	r4,r2
 800cf9c:	980b883a 	mov	r5,r19
 800cfa0:	1021883a 	mov	r16,r2
 800cfa4:	800c2f80 	call	800c2f8 <__mulsi3>
 800cfa8:	e009883a 	mov	r4,fp
 800cfac:	a80b883a 	mov	r5,r21
 800cfb0:	d8800315 	stw	r2,12(sp)
 800cfb4:	800c2f00 	call	800c2f0 <__umodsi3>
 800cfb8:	d9000017 	ldw	r4,0(sp)
 800cfbc:	1004943a 	slli	r2,r2,16
 800cfc0:	da000317 	ldw	r8,12(sp)
 800cfc4:	20ffffcc 	andi	r3,r4,65535
 800cfc8:	10ceb03a 	or	r7,r2,r3
 800cfcc:	3a00062e 	bgeu	r7,r8,800cfe8 <__divdf3+0x42c>
 800cfd0:	3dcf883a 	add	r7,r7,r23
 800cfd4:	80bfffc4 	addi	r2,r16,-1
 800cfd8:	3dc0f036 	bltu	r7,r23,800d39c <__divdf3+0x7e0>
 800cfdc:	3a00ef2e 	bgeu	r7,r8,800d39c <__divdf3+0x7e0>
 800cfe0:	843fff84 	addi	r16,r16,-2
 800cfe4:	3dcf883a 	add	r7,r7,r23
 800cfe8:	d8c00117 	ldw	r3,4(sp)
 800cfec:	8822943a 	slli	r17,r17,16
 800cff0:	3a0fc83a 	sub	r7,r7,r8
 800cff4:	1806d43a 	srli	r3,r3,16
 800cff8:	8462b03a 	or	r17,r16,r17
 800cffc:	8affffcc 	andi	r11,r17,65535
 800d000:	d8c00015 	stw	r3,0(sp)
 800d004:	d8c00117 	ldw	r3,4(sp)
 800d008:	8820d43a 	srli	r16,r17,16
 800d00c:	5809883a 	mov	r4,r11
 800d010:	1f3fffcc 	andi	fp,r3,65535
 800d014:	e00b883a 	mov	r5,fp
 800d018:	d9c00515 	stw	r7,20(sp)
 800d01c:	dac00215 	stw	r11,8(sp)
 800d020:	800c2f80 	call	800c2f8 <__mulsi3>
 800d024:	8009883a 	mov	r4,r16
 800d028:	e00b883a 	mov	r5,fp
 800d02c:	d8800415 	stw	r2,16(sp)
 800d030:	800c2f80 	call	800c2f8 <__mulsi3>
 800d034:	d9400017 	ldw	r5,0(sp)
 800d038:	8009883a 	mov	r4,r16
 800d03c:	d8800315 	stw	r2,12(sp)
 800d040:	800c2f80 	call	800c2f8 <__mulsi3>
 800d044:	dac00217 	ldw	r11,8(sp)
 800d048:	d9400017 	ldw	r5,0(sp)
 800d04c:	d8800215 	stw	r2,8(sp)
 800d050:	5809883a 	mov	r4,r11
 800d054:	800c2f80 	call	800c2f8 <__mulsi3>
 800d058:	da400417 	ldw	r9,16(sp)
 800d05c:	da800317 	ldw	r10,12(sp)
 800d060:	d9c00517 	ldw	r7,20(sp)
 800d064:	480ad43a 	srli	r5,r9,16
 800d068:	5085883a 	add	r2,r10,r2
 800d06c:	db000217 	ldw	r12,8(sp)
 800d070:	1151883a 	add	r8,r2,r5
 800d074:	4280022e 	bgeu	r8,r10,800d080 <__divdf3+0x4c4>
 800d078:	00800074 	movhi	r2,1
 800d07c:	6099883a 	add	r12,r12,r2
 800d080:	400ad43a 	srli	r5,r8,16
 800d084:	4010943a 	slli	r8,r8,16
 800d088:	4c3fffcc 	andi	r16,r9,65535
 800d08c:	6149883a 	add	r4,r12,r5
 800d090:	4411883a 	add	r8,r8,r16
 800d094:	3900a736 	bltu	r7,r4,800d334 <__divdf3+0x778>
 800d098:	3900c426 	beq	r7,r4,800d3ac <__divdf3+0x7f0>
 800d09c:	3909c83a 	sub	r4,r7,r4
 800d0a0:	b221c83a 	sub	r16,r22,r8
 800d0a4:	b42d803a 	cmpltu	r22,r22,r16
 800d0a8:	25adc83a 	sub	r22,r4,r22
 800d0ac:	b5c0c626 	beq	r22,r23,800d3c8 <__divdf3+0x80c>
 800d0b0:	b009883a 	mov	r4,r22
 800d0b4:	a80b883a 	mov	r5,r21
 800d0b8:	800c2e80 	call	800c2e8 <__udivsi3>
 800d0bc:	1009883a 	mov	r4,r2
 800d0c0:	980b883a 	mov	r5,r19
 800d0c4:	d8800315 	stw	r2,12(sp)
 800d0c8:	800c2f80 	call	800c2f8 <__mulsi3>
 800d0cc:	a80b883a 	mov	r5,r21
 800d0d0:	b009883a 	mov	r4,r22
 800d0d4:	d8800415 	stw	r2,16(sp)
 800d0d8:	800c2f00 	call	800c2f0 <__umodsi3>
 800d0dc:	1004943a 	slli	r2,r2,16
 800d0e0:	800ed43a 	srli	r7,r16,16
 800d0e4:	da400417 	ldw	r9,16(sp)
 800d0e8:	da000317 	ldw	r8,12(sp)
 800d0ec:	11cab03a 	or	r5,r2,r7
 800d0f0:	2a40062e 	bgeu	r5,r9,800d10c <__divdf3+0x550>
 800d0f4:	2dcb883a 	add	r5,r5,r23
 800d0f8:	40bfffc4 	addi	r2,r8,-1
 800d0fc:	2dc0b436 	bltu	r5,r23,800d3d0 <__divdf3+0x814>
 800d100:	2a40b32e 	bgeu	r5,r9,800d3d0 <__divdf3+0x814>
 800d104:	423fff84 	addi	r8,r8,-2
 800d108:	2dcb883a 	add	r5,r5,r23
 800d10c:	2a6dc83a 	sub	r22,r5,r9
 800d110:	b009883a 	mov	r4,r22
 800d114:	a80b883a 	mov	r5,r21
 800d118:	da000315 	stw	r8,12(sp)
 800d11c:	800c2e80 	call	800c2e8 <__udivsi3>
 800d120:	980b883a 	mov	r5,r19
 800d124:	1009883a 	mov	r4,r2
 800d128:	d8800415 	stw	r2,16(sp)
 800d12c:	800c2f80 	call	800c2f8 <__mulsi3>
 800d130:	b009883a 	mov	r4,r22
 800d134:	a80b883a 	mov	r5,r21
 800d138:	1027883a 	mov	r19,r2
 800d13c:	800c2f00 	call	800c2f0 <__umodsi3>
 800d140:	1004943a 	slli	r2,r2,16
 800d144:	843fffcc 	andi	r16,r16,65535
 800d148:	da000317 	ldw	r8,12(sp)
 800d14c:	140eb03a 	or	r7,r2,r16
 800d150:	da400417 	ldw	r9,16(sp)
 800d154:	3cc0062e 	bgeu	r7,r19,800d170 <__divdf3+0x5b4>
 800d158:	3dcf883a 	add	r7,r7,r23
 800d15c:	48bfffc4 	addi	r2,r9,-1
 800d160:	3dc09d36 	bltu	r7,r23,800d3d8 <__divdf3+0x81c>
 800d164:	3cc09c2e 	bgeu	r7,r19,800d3d8 <__divdf3+0x81c>
 800d168:	4a7fff84 	addi	r9,r9,-2
 800d16c:	3dcf883a 	add	r7,r7,r23
 800d170:	4010943a 	slli	r8,r8,16
 800d174:	3cebc83a 	sub	r21,r7,r19
 800d178:	e00b883a 	mov	r5,fp
 800d17c:	4a26b03a 	or	r19,r9,r8
 800d180:	99ffffcc 	andi	r7,r19,65535
 800d184:	9820d43a 	srli	r16,r19,16
 800d188:	3809883a 	mov	r4,r7
 800d18c:	d9c00515 	stw	r7,20(sp)
 800d190:	800c2f80 	call	800c2f8 <__mulsi3>
 800d194:	8009883a 	mov	r4,r16
 800d198:	e00b883a 	mov	r5,fp
 800d19c:	102d883a 	mov	r22,r2
 800d1a0:	800c2f80 	call	800c2f8 <__mulsi3>
 800d1a4:	d9400017 	ldw	r5,0(sp)
 800d1a8:	8009883a 	mov	r4,r16
 800d1ac:	1039883a 	mov	fp,r2
 800d1b0:	800c2f80 	call	800c2f8 <__mulsi3>
 800d1b4:	d9c00517 	ldw	r7,20(sp)
 800d1b8:	d9400017 	ldw	r5,0(sp)
 800d1bc:	1021883a 	mov	r16,r2
 800d1c0:	3809883a 	mov	r4,r7
 800d1c4:	800c2f80 	call	800c2f8 <__mulsi3>
 800d1c8:	b008d43a 	srli	r4,r22,16
 800d1cc:	e085883a 	add	r2,fp,r2
 800d1d0:	1109883a 	add	r4,r2,r4
 800d1d4:	2700022e 	bgeu	r4,fp,800d1e0 <__divdf3+0x624>
 800d1d8:	00800074 	movhi	r2,1
 800d1dc:	80a1883a 	add	r16,r16,r2
 800d1e0:	200ad43a 	srli	r5,r4,16
 800d1e4:	2008943a 	slli	r4,r4,16
 800d1e8:	b5bfffcc 	andi	r22,r22,65535
 800d1ec:	8145883a 	add	r2,r16,r5
 800d1f0:	2589883a 	add	r4,r4,r22
 800d1f4:	a8802c36 	bltu	r21,r2,800d2a8 <__divdf3+0x6ec>
 800d1f8:	a880a426 	beq	r21,r2,800d48c <__divdf3+0x8d0>
 800d1fc:	9cc00054 	ori	r19,r19,1
 800d200:	9200ffc4 	addi	r8,r18,1023
 800d204:	023f270e 	bge	zero,r8,800cea4 <__alt_data_end+0xfc00cea4>
 800d208:	988001cc 	andi	r2,r19,7
 800d20c:	10000726 	beq	r2,zero,800d22c <__divdf3+0x670>
 800d210:	990003cc 	andi	r4,r19,15
 800d214:	00800104 	movi	r2,4
 800d218:	20800426 	beq	r4,r2,800d22c <__divdf3+0x670>
 800d21c:	9885883a 	add	r2,r19,r2
 800d220:	14e7803a 	cmpltu	r19,r2,r19
 800d224:	8ce3883a 	add	r17,r17,r19
 800d228:	1027883a 	mov	r19,r2
 800d22c:	8880402c 	andhi	r2,r17,256
 800d230:	10000426 	beq	r2,zero,800d244 <__divdf3+0x688>
 800d234:	00bfc034 	movhi	r2,65280
 800d238:	10bfffc4 	addi	r2,r2,-1
 800d23c:	92010004 	addi	r8,r18,1024
 800d240:	88a2703a 	and	r17,r17,r2
 800d244:	0081ff84 	movi	r2,2046
 800d248:	123eb616 	blt	r2,r8,800cd24 <__alt_data_end+0xfc00cd24>
 800d24c:	9826d0fa 	srli	r19,r19,3
 800d250:	8804977a 	slli	r2,r17,29
 800d254:	8820927a 	slli	r16,r17,9
 800d258:	4201ffcc 	andi	r8,r8,2047
 800d25c:	14e6b03a 	or	r19,r2,r19
 800d260:	800ad33a 	srli	r5,r16,12
 800d264:	a180004c 	andi	r6,r20,1
 800d268:	003eb206 	br	800cd34 <__alt_data_end+0xfc00cd34>
 800d26c:	008000c4 	movi	r2,3
 800d270:	4080ac26 	beq	r8,r2,800d524 <__divdf3+0x968>
 800d274:	00800044 	movi	r2,1
 800d278:	4080591e 	bne	r8,r2,800d3e0 <__divdf3+0x824>
 800d27c:	e00d883a 	mov	r6,fp
 800d280:	0011883a 	mov	r8,zero
 800d284:	000b883a 	mov	r5,zero
 800d288:	0027883a 	mov	r19,zero
 800d28c:	003ea906 	br	800cd34 <__alt_data_end+0xfc00cd34>
 800d290:	00800434 	movhi	r2,16
 800d294:	89400234 	orhi	r5,r17,8
 800d298:	10bfffc4 	addi	r2,r2,-1
 800d29c:	b00d883a 	mov	r6,r22
 800d2a0:	288a703a 	and	r5,r5,r2
 800d2a4:	003efd06 	br	800ce9c <__alt_data_end+0xfc00ce9c>
 800d2a8:	adcf883a 	add	r7,r21,r23
 800d2ac:	997fffc4 	addi	r5,r19,-1
 800d2b0:	3dc0412e 	bgeu	r7,r23,800d3b8 <__divdf3+0x7fc>
 800d2b4:	2827883a 	mov	r19,r5
 800d2b8:	38bfd01e 	bne	r7,r2,800d1fc <__alt_data_end+0xfc00d1fc>
 800d2bc:	d8c00117 	ldw	r3,4(sp)
 800d2c0:	193fce1e 	bne	r3,r4,800d1fc <__alt_data_end+0xfc00d1fc>
 800d2c4:	003fce06 	br	800d200 <__alt_data_end+0xfc00d200>
 800d2c8:	d9800215 	stw	r6,8(sp)
 800d2cc:	d9c00515 	stw	r7,20(sp)
 800d2d0:	800eab80 	call	800eab8 <__clzsi2>
 800d2d4:	10c00804 	addi	r3,r2,32
 800d2d8:	010009c4 	movi	r4,39
 800d2dc:	d9800217 	ldw	r6,8(sp)
 800d2e0:	d9c00517 	ldw	r7,20(sp)
 800d2e4:	20feb20e 	bge	r4,r3,800cdb0 <__alt_data_end+0xfc00cdb0>
 800d2e8:	117ffe04 	addi	r5,r2,-8
 800d2ec:	a162983a 	sll	r17,r20,r5
 800d2f0:	0027883a 	mov	r19,zero
 800d2f4:	003eb506 	br	800cdcc <__alt_data_end+0xfc00cdcc>
 800d2f8:	3009883a 	mov	r4,r6
 800d2fc:	d9800215 	stw	r6,8(sp)
 800d300:	da000315 	stw	r8,12(sp)
 800d304:	da400415 	stw	r9,16(sp)
 800d308:	800eab80 	call	800eab8 <__clzsi2>
 800d30c:	10c00804 	addi	r3,r2,32
 800d310:	010009c4 	movi	r4,39
 800d314:	d9800217 	ldw	r6,8(sp)
 800d318:	da000317 	ldw	r8,12(sp)
 800d31c:	da400417 	ldw	r9,16(sp)
 800d320:	20fec10e 	bge	r4,r3,800ce28 <__alt_data_end+0xfc00ce28>
 800d324:	10bffe04 	addi	r2,r2,-8
 800d328:	a8a0983a 	sll	r16,r21,r2
 800d32c:	002b883a 	mov	r21,zero
 800d330:	003ec406 	br	800ce44 <__alt_data_end+0xfc00ce44>
 800d334:	d8c00117 	ldw	r3,4(sp)
 800d338:	b0ed883a 	add	r22,r22,r3
 800d33c:	b0c5803a 	cmpltu	r2,r22,r3
 800d340:	15c5883a 	add	r2,r2,r23
 800d344:	11cf883a 	add	r7,r2,r7
 800d348:	88bfffc4 	addi	r2,r17,-1
 800d34c:	b9c00d2e 	bgeu	r23,r7,800d384 <__divdf3+0x7c8>
 800d350:	39003f36 	bltu	r7,r4,800d450 <__divdf3+0x894>
 800d354:	21c06a26 	beq	r4,r7,800d500 <__divdf3+0x944>
 800d358:	3909c83a 	sub	r4,r7,r4
 800d35c:	1023883a 	mov	r17,r2
 800d360:	003f4f06 	br	800d0a0 <__alt_data_end+0xfc00d0a0>
 800d364:	9d7ee536 	bltu	r19,r21,800cefc <__alt_data_end+0xfc00cefc>
 800d368:	982ed07a 	srli	r23,r19,1
 800d36c:	880497fa 	slli	r2,r17,31
 800d370:	8810d07a 	srli	r8,r17,1
 800d374:	982c97fa 	slli	r22,r19,31
 800d378:	b884b03a 	or	r2,r23,r2
 800d37c:	d8800015 	stw	r2,0(sp)
 800d380:	003ee206 	br	800cf0c <__alt_data_end+0xfc00cf0c>
 800d384:	3dfff41e 	bne	r7,r23,800d358 <__alt_data_end+0xfc00d358>
 800d388:	d8c00117 	ldw	r3,4(sp)
 800d38c:	b0fff02e 	bgeu	r22,r3,800d350 <__alt_data_end+0xfc00d350>
 800d390:	b909c83a 	sub	r4,r23,r4
 800d394:	1023883a 	mov	r17,r2
 800d398:	003f4106 	br	800d0a0 <__alt_data_end+0xfc00d0a0>
 800d39c:	1021883a 	mov	r16,r2
 800d3a0:	003f1106 	br	800cfe8 <__alt_data_end+0xfc00cfe8>
 800d3a4:	1023883a 	mov	r17,r2
 800d3a8:	003ef706 	br	800cf88 <__alt_data_end+0xfc00cf88>
 800d3ac:	b23fe136 	bltu	r22,r8,800d334 <__alt_data_end+0xfc00d334>
 800d3b0:	0009883a 	mov	r4,zero
 800d3b4:	003f3a06 	br	800d0a0 <__alt_data_end+0xfc00d0a0>
 800d3b8:	38802c36 	bltu	r7,r2,800d46c <__divdf3+0x8b0>
 800d3bc:	11c05326 	beq	r2,r7,800d50c <__divdf3+0x950>
 800d3c0:	2827883a 	mov	r19,r5
 800d3c4:	003f8d06 	br	800d1fc <__alt_data_end+0xfc00d1fc>
 800d3c8:	04ffffc4 	movi	r19,-1
 800d3cc:	003f8c06 	br	800d200 <__alt_data_end+0xfc00d200>
 800d3d0:	1011883a 	mov	r8,r2
 800d3d4:	003f4d06 	br	800d10c <__alt_data_end+0xfc00d10c>
 800d3d8:	1013883a 	mov	r9,r2
 800d3dc:	003f6406 	br	800d170 <__alt_data_end+0xfc00d170>
 800d3e0:	e029883a 	mov	r20,fp
 800d3e4:	003f8606 	br	800d200 <__alt_data_end+0xfc00d200>
 800d3e8:	008007c4 	movi	r2,31
 800d3ec:	14002a16 	blt	r2,r16,800d498 <__divdf3+0x8dc>
 800d3f0:	91410784 	addi	r5,r18,1054
 800d3f4:	9c0cd83a 	srl	r6,r19,r16
 800d3f8:	8948983a 	sll	r4,r17,r5
 800d3fc:	9944983a 	sll	r2,r19,r5
 800d400:	8c20d83a 	srl	r16,r17,r16
 800d404:	3108b03a 	or	r4,r6,r4
 800d408:	1004c03a 	cmpne	r2,r2,zero
 800d40c:	2084b03a 	or	r2,r4,r2
 800d410:	110001cc 	andi	r4,r2,7
 800d414:	20000726 	beq	r4,zero,800d434 <__divdf3+0x878>
 800d418:	114003cc 	andi	r5,r2,15
 800d41c:	01000104 	movi	r4,4
 800d420:	29000426 	beq	r5,r4,800d434 <__divdf3+0x878>
 800d424:	11000104 	addi	r4,r2,4
 800d428:	2085803a 	cmpltu	r2,r4,r2
 800d42c:	80a1883a 	add	r16,r16,r2
 800d430:	2005883a 	mov	r2,r4
 800d434:	8100202c 	andhi	r4,r16,128
 800d438:	20002d26 	beq	r4,zero,800d4f0 <__divdf3+0x934>
 800d43c:	a180004c 	andi	r6,r20,1
 800d440:	02000044 	movi	r8,1
 800d444:	000b883a 	mov	r5,zero
 800d448:	0027883a 	mov	r19,zero
 800d44c:	003e3906 	br	800cd34 <__alt_data_end+0xfc00cd34>
 800d450:	d8c00117 	ldw	r3,4(sp)
 800d454:	8c7fff84 	addi	r17,r17,-2
 800d458:	b0ed883a 	add	r22,r22,r3
 800d45c:	b0c5803a 	cmpltu	r2,r22,r3
 800d460:	15c5883a 	add	r2,r2,r23
 800d464:	11cf883a 	add	r7,r2,r7
 800d468:	003f0c06 	br	800d09c <__alt_data_end+0xfc00d09c>
 800d46c:	d8c00117 	ldw	r3,4(sp)
 800d470:	997fff84 	addi	r5,r19,-2
 800d474:	18d1883a 	add	r8,r3,r3
 800d478:	40c7803a 	cmpltu	r3,r8,r3
 800d47c:	1dcd883a 	add	r6,r3,r23
 800d480:	398f883a 	add	r7,r7,r6
 800d484:	da000115 	stw	r8,4(sp)
 800d488:	003f8a06 	br	800d2b4 <__alt_data_end+0xfc00d2b4>
 800d48c:	203f861e 	bne	r4,zero,800d2a8 <__alt_data_end+0xfc00d2a8>
 800d490:	d8000115 	stw	zero,4(sp)
 800d494:	003f8906 	br	800d2bc <__alt_data_end+0xfc00d2bc>
 800d498:	00bef884 	movi	r2,-1054
 800d49c:	1485c83a 	sub	r2,r2,r18
 800d4a0:	01000804 	movi	r4,32
 800d4a4:	8884d83a 	srl	r2,r17,r2
 800d4a8:	81001c26 	beq	r16,r4,800d51c <__divdf3+0x960>
 800d4ac:	91010f84 	addi	r4,r18,1086
 800d4b0:	8908983a 	sll	r4,r17,r4
 800d4b4:	24c8b03a 	or	r4,r4,r19
 800d4b8:	2008c03a 	cmpne	r4,r4,zero
 800d4bc:	2084b03a 	or	r2,r4,r2
 800d4c0:	140001cc 	andi	r16,r2,7
 800d4c4:	8000061e 	bne	r16,zero,800d4e0 <__divdf3+0x924>
 800d4c8:	000b883a 	mov	r5,zero
 800d4cc:	1004d0fa 	srli	r2,r2,3
 800d4d0:	a180004c 	andi	r6,r20,1
 800d4d4:	0011883a 	mov	r8,zero
 800d4d8:	1426b03a 	or	r19,r2,r16
 800d4dc:	003e1506 	br	800cd34 <__alt_data_end+0xfc00cd34>
 800d4e0:	114003cc 	andi	r5,r2,15
 800d4e4:	01000104 	movi	r4,4
 800d4e8:	0021883a 	mov	r16,zero
 800d4ec:	293fcd1e 	bne	r5,r4,800d424 <__alt_data_end+0xfc00d424>
 800d4f0:	800a927a 	slli	r5,r16,9
 800d4f4:	8020977a 	slli	r16,r16,29
 800d4f8:	280ad33a 	srli	r5,r5,12
 800d4fc:	003ff306 	br	800d4cc <__alt_data_end+0xfc00d4cc>
 800d500:	b23fd336 	bltu	r22,r8,800d450 <__alt_data_end+0xfc00d450>
 800d504:	1023883a 	mov	r17,r2
 800d508:	003fa906 	br	800d3b0 <__alt_data_end+0xfc00d3b0>
 800d50c:	d8c00117 	ldw	r3,4(sp)
 800d510:	193fd636 	bltu	r3,r4,800d46c <__alt_data_end+0xfc00d46c>
 800d514:	2827883a 	mov	r19,r5
 800d518:	003f6806 	br	800d2bc <__alt_data_end+0xfc00d2bc>
 800d51c:	0009883a 	mov	r4,zero
 800d520:	003fe406 	br	800d4b4 <__alt_data_end+0xfc00d4b4>
 800d524:	00800434 	movhi	r2,16
 800d528:	89400234 	orhi	r5,r17,8
 800d52c:	10bfffc4 	addi	r2,r2,-1
 800d530:	e00d883a 	mov	r6,fp
 800d534:	288a703a 	and	r5,r5,r2
 800d538:	003e5806 	br	800ce9c <__alt_data_end+0xfc00ce9c>

0800d53c <__eqdf2>:
 800d53c:	2804d53a 	srli	r2,r5,20
 800d540:	3806d53a 	srli	r3,r7,20
 800d544:	02000434 	movhi	r8,16
 800d548:	423fffc4 	addi	r8,r8,-1
 800d54c:	1081ffcc 	andi	r2,r2,2047
 800d550:	0241ffc4 	movi	r9,2047
 800d554:	2a14703a 	and	r10,r5,r8
 800d558:	18c1ffcc 	andi	r3,r3,2047
 800d55c:	3a10703a 	and	r8,r7,r8
 800d560:	280ad7fa 	srli	r5,r5,31
 800d564:	380ed7fa 	srli	r7,r7,31
 800d568:	12400f26 	beq	r2,r9,800d5a8 <__eqdf2+0x6c>
 800d56c:	0241ffc4 	movi	r9,2047
 800d570:	1a400326 	beq	r3,r9,800d580 <__eqdf2+0x44>
 800d574:	10c00526 	beq	r2,r3,800d58c <__eqdf2+0x50>
 800d578:	00800044 	movi	r2,1
 800d57c:	f800283a 	ret
 800d580:	4192b03a 	or	r9,r8,r6
 800d584:	483ffc1e 	bne	r9,zero,800d578 <__alt_data_end+0xfc00d578>
 800d588:	10fffb1e 	bne	r2,r3,800d578 <__alt_data_end+0xfc00d578>
 800d58c:	523ffa1e 	bne	r10,r8,800d578 <__alt_data_end+0xfc00d578>
 800d590:	21bff91e 	bne	r4,r6,800d578 <__alt_data_end+0xfc00d578>
 800d594:	29c00826 	beq	r5,r7,800d5b8 <__eqdf2+0x7c>
 800d598:	103ff71e 	bne	r2,zero,800d578 <__alt_data_end+0xfc00d578>
 800d59c:	5104b03a 	or	r2,r10,r4
 800d5a0:	1004c03a 	cmpne	r2,r2,zero
 800d5a4:	f800283a 	ret
 800d5a8:	5112b03a 	or	r9,r10,r4
 800d5ac:	483fef26 	beq	r9,zero,800d56c <__alt_data_end+0xfc00d56c>
 800d5b0:	00800044 	movi	r2,1
 800d5b4:	f800283a 	ret
 800d5b8:	0005883a 	mov	r2,zero
 800d5bc:	f800283a 	ret

0800d5c0 <__gedf2>:
 800d5c0:	2804d53a 	srli	r2,r5,20
 800d5c4:	3806d53a 	srli	r3,r7,20
 800d5c8:	02000434 	movhi	r8,16
 800d5cc:	423fffc4 	addi	r8,r8,-1
 800d5d0:	0241ffc4 	movi	r9,2047
 800d5d4:	1081ffcc 	andi	r2,r2,2047
 800d5d8:	2a14703a 	and	r10,r5,r8
 800d5dc:	1a46703a 	and	r3,r3,r9
 800d5e0:	3a10703a 	and	r8,r7,r8
 800d5e4:	280ad7fa 	srli	r5,r5,31
 800d5e8:	380ed7fa 	srli	r7,r7,31
 800d5ec:	12400b26 	beq	r2,r9,800d61c <__gedf2+0x5c>
 800d5f0:	1a401626 	beq	r3,r9,800d64c <__gedf2+0x8c>
 800d5f4:	10000c1e 	bne	r2,zero,800d628 <__gedf2+0x68>
 800d5f8:	5112b03a 	or	r9,r10,r4
 800d5fc:	4813003a 	cmpeq	r9,r9,zero
 800d600:	4817883a 	mov	r11,r9
 800d604:	18000c1e 	bne	r3,zero,800d638 <__gedf2+0x78>
 800d608:	4198b03a 	or	r12,r8,r6
 800d60c:	60000a1e 	bne	r12,zero,800d638 <__gedf2+0x78>
 800d610:	48001326 	beq	r9,zero,800d660 <__gedf2+0xa0>
 800d614:	0005883a 	mov	r2,zero
 800d618:	f800283a 	ret
 800d61c:	5112b03a 	or	r9,r10,r4
 800d620:	4800191e 	bne	r9,zero,800d688 <__gedf2+0xc8>
 800d624:	18800926 	beq	r3,r2,800d64c <__gedf2+0x8c>
 800d628:	18000b1e 	bne	r3,zero,800d658 <__gedf2+0x98>
 800d62c:	4192b03a 	or	r9,r8,r6
 800d630:	0017883a 	mov	r11,zero
 800d634:	48000a26 	beq	r9,zero,800d660 <__gedf2+0xa0>
 800d638:	39c03fcc 	andi	r7,r7,255
 800d63c:	58000726 	beq	r11,zero,800d65c <__gedf2+0x9c>
 800d640:	3800081e 	bne	r7,zero,800d664 <__gedf2+0xa4>
 800d644:	00bfffc4 	movi	r2,-1
 800d648:	f800283a 	ret
 800d64c:	4192b03a 	or	r9,r8,r6
 800d650:	48000d1e 	bne	r9,zero,800d688 <__gedf2+0xc8>
 800d654:	103fe826 	beq	r2,zero,800d5f8 <__alt_data_end+0xfc00d5f8>
 800d658:	39c03fcc 	andi	r7,r7,255
 800d65c:	29c00326 	beq	r5,r7,800d66c <__gedf2+0xac>
 800d660:	283ff81e 	bne	r5,zero,800d644 <__alt_data_end+0xfc00d644>
 800d664:	00800044 	movi	r2,1
 800d668:	f800283a 	ret
 800d66c:	18bffc16 	blt	r3,r2,800d660 <__alt_data_end+0xfc00d660>
 800d670:	10c00316 	blt	r2,r3,800d680 <__gedf2+0xc0>
 800d674:	42bffa36 	bltu	r8,r10,800d660 <__alt_data_end+0xfc00d660>
 800d678:	52000526 	beq	r10,r8,800d690 <__gedf2+0xd0>
 800d67c:	523fe52e 	bgeu	r10,r8,800d614 <__alt_data_end+0xfc00d614>
 800d680:	283ff026 	beq	r5,zero,800d644 <__alt_data_end+0xfc00d644>
 800d684:	003ff706 	br	800d664 <__alt_data_end+0xfc00d664>
 800d688:	00bfff84 	movi	r2,-2
 800d68c:	f800283a 	ret
 800d690:	313ff336 	bltu	r6,r4,800d660 <__alt_data_end+0xfc00d660>
 800d694:	21bfdf2e 	bgeu	r4,r6,800d614 <__alt_data_end+0xfc00d614>
 800d698:	283fea26 	beq	r5,zero,800d644 <__alt_data_end+0xfc00d644>
 800d69c:	003ff106 	br	800d664 <__alt_data_end+0xfc00d664>

0800d6a0 <__ledf2>:
 800d6a0:	2804d53a 	srli	r2,r5,20
 800d6a4:	3810d53a 	srli	r8,r7,20
 800d6a8:	00c00434 	movhi	r3,16
 800d6ac:	18ffffc4 	addi	r3,r3,-1
 800d6b0:	0241ffc4 	movi	r9,2047
 800d6b4:	1081ffcc 	andi	r2,r2,2047
 800d6b8:	28d4703a 	and	r10,r5,r3
 800d6bc:	4250703a 	and	r8,r8,r9
 800d6c0:	38c6703a 	and	r3,r7,r3
 800d6c4:	280ad7fa 	srli	r5,r5,31
 800d6c8:	380ed7fa 	srli	r7,r7,31
 800d6cc:	12400b26 	beq	r2,r9,800d6fc <__ledf2+0x5c>
 800d6d0:	42401926 	beq	r8,r9,800d738 <__ledf2+0x98>
 800d6d4:	10000c1e 	bne	r2,zero,800d708 <__ledf2+0x68>
 800d6d8:	5112b03a 	or	r9,r10,r4
 800d6dc:	4813003a 	cmpeq	r9,r9,zero
 800d6e0:	4817883a 	mov	r11,r9
 800d6e4:	40000f26 	beq	r8,zero,800d724 <__ledf2+0x84>
 800d6e8:	39c03fcc 	andi	r7,r7,255
 800d6ec:	58001826 	beq	r11,zero,800d750 <__ledf2+0xb0>
 800d6f0:	38000a1e 	bne	r7,zero,800d71c <__ledf2+0x7c>
 800d6f4:	00bfffc4 	movi	r2,-1
 800d6f8:	f800283a 	ret
 800d6fc:	5112b03a 	or	r9,r10,r4
 800d700:	48000f1e 	bne	r9,zero,800d740 <__ledf2+0xa0>
 800d704:	40800c26 	beq	r8,r2,800d738 <__ledf2+0x98>
 800d708:	4000101e 	bne	r8,zero,800d74c <__ledf2+0xac>
 800d70c:	1992b03a 	or	r9,r3,r6
 800d710:	0017883a 	mov	r11,zero
 800d714:	483ff41e 	bne	r9,zero,800d6e8 <__alt_data_end+0xfc00d6e8>
 800d718:	283ff61e 	bne	r5,zero,800d6f4 <__alt_data_end+0xfc00d6f4>
 800d71c:	00800044 	movi	r2,1
 800d720:	f800283a 	ret
 800d724:	1998b03a 	or	r12,r3,r6
 800d728:	603fef1e 	bne	r12,zero,800d6e8 <__alt_data_end+0xfc00d6e8>
 800d72c:	483ffa26 	beq	r9,zero,800d718 <__alt_data_end+0xfc00d718>
 800d730:	0005883a 	mov	r2,zero
 800d734:	f800283a 	ret
 800d738:	1992b03a 	or	r9,r3,r6
 800d73c:	48000226 	beq	r9,zero,800d748 <__ledf2+0xa8>
 800d740:	00800084 	movi	r2,2
 800d744:	f800283a 	ret
 800d748:	103fe326 	beq	r2,zero,800d6d8 <__alt_data_end+0xfc00d6d8>
 800d74c:	39c03fcc 	andi	r7,r7,255
 800d750:	29fff11e 	bne	r5,r7,800d718 <__alt_data_end+0xfc00d718>
 800d754:	40bff016 	blt	r8,r2,800d718 <__alt_data_end+0xfc00d718>
 800d758:	12000316 	blt	r2,r8,800d768 <__ledf2+0xc8>
 800d75c:	1abfee36 	bltu	r3,r10,800d718 <__alt_data_end+0xfc00d718>
 800d760:	50c00326 	beq	r10,r3,800d770 <__ledf2+0xd0>
 800d764:	50fff22e 	bgeu	r10,r3,800d730 <__alt_data_end+0xfc00d730>
 800d768:	283fe226 	beq	r5,zero,800d6f4 <__alt_data_end+0xfc00d6f4>
 800d76c:	003feb06 	br	800d71c <__alt_data_end+0xfc00d71c>
 800d770:	313fe936 	bltu	r6,r4,800d718 <__alt_data_end+0xfc00d718>
 800d774:	21bfee2e 	bgeu	r4,r6,800d730 <__alt_data_end+0xfc00d730>
 800d778:	283fde26 	beq	r5,zero,800d6f4 <__alt_data_end+0xfc00d6f4>
 800d77c:	003fe706 	br	800d71c <__alt_data_end+0xfc00d71c>

0800d780 <__muldf3>:
 800d780:	deffee04 	addi	sp,sp,-72
 800d784:	dd000c15 	stw	r20,48(sp)
 800d788:	2828d53a 	srli	r20,r5,20
 800d78c:	dd400d15 	stw	r21,52(sp)
 800d790:	282ad7fa 	srli	r21,r5,31
 800d794:	dc000815 	stw	r16,32(sp)
 800d798:	04000434 	movhi	r16,16
 800d79c:	ddc00f15 	stw	r23,60(sp)
 800d7a0:	dcc00b15 	stw	r19,44(sp)
 800d7a4:	dc800a15 	stw	r18,40(sp)
 800d7a8:	843fffc4 	addi	r16,r16,-1
 800d7ac:	dfc01115 	stw	ra,68(sp)
 800d7b0:	df001015 	stw	fp,64(sp)
 800d7b4:	dd800e15 	stw	r22,56(sp)
 800d7b8:	dc400915 	stw	r17,36(sp)
 800d7bc:	a501ffcc 	andi	r20,r20,2047
 800d7c0:	2025883a 	mov	r18,r4
 800d7c4:	202f883a 	mov	r23,r4
 800d7c8:	2c20703a 	and	r16,r5,r16
 800d7cc:	a827883a 	mov	r19,r21
 800d7d0:	aa403fcc 	andi	r9,r21,255
 800d7d4:	a0005926 	beq	r20,zero,800d93c <__muldf3+0x1bc>
 800d7d8:	0081ffc4 	movi	r2,2047
 800d7dc:	a0803426 	beq	r20,r2,800d8b0 <__muldf3+0x130>
 800d7e0:	84000434 	orhi	r16,r16,16
 800d7e4:	2004d77a 	srli	r2,r4,29
 800d7e8:	802090fa 	slli	r16,r16,3
 800d7ec:	202e90fa 	slli	r23,r4,3
 800d7f0:	a53f0044 	addi	r20,r20,-1023
 800d7f4:	80a0b03a 	or	r16,r16,r2
 800d7f8:	000b883a 	mov	r5,zero
 800d7fc:	0039883a 	mov	fp,zero
 800d800:	3806d53a 	srli	r3,r7,20
 800d804:	382cd7fa 	srli	r22,r7,31
 800d808:	00800434 	movhi	r2,16
 800d80c:	10bfffc4 	addi	r2,r2,-1
 800d810:	18c1ffcc 	andi	r3,r3,2047
 800d814:	3025883a 	mov	r18,r6
 800d818:	38a2703a 	and	r17,r7,r2
 800d81c:	b2803fcc 	andi	r10,r22,255
 800d820:	18006426 	beq	r3,zero,800d9b4 <__muldf3+0x234>
 800d824:	0081ffc4 	movi	r2,2047
 800d828:	18805c26 	beq	r3,r2,800d99c <__muldf3+0x21c>
 800d82c:	8c400434 	orhi	r17,r17,16
 800d830:	3004d77a 	srli	r2,r6,29
 800d834:	882290fa 	slli	r17,r17,3
 800d838:	302490fa 	slli	r18,r6,3
 800d83c:	18ff0044 	addi	r3,r3,-1023
 800d840:	88a2b03a 	or	r17,r17,r2
 800d844:	000f883a 	mov	r7,zero
 800d848:	394ab03a 	or	r5,r7,r5
 800d84c:	280a90ba 	slli	r5,r5,2
 800d850:	00820074 	movhi	r2,2049
 800d854:	10b61c04 	addi	r2,r2,-10128
 800d858:	288b883a 	add	r5,r5,r2
 800d85c:	28800017 	ldw	r2,0(r5)
 800d860:	a0c7883a 	add	r3,r20,r3
 800d864:	b54cf03a 	xor	r6,r22,r21
 800d868:	1a000044 	addi	r8,r3,1
 800d86c:	1000683a 	jmp	r2
 800d870:	0800dab4 	orhi	zero,at,874
 800d874:	0800daa0 	cmpeqi	zero,at,874
 800d878:	0800daa0 	cmpeqi	zero,at,874
 800d87c:	0800da8c 	andi	zero,at,874
 800d880:	0800d8cc 	andi	zero,at,867
 800d884:	0800d8cc 	andi	zero,at,867
 800d888:	0800da74 	orhi	zero,at,873
 800d88c:	0800da8c 	andi	zero,at,874
 800d890:	0800d8cc 	andi	zero,at,867
 800d894:	0800da74 	orhi	zero,at,873
 800d898:	0800d8cc 	andi	zero,at,867
 800d89c:	0800da8c 	andi	zero,at,874
 800d8a0:	0800d8d0 	cmplti	zero,at,867
 800d8a4:	0800d8d0 	cmplti	zero,at,867
 800d8a8:	0800d8d0 	cmplti	zero,at,867
 800d8ac:	0800ddf0 	cmpltui	zero,at,887
 800d8b0:	8104b03a 	or	r2,r16,r4
 800d8b4:	10006c1e 	bne	r2,zero,800da68 <__muldf3+0x2e8>
 800d8b8:	01400204 	movi	r5,8
 800d8bc:	0021883a 	mov	r16,zero
 800d8c0:	002f883a 	mov	r23,zero
 800d8c4:	07000084 	movi	fp,2
 800d8c8:	003fcd06 	br	800d800 <__alt_data_end+0xfc00d800>
 800d8cc:	3013883a 	mov	r9,r6
 800d8d0:	00800084 	movi	r2,2
 800d8d4:	e080501e 	bne	fp,r2,800da18 <__muldf3+0x298>
 800d8d8:	4cc0004c 	andi	r19,r9,1
 800d8dc:	0101ffc4 	movi	r4,2047
 800d8e0:	0021883a 	mov	r16,zero
 800d8e4:	002f883a 	mov	r23,zero
 800d8e8:	2008953a 	slli	r4,r4,20
 800d8ec:	98c03fcc 	andi	r3,r19,255
 800d8f0:	04400434 	movhi	r17,16
 800d8f4:	8c7fffc4 	addi	r17,r17,-1
 800d8f8:	180697fa 	slli	r3,r3,31
 800d8fc:	8460703a 	and	r16,r16,r17
 800d900:	8120b03a 	or	r16,r16,r4
 800d904:	80c6b03a 	or	r3,r16,r3
 800d908:	b805883a 	mov	r2,r23
 800d90c:	dfc01117 	ldw	ra,68(sp)
 800d910:	df001017 	ldw	fp,64(sp)
 800d914:	ddc00f17 	ldw	r23,60(sp)
 800d918:	dd800e17 	ldw	r22,56(sp)
 800d91c:	dd400d17 	ldw	r21,52(sp)
 800d920:	dd000c17 	ldw	r20,48(sp)
 800d924:	dcc00b17 	ldw	r19,44(sp)
 800d928:	dc800a17 	ldw	r18,40(sp)
 800d92c:	dc400917 	ldw	r17,36(sp)
 800d930:	dc000817 	ldw	r16,32(sp)
 800d934:	dec01204 	addi	sp,sp,72
 800d938:	f800283a 	ret
 800d93c:	8104b03a 	or	r2,r16,r4
 800d940:	10004426 	beq	r2,zero,800da54 <__muldf3+0x2d4>
 800d944:	80014b26 	beq	r16,zero,800de74 <__muldf3+0x6f4>
 800d948:	8009883a 	mov	r4,r16
 800d94c:	d9800715 	stw	r6,28(sp)
 800d950:	d9c00215 	stw	r7,8(sp)
 800d954:	da400415 	stw	r9,16(sp)
 800d958:	800eab80 	call	800eab8 <__clzsi2>
 800d95c:	d9800717 	ldw	r6,28(sp)
 800d960:	d9c00217 	ldw	r7,8(sp)
 800d964:	da400417 	ldw	r9,16(sp)
 800d968:	1007883a 	mov	r3,r2
 800d96c:	01000a04 	movi	r4,40
 800d970:	1dfffe04 	addi	r23,r3,-8
 800d974:	20c9c83a 	sub	r4,r4,r3
 800d978:	85e0983a 	sll	r16,r16,r23
 800d97c:	9108d83a 	srl	r4,r18,r4
 800d980:	95ee983a 	sll	r23,r18,r23
 800d984:	2420b03a 	or	r16,r4,r16
 800d988:	053f0344 	movi	r20,-1011
 800d98c:	a0e9c83a 	sub	r20,r20,r3
 800d990:	000b883a 	mov	r5,zero
 800d994:	0039883a 	mov	fp,zero
 800d998:	003f9906 	br	800d800 <__alt_data_end+0xfc00d800>
 800d99c:	8984b03a 	or	r2,r17,r6
 800d9a0:	10002a1e 	bne	r2,zero,800da4c <__muldf3+0x2cc>
 800d9a4:	0023883a 	mov	r17,zero
 800d9a8:	0025883a 	mov	r18,zero
 800d9ac:	01c00084 	movi	r7,2
 800d9b0:	003fa506 	br	800d848 <__alt_data_end+0xfc00d848>
 800d9b4:	8984b03a 	or	r2,r17,r6
 800d9b8:	10002026 	beq	r2,zero,800da3c <__muldf3+0x2bc>
 800d9bc:	88011c26 	beq	r17,zero,800de30 <__muldf3+0x6b0>
 800d9c0:	8809883a 	mov	r4,r17
 800d9c4:	d9400215 	stw	r5,8(sp)
 800d9c8:	d9800715 	stw	r6,28(sp)
 800d9cc:	da400415 	stw	r9,16(sp)
 800d9d0:	da800315 	stw	r10,12(sp)
 800d9d4:	800eab80 	call	800eab8 <__clzsi2>
 800d9d8:	d9400217 	ldw	r5,8(sp)
 800d9dc:	d9800717 	ldw	r6,28(sp)
 800d9e0:	da400417 	ldw	r9,16(sp)
 800d9e4:	da800317 	ldw	r10,12(sp)
 800d9e8:	1007883a 	mov	r3,r2
 800d9ec:	01000a04 	movi	r4,40
 800d9f0:	1cbffe04 	addi	r18,r3,-8
 800d9f4:	20c9c83a 	sub	r4,r4,r3
 800d9f8:	8ca2983a 	sll	r17,r17,r18
 800d9fc:	3108d83a 	srl	r4,r6,r4
 800da00:	34a4983a 	sll	r18,r6,r18
 800da04:	2462b03a 	or	r17,r4,r17
 800da08:	00bf0344 	movi	r2,-1011
 800da0c:	10c7c83a 	sub	r3,r2,r3
 800da10:	000f883a 	mov	r7,zero
 800da14:	003f8c06 	br	800d848 <__alt_data_end+0xfc00d848>
 800da18:	008000c4 	movi	r2,3
 800da1c:	e0816d26 	beq	fp,r2,800dfd4 <__muldf3+0x854>
 800da20:	00800044 	movi	r2,1
 800da24:	e081321e 	bne	fp,r2,800def0 <__muldf3+0x770>
 800da28:	48a6703a 	and	r19,r9,r2
 800da2c:	0009883a 	mov	r4,zero
 800da30:	0021883a 	mov	r16,zero
 800da34:	002f883a 	mov	r23,zero
 800da38:	003fab06 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800da3c:	0023883a 	mov	r17,zero
 800da40:	0025883a 	mov	r18,zero
 800da44:	01c00044 	movi	r7,1
 800da48:	003f7f06 	br	800d848 <__alt_data_end+0xfc00d848>
 800da4c:	01c000c4 	movi	r7,3
 800da50:	003f7d06 	br	800d848 <__alt_data_end+0xfc00d848>
 800da54:	01400104 	movi	r5,4
 800da58:	0021883a 	mov	r16,zero
 800da5c:	002f883a 	mov	r23,zero
 800da60:	07000044 	movi	fp,1
 800da64:	003f6606 	br	800d800 <__alt_data_end+0xfc00d800>
 800da68:	01400304 	movi	r5,12
 800da6c:	070000c4 	movi	fp,3
 800da70:	003f6306 	br	800d800 <__alt_data_end+0xfc00d800>
 800da74:	04000434 	movhi	r16,16
 800da78:	0027883a 	mov	r19,zero
 800da7c:	843fffc4 	addi	r16,r16,-1
 800da80:	05ffffc4 	movi	r23,-1
 800da84:	0101ffc4 	movi	r4,2047
 800da88:	003f9706 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800da8c:	8821883a 	mov	r16,r17
 800da90:	902f883a 	mov	r23,r18
 800da94:	5013883a 	mov	r9,r10
 800da98:	3839883a 	mov	fp,r7
 800da9c:	003f8c06 	br	800d8d0 <__alt_data_end+0xfc00d8d0>
 800daa0:	8821883a 	mov	r16,r17
 800daa4:	902f883a 	mov	r23,r18
 800daa8:	3013883a 	mov	r9,r6
 800daac:	3839883a 	mov	fp,r7
 800dab0:	003f8706 	br	800d8d0 <__alt_data_end+0xfc00d8d0>
 800dab4:	b82ad43a 	srli	r21,r23,16
 800dab8:	9038d43a 	srli	fp,r18,16
 800dabc:	bdffffcc 	andi	r23,r23,65535
 800dac0:	94bfffcc 	andi	r18,r18,65535
 800dac4:	9009883a 	mov	r4,r18
 800dac8:	b80b883a 	mov	r5,r23
 800dacc:	d8c00515 	stw	r3,20(sp)
 800dad0:	d9800715 	stw	r6,28(sp)
 800dad4:	da000615 	stw	r8,24(sp)
 800dad8:	800c2f80 	call	800c2f8 <__mulsi3>
 800dadc:	9009883a 	mov	r4,r18
 800dae0:	a80b883a 	mov	r5,r21
 800dae4:	1029883a 	mov	r20,r2
 800dae8:	800c2f80 	call	800c2f8 <__mulsi3>
 800daec:	e009883a 	mov	r4,fp
 800daf0:	a80b883a 	mov	r5,r21
 800daf4:	102d883a 	mov	r22,r2
 800daf8:	800c2f80 	call	800c2f8 <__mulsi3>
 800dafc:	e009883a 	mov	r4,fp
 800db00:	b80b883a 	mov	r5,r23
 800db04:	1027883a 	mov	r19,r2
 800db08:	800c2f80 	call	800c2f8 <__mulsi3>
 800db0c:	a008d43a 	srli	r4,r20,16
 800db10:	b085883a 	add	r2,r22,r2
 800db14:	d8c00517 	ldw	r3,20(sp)
 800db18:	110f883a 	add	r7,r2,r4
 800db1c:	d9800717 	ldw	r6,28(sp)
 800db20:	da000617 	ldw	r8,24(sp)
 800db24:	3d80022e 	bgeu	r7,r22,800db30 <__muldf3+0x3b0>
 800db28:	00800074 	movhi	r2,1
 800db2c:	98a7883a 	add	r19,r19,r2
 800db30:	3804943a 	slli	r2,r7,16
 800db34:	380ed43a 	srli	r7,r7,16
 800db38:	882cd43a 	srli	r22,r17,16
 800db3c:	a53fffcc 	andi	r20,r20,65535
 800db40:	8c7fffcc 	andi	r17,r17,65535
 800db44:	1529883a 	add	r20,r2,r20
 800db48:	8809883a 	mov	r4,r17
 800db4c:	b80b883a 	mov	r5,r23
 800db50:	d8c00515 	stw	r3,20(sp)
 800db54:	d9800715 	stw	r6,28(sp)
 800db58:	da000615 	stw	r8,24(sp)
 800db5c:	d9c00015 	stw	r7,0(sp)
 800db60:	dd000115 	stw	r20,4(sp)
 800db64:	800c2f80 	call	800c2f8 <__mulsi3>
 800db68:	a80b883a 	mov	r5,r21
 800db6c:	8809883a 	mov	r4,r17
 800db70:	d8800415 	stw	r2,16(sp)
 800db74:	800c2f80 	call	800c2f8 <__mulsi3>
 800db78:	a80b883a 	mov	r5,r21
 800db7c:	b009883a 	mov	r4,r22
 800db80:	1029883a 	mov	r20,r2
 800db84:	800c2f80 	call	800c2f8 <__mulsi3>
 800db88:	b009883a 	mov	r4,r22
 800db8c:	b80b883a 	mov	r5,r23
 800db90:	102b883a 	mov	r21,r2
 800db94:	800c2f80 	call	800c2f8 <__mulsi3>
 800db98:	da400417 	ldw	r9,16(sp)
 800db9c:	a085883a 	add	r2,r20,r2
 800dba0:	d8c00517 	ldw	r3,20(sp)
 800dba4:	4808d43a 	srli	r4,r9,16
 800dba8:	d9800717 	ldw	r6,28(sp)
 800dbac:	da000617 	ldw	r8,24(sp)
 800dbb0:	1109883a 	add	r4,r2,r4
 800dbb4:	2500022e 	bgeu	r4,r20,800dbc0 <__muldf3+0x440>
 800dbb8:	00800074 	movhi	r2,1
 800dbbc:	a8ab883a 	add	r21,r21,r2
 800dbc0:	200e943a 	slli	r7,r4,16
 800dbc4:	2004d43a 	srli	r2,r4,16
 800dbc8:	802ed43a 	srli	r23,r16,16
 800dbcc:	843fffcc 	andi	r16,r16,65535
 800dbd0:	4d3fffcc 	andi	r20,r9,65535
 800dbd4:	9009883a 	mov	r4,r18
 800dbd8:	800b883a 	mov	r5,r16
 800dbdc:	3d29883a 	add	r20,r7,r20
 800dbe0:	d8c00515 	stw	r3,20(sp)
 800dbe4:	d9800715 	stw	r6,28(sp)
 800dbe8:	da000615 	stw	r8,24(sp)
 800dbec:	a8ab883a 	add	r21,r21,r2
 800dbf0:	800c2f80 	call	800c2f8 <__mulsi3>
 800dbf4:	9009883a 	mov	r4,r18
 800dbf8:	b80b883a 	mov	r5,r23
 800dbfc:	d8800315 	stw	r2,12(sp)
 800dc00:	800c2f80 	call	800c2f8 <__mulsi3>
 800dc04:	e009883a 	mov	r4,fp
 800dc08:	b80b883a 	mov	r5,r23
 800dc0c:	1025883a 	mov	r18,r2
 800dc10:	800c2f80 	call	800c2f8 <__mulsi3>
 800dc14:	e009883a 	mov	r4,fp
 800dc18:	800b883a 	mov	r5,r16
 800dc1c:	d8800215 	stw	r2,8(sp)
 800dc20:	800c2f80 	call	800c2f8 <__mulsi3>
 800dc24:	da800317 	ldw	r10,12(sp)
 800dc28:	d9400017 	ldw	r5,0(sp)
 800dc2c:	9085883a 	add	r2,r18,r2
 800dc30:	5008d43a 	srli	r4,r10,16
 800dc34:	a153883a 	add	r9,r20,r5
 800dc38:	d8c00517 	ldw	r3,20(sp)
 800dc3c:	1109883a 	add	r4,r2,r4
 800dc40:	d9800717 	ldw	r6,28(sp)
 800dc44:	da000617 	ldw	r8,24(sp)
 800dc48:	dac00217 	ldw	r11,8(sp)
 800dc4c:	2480022e 	bgeu	r4,r18,800dc58 <__muldf3+0x4d8>
 800dc50:	00800074 	movhi	r2,1
 800dc54:	5897883a 	add	r11,r11,r2
 800dc58:	200e943a 	slli	r7,r4,16
 800dc5c:	2038d43a 	srli	fp,r4,16
 800dc60:	52bfffcc 	andi	r10,r10,65535
 800dc64:	3a8f883a 	add	r7,r7,r10
 800dc68:	8809883a 	mov	r4,r17
 800dc6c:	800b883a 	mov	r5,r16
 800dc70:	d8c00515 	stw	r3,20(sp)
 800dc74:	d9800715 	stw	r6,28(sp)
 800dc78:	d9c00215 	stw	r7,8(sp)
 800dc7c:	da000615 	stw	r8,24(sp)
 800dc80:	da400415 	stw	r9,16(sp)
 800dc84:	5f39883a 	add	fp,r11,fp
 800dc88:	800c2f80 	call	800c2f8 <__mulsi3>
 800dc8c:	8809883a 	mov	r4,r17
 800dc90:	b80b883a 	mov	r5,r23
 800dc94:	1025883a 	mov	r18,r2
 800dc98:	800c2f80 	call	800c2f8 <__mulsi3>
 800dc9c:	b009883a 	mov	r4,r22
 800dca0:	b80b883a 	mov	r5,r23
 800dca4:	d8800315 	stw	r2,12(sp)
 800dca8:	800c2f80 	call	800c2f8 <__mulsi3>
 800dcac:	b009883a 	mov	r4,r22
 800dcb0:	800b883a 	mov	r5,r16
 800dcb4:	1023883a 	mov	r17,r2
 800dcb8:	800c2f80 	call	800c2f8 <__mulsi3>
 800dcbc:	da800317 	ldw	r10,12(sp)
 800dcc0:	9008d43a 	srli	r4,r18,16
 800dcc4:	d8c00517 	ldw	r3,20(sp)
 800dcc8:	5085883a 	add	r2,r10,r2
 800dccc:	1109883a 	add	r4,r2,r4
 800dcd0:	d9800717 	ldw	r6,28(sp)
 800dcd4:	d9c00217 	ldw	r7,8(sp)
 800dcd8:	da000617 	ldw	r8,24(sp)
 800dcdc:	da400417 	ldw	r9,16(sp)
 800dce0:	2280022e 	bgeu	r4,r10,800dcec <__muldf3+0x56c>
 800dce4:	00800074 	movhi	r2,1
 800dce8:	88a3883a 	add	r17,r17,r2
 800dcec:	2004943a 	slli	r2,r4,16
 800dcf0:	94bfffcc 	andi	r18,r18,65535
 800dcf4:	4ce7883a 	add	r19,r9,r19
 800dcf8:	14a5883a 	add	r18,r2,r18
 800dcfc:	9d29803a 	cmpltu	r20,r19,r20
 800dd00:	9565883a 	add	r18,r18,r21
 800dd04:	9505883a 	add	r2,r18,r20
 800dd08:	99e7883a 	add	r19,r19,r7
 800dd0c:	99cf803a 	cmpltu	r7,r19,r7
 800dd10:	e08b883a 	add	r5,fp,r2
 800dd14:	2008d43a 	srli	r4,r4,16
 800dd18:	29ef883a 	add	r23,r5,r7
 800dd1c:	1529803a 	cmpltu	r20,r2,r20
 800dd20:	956b803a 	cmpltu	r21,r18,r21
 800dd24:	b9cf803a 	cmpltu	r7,r23,r7
 800dd28:	a564b03a 	or	r18,r20,r21
 800dd2c:	2f39803a 	cmpltu	fp,r5,fp
 800dd30:	9125883a 	add	r18,r18,r4
 800dd34:	3f38b03a 	or	fp,r7,fp
 800dd38:	9725883a 	add	r18,r18,fp
 800dd3c:	9804927a 	slli	r2,r19,9
 800dd40:	9463883a 	add	r17,r18,r17
 800dd44:	d9000117 	ldw	r4,4(sp)
 800dd48:	b820d5fa 	srli	r16,r23,23
 800dd4c:	8822927a 	slli	r17,r17,9
 800dd50:	9826d5fa 	srli	r19,r19,23
 800dd54:	1104b03a 	or	r2,r2,r4
 800dd58:	b82e927a 	slli	r23,r23,9
 800dd5c:	1004c03a 	cmpne	r2,r2,zero
 800dd60:	8c20b03a 	or	r16,r17,r16
 800dd64:	14e6b03a 	or	r19,r2,r19
 800dd68:	8080402c 	andhi	r2,r16,256
 800dd6c:	9deeb03a 	or	r23,r19,r23
 800dd70:	10000726 	beq	r2,zero,800dd90 <__muldf3+0x610>
 800dd74:	b804d07a 	srli	r2,r23,1
 800dd78:	800697fa 	slli	r3,r16,31
 800dd7c:	bdc0004c 	andi	r23,r23,1
 800dd80:	8020d07a 	srli	r16,r16,1
 800dd84:	b8aeb03a 	or	r23,r23,r2
 800dd88:	b8eeb03a 	or	r23,r23,r3
 800dd8c:	4007883a 	mov	r3,r8
 800dd90:	1900ffc4 	addi	r4,r3,1023
 800dd94:	01004d0e 	bge	zero,r4,800decc <__muldf3+0x74c>
 800dd98:	b88001cc 	andi	r2,r23,7
 800dd9c:	10000726 	beq	r2,zero,800ddbc <__muldf3+0x63c>
 800dda0:	b94003cc 	andi	r5,r23,15
 800dda4:	00800104 	movi	r2,4
 800dda8:	28800426 	beq	r5,r2,800ddbc <__muldf3+0x63c>
 800ddac:	b885883a 	add	r2,r23,r2
 800ddb0:	15ef803a 	cmpltu	r23,r2,r23
 800ddb4:	85e1883a 	add	r16,r16,r23
 800ddb8:	102f883a 	mov	r23,r2
 800ddbc:	8080402c 	andhi	r2,r16,256
 800ddc0:	10000426 	beq	r2,zero,800ddd4 <__muldf3+0x654>
 800ddc4:	00bfc034 	movhi	r2,65280
 800ddc8:	10bfffc4 	addi	r2,r2,-1
 800ddcc:	19010004 	addi	r4,r3,1024
 800ddd0:	80a0703a 	and	r16,r16,r2
 800ddd4:	0081ff84 	movi	r2,2046
 800ddd8:	1100340e 	bge	r2,r4,800deac <__muldf3+0x72c>
 800dddc:	34c0004c 	andi	r19,r6,1
 800dde0:	0101ffc4 	movi	r4,2047
 800dde4:	0021883a 	mov	r16,zero
 800dde8:	002f883a 	mov	r23,zero
 800ddec:	003ebe06 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800ddf0:	8080022c 	andhi	r2,r16,8
 800ddf4:	10000926 	beq	r2,zero,800de1c <__muldf3+0x69c>
 800ddf8:	8880022c 	andhi	r2,r17,8
 800ddfc:	1000071e 	bne	r2,zero,800de1c <__muldf3+0x69c>
 800de00:	00800434 	movhi	r2,16
 800de04:	8c000234 	orhi	r16,r17,8
 800de08:	10bfffc4 	addi	r2,r2,-1
 800de0c:	b027883a 	mov	r19,r22
 800de10:	80a0703a 	and	r16,r16,r2
 800de14:	902f883a 	mov	r23,r18
 800de18:	003f1a06 	br	800da84 <__alt_data_end+0xfc00da84>
 800de1c:	00800434 	movhi	r2,16
 800de20:	84000234 	orhi	r16,r16,8
 800de24:	10bfffc4 	addi	r2,r2,-1
 800de28:	80a0703a 	and	r16,r16,r2
 800de2c:	003f1506 	br	800da84 <__alt_data_end+0xfc00da84>
 800de30:	3009883a 	mov	r4,r6
 800de34:	d9400215 	stw	r5,8(sp)
 800de38:	d9800715 	stw	r6,28(sp)
 800de3c:	da400415 	stw	r9,16(sp)
 800de40:	da800315 	stw	r10,12(sp)
 800de44:	800eab80 	call	800eab8 <__clzsi2>
 800de48:	10c00804 	addi	r3,r2,32
 800de4c:	010009c4 	movi	r4,39
 800de50:	d9400217 	ldw	r5,8(sp)
 800de54:	d9800717 	ldw	r6,28(sp)
 800de58:	da400417 	ldw	r9,16(sp)
 800de5c:	da800317 	ldw	r10,12(sp)
 800de60:	20fee20e 	bge	r4,r3,800d9ec <__alt_data_end+0xfc00d9ec>
 800de64:	147ffe04 	addi	r17,r2,-8
 800de68:	9462983a 	sll	r17,r18,r17
 800de6c:	0025883a 	mov	r18,zero
 800de70:	003ee506 	br	800da08 <__alt_data_end+0xfc00da08>
 800de74:	d9800715 	stw	r6,28(sp)
 800de78:	d9c00215 	stw	r7,8(sp)
 800de7c:	da400415 	stw	r9,16(sp)
 800de80:	800eab80 	call	800eab8 <__clzsi2>
 800de84:	10c00804 	addi	r3,r2,32
 800de88:	010009c4 	movi	r4,39
 800de8c:	d9800717 	ldw	r6,28(sp)
 800de90:	d9c00217 	ldw	r7,8(sp)
 800de94:	da400417 	ldw	r9,16(sp)
 800de98:	20feb40e 	bge	r4,r3,800d96c <__alt_data_end+0xfc00d96c>
 800de9c:	143ffe04 	addi	r16,r2,-8
 800dea0:	9420983a 	sll	r16,r18,r16
 800dea4:	002f883a 	mov	r23,zero
 800dea8:	003eb706 	br	800d988 <__alt_data_end+0xfc00d988>
 800deac:	8004977a 	slli	r2,r16,29
 800deb0:	b82ed0fa 	srli	r23,r23,3
 800deb4:	8020927a 	slli	r16,r16,9
 800deb8:	2101ffcc 	andi	r4,r4,2047
 800debc:	15eeb03a 	or	r23,r2,r23
 800dec0:	8020d33a 	srli	r16,r16,12
 800dec4:	34c0004c 	andi	r19,r6,1
 800dec8:	003e8706 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800decc:	00bf0084 	movi	r2,-1022
 800ded0:	10c5c83a 	sub	r2,r2,r3
 800ded4:	01000e04 	movi	r4,56
 800ded8:	2080080e 	bge	r4,r2,800defc <__muldf3+0x77c>
 800dedc:	34c0004c 	andi	r19,r6,1
 800dee0:	0009883a 	mov	r4,zero
 800dee4:	0021883a 	mov	r16,zero
 800dee8:	002f883a 	mov	r23,zero
 800deec:	003e7e06 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800def0:	4007883a 	mov	r3,r8
 800def4:	480d883a 	mov	r6,r9
 800def8:	003fa506 	br	800dd90 <__alt_data_end+0xfc00dd90>
 800defc:	010007c4 	movi	r4,31
 800df00:	20801816 	blt	r4,r2,800df64 <__muldf3+0x7e4>
 800df04:	18c10784 	addi	r3,r3,1054
 800df08:	80c8983a 	sll	r4,r16,r3
 800df0c:	b88ad83a 	srl	r5,r23,r2
 800df10:	b8c6983a 	sll	r3,r23,r3
 800df14:	80a0d83a 	srl	r16,r16,r2
 800df18:	2908b03a 	or	r4,r5,r4
 800df1c:	1804c03a 	cmpne	r2,r3,zero
 800df20:	2088b03a 	or	r4,r4,r2
 800df24:	208001cc 	andi	r2,r4,7
 800df28:	10000726 	beq	r2,zero,800df48 <__muldf3+0x7c8>
 800df2c:	20c003cc 	andi	r3,r4,15
 800df30:	00800104 	movi	r2,4
 800df34:	18800426 	beq	r3,r2,800df48 <__muldf3+0x7c8>
 800df38:	20c00104 	addi	r3,r4,4
 800df3c:	1905803a 	cmpltu	r2,r3,r4
 800df40:	80a1883a 	add	r16,r16,r2
 800df44:	1809883a 	mov	r4,r3
 800df48:	8080202c 	andhi	r2,r16,128
 800df4c:	10001b26 	beq	r2,zero,800dfbc <__muldf3+0x83c>
 800df50:	34c0004c 	andi	r19,r6,1
 800df54:	01000044 	movi	r4,1
 800df58:	0021883a 	mov	r16,zero
 800df5c:	002f883a 	mov	r23,zero
 800df60:	003e6106 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800df64:	013ef884 	movi	r4,-1054
 800df68:	20c9c83a 	sub	r4,r4,r3
 800df6c:	01400804 	movi	r5,32
 800df70:	8108d83a 	srl	r4,r16,r4
 800df74:	11401526 	beq	r2,r5,800dfcc <__muldf3+0x84c>
 800df78:	18c10f84 	addi	r3,r3,1086
 800df7c:	80e0983a 	sll	r16,r16,r3
 800df80:	85eeb03a 	or	r23,r16,r23
 800df84:	b804c03a 	cmpne	r2,r23,zero
 800df88:	1108b03a 	or	r4,r2,r4
 800df8c:	20c001cc 	andi	r3,r4,7
 800df90:	1800061e 	bne	r3,zero,800dfac <__muldf3+0x82c>
 800df94:	0021883a 	mov	r16,zero
 800df98:	202ed0fa 	srli	r23,r4,3
 800df9c:	34c0004c 	andi	r19,r6,1
 800dfa0:	0009883a 	mov	r4,zero
 800dfa4:	b8eeb03a 	or	r23,r23,r3
 800dfa8:	003e4f06 	br	800d8e8 <__alt_data_end+0xfc00d8e8>
 800dfac:	20c003cc 	andi	r3,r4,15
 800dfb0:	00800104 	movi	r2,4
 800dfb4:	0021883a 	mov	r16,zero
 800dfb8:	18bfdf1e 	bne	r3,r2,800df38 <__alt_data_end+0xfc00df38>
 800dfbc:	8004927a 	slli	r2,r16,9
 800dfc0:	8006977a 	slli	r3,r16,29
 800dfc4:	1020d33a 	srli	r16,r2,12
 800dfc8:	003ff306 	br	800df98 <__alt_data_end+0xfc00df98>
 800dfcc:	0021883a 	mov	r16,zero
 800dfd0:	003feb06 	br	800df80 <__alt_data_end+0xfc00df80>
 800dfd4:	00800434 	movhi	r2,16
 800dfd8:	84000234 	orhi	r16,r16,8
 800dfdc:	10bfffc4 	addi	r2,r2,-1
 800dfe0:	4cc0004c 	andi	r19,r9,1
 800dfe4:	80a0703a 	and	r16,r16,r2
 800dfe8:	003ea606 	br	800da84 <__alt_data_end+0xfc00da84>

0800dfec <__subdf3>:
 800dfec:	00c00434 	movhi	r3,16
 800dff0:	18ffffc4 	addi	r3,r3,-1
 800dff4:	defffb04 	addi	sp,sp,-20
 800dff8:	28d2703a 	and	r9,r5,r3
 800dffc:	3814d53a 	srli	r10,r7,20
 800e000:	38c6703a 	and	r3,r7,r3
 800e004:	3004d77a 	srli	r2,r6,29
 800e008:	dc800215 	stw	r18,8(sp)
 800e00c:	dc000015 	stw	r16,0(sp)
 800e010:	2824d7fa 	srli	r18,r5,31
 800e014:	2820d53a 	srli	r16,r5,20
 800e018:	481290fa 	slli	r9,r9,3
 800e01c:	200ad77a 	srli	r5,r4,29
 800e020:	180690fa 	slli	r3,r3,3
 800e024:	dc400115 	stw	r17,4(sp)
 800e028:	dfc00415 	stw	ra,16(sp)
 800e02c:	202290fa 	slli	r17,r4,3
 800e030:	dcc00315 	stw	r19,12(sp)
 800e034:	5281ffcc 	andi	r10,r10,2047
 800e038:	0101ffc4 	movi	r4,2047
 800e03c:	9011883a 	mov	r8,r18
 800e040:	8401ffcc 	andi	r16,r16,2047
 800e044:	94803fcc 	andi	r18,r18,255
 800e048:	494ab03a 	or	r5,r9,r5
 800e04c:	380ed7fa 	srli	r7,r7,31
 800e050:	1886b03a 	or	r3,r3,r2
 800e054:	300c90fa 	slli	r6,r6,3
 800e058:	51009026 	beq	r10,r4,800e29c <__subdf3+0x2b0>
 800e05c:	39c0005c 	xori	r7,r7,1
 800e060:	8285c83a 	sub	r2,r16,r10
 800e064:	91c06f26 	beq	r18,r7,800e224 <__subdf3+0x238>
 800e068:	0080b10e 	bge	zero,r2,800e330 <__subdf3+0x344>
 800e06c:	50002a1e 	bne	r10,zero,800e118 <__subdf3+0x12c>
 800e070:	1988b03a 	or	r4,r3,r6
 800e074:	2000941e 	bne	r4,zero,800e2c8 <__subdf3+0x2dc>
 800e078:	888001cc 	andi	r2,r17,7
 800e07c:	10005b26 	beq	r2,zero,800e1ec <__subdf3+0x200>
 800e080:	88c003cc 	andi	r3,r17,15
 800e084:	00800104 	movi	r2,4
 800e088:	18805826 	beq	r3,r2,800e1ec <__subdf3+0x200>
 800e08c:	88c00104 	addi	r3,r17,4
 800e090:	1c63803a 	cmpltu	r17,r3,r17
 800e094:	2c4b883a 	add	r5,r5,r17
 800e098:	2880202c 	andhi	r2,r5,128
 800e09c:	9200004c 	andi	r8,r18,1
 800e0a0:	1823883a 	mov	r17,r3
 800e0a4:	10005426 	beq	r2,zero,800e1f8 <__subdf3+0x20c>
 800e0a8:	84000044 	addi	r16,r16,1
 800e0ac:	0081ffc4 	movi	r2,2047
 800e0b0:	8080bf26 	beq	r16,r2,800e3b0 <__subdf3+0x3c4>
 800e0b4:	013fe034 	movhi	r4,65408
 800e0b8:	213fffc4 	addi	r4,r4,-1
 800e0bc:	290a703a 	and	r5,r5,r4
 800e0c0:	2804977a 	slli	r2,r5,29
 800e0c4:	280a927a 	slli	r5,r5,9
 800e0c8:	8822d0fa 	srli	r17,r17,3
 800e0cc:	8401ffcc 	andi	r16,r16,2047
 800e0d0:	2808d33a 	srli	r4,r5,12
 800e0d4:	1444b03a 	or	r2,r2,r17
 800e0d8:	8401ffcc 	andi	r16,r16,2047
 800e0dc:	800a953a 	slli	r5,r16,20
 800e0e0:	40c03fcc 	andi	r3,r8,255
 800e0e4:	04000434 	movhi	r16,16
 800e0e8:	180697fa 	slli	r3,r3,31
 800e0ec:	843fffc4 	addi	r16,r16,-1
 800e0f0:	2420703a 	and	r16,r4,r16
 800e0f4:	8160b03a 	or	r16,r16,r5
 800e0f8:	80c6b03a 	or	r3,r16,r3
 800e0fc:	dfc00417 	ldw	ra,16(sp)
 800e100:	dcc00317 	ldw	r19,12(sp)
 800e104:	dc800217 	ldw	r18,8(sp)
 800e108:	dc400117 	ldw	r17,4(sp)
 800e10c:	dc000017 	ldw	r16,0(sp)
 800e110:	dec00504 	addi	sp,sp,20
 800e114:	f800283a 	ret
 800e118:	0101ffc4 	movi	r4,2047
 800e11c:	813fd626 	beq	r16,r4,800e078 <__alt_data_end+0xfc00e078>
 800e120:	18c02034 	orhi	r3,r3,128
 800e124:	01000e04 	movi	r4,56
 800e128:	2080a416 	blt	r4,r2,800e3bc <__subdf3+0x3d0>
 800e12c:	010007c4 	movi	r4,31
 800e130:	2080c716 	blt	r4,r2,800e450 <__subdf3+0x464>
 800e134:	01000804 	movi	r4,32
 800e138:	2089c83a 	sub	r4,r4,r2
 800e13c:	1910983a 	sll	r8,r3,r4
 800e140:	308ed83a 	srl	r7,r6,r2
 800e144:	3108983a 	sll	r4,r6,r4
 800e148:	1884d83a 	srl	r2,r3,r2
 800e14c:	41ccb03a 	or	r6,r8,r7
 800e150:	2008c03a 	cmpne	r4,r4,zero
 800e154:	310cb03a 	or	r6,r6,r4
 800e158:	898dc83a 	sub	r6,r17,r6
 800e15c:	89a3803a 	cmpltu	r17,r17,r6
 800e160:	288bc83a 	sub	r5,r5,r2
 800e164:	2c4bc83a 	sub	r5,r5,r17
 800e168:	3023883a 	mov	r17,r6
 800e16c:	2880202c 	andhi	r2,r5,128
 800e170:	10006b26 	beq	r2,zero,800e320 <__subdf3+0x334>
 800e174:	04c02034 	movhi	r19,128
 800e178:	9cffffc4 	addi	r19,r19,-1
 800e17c:	2ce6703a 	and	r19,r5,r19
 800e180:	98007c26 	beq	r19,zero,800e374 <__subdf3+0x388>
 800e184:	9809883a 	mov	r4,r19
 800e188:	800eab80 	call	800eab8 <__clzsi2>
 800e18c:	10fffe04 	addi	r3,r2,-8
 800e190:	010007c4 	movi	r4,31
 800e194:	20c07d16 	blt	r4,r3,800e38c <__subdf3+0x3a0>
 800e198:	01400a04 	movi	r5,40
 800e19c:	2885c83a 	sub	r2,r5,r2
 800e1a0:	888ad83a 	srl	r5,r17,r2
 800e1a4:	98e6983a 	sll	r19,r19,r3
 800e1a8:	88e2983a 	sll	r17,r17,r3
 800e1ac:	2ce6b03a 	or	r19,r5,r19
 800e1b0:	1c007a16 	blt	r3,r16,800e39c <__subdf3+0x3b0>
 800e1b4:	1c21c83a 	sub	r16,r3,r16
 800e1b8:	81400044 	addi	r5,r16,1
 800e1bc:	00c007c4 	movi	r3,31
 800e1c0:	19409616 	blt	r3,r5,800e41c <__subdf3+0x430>
 800e1c4:	1c21c83a 	sub	r16,r3,r16
 800e1c8:	8c08983a 	sll	r4,r17,r16
 800e1cc:	8946d83a 	srl	r3,r17,r5
 800e1d0:	9c20983a 	sll	r16,r19,r16
 800e1d4:	2008c03a 	cmpne	r4,r4,zero
 800e1d8:	994ad83a 	srl	r5,r19,r5
 800e1dc:	1c06b03a 	or	r3,r3,r16
 800e1e0:	1922b03a 	or	r17,r3,r4
 800e1e4:	0021883a 	mov	r16,zero
 800e1e8:	003fa306 	br	800e078 <__alt_data_end+0xfc00e078>
 800e1ec:	2880202c 	andhi	r2,r5,128
 800e1f0:	9200004c 	andi	r8,r18,1
 800e1f4:	103fac1e 	bne	r2,zero,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e1f8:	2804977a 	slli	r2,r5,29
 800e1fc:	8822d0fa 	srli	r17,r17,3
 800e200:	00c1ffc4 	movi	r3,2047
 800e204:	280ad0fa 	srli	r5,r5,3
 800e208:	1444b03a 	or	r2,r2,r17
 800e20c:	80c02726 	beq	r16,r3,800e2ac <__subdf3+0x2c0>
 800e210:	01000434 	movhi	r4,16
 800e214:	213fffc4 	addi	r4,r4,-1
 800e218:	80e0703a 	and	r16,r16,r3
 800e21c:	2908703a 	and	r4,r5,r4
 800e220:	003fad06 	br	800e0d8 <__alt_data_end+0xfc00e0d8>
 800e224:	0080690e 	bge	zero,r2,800e3cc <__subdf3+0x3e0>
 800e228:	50002f26 	beq	r10,zero,800e2e8 <__subdf3+0x2fc>
 800e22c:	0101ffc4 	movi	r4,2047
 800e230:	813f9126 	beq	r16,r4,800e078 <__alt_data_end+0xfc00e078>
 800e234:	18c02034 	orhi	r3,r3,128
 800e238:	01000e04 	movi	r4,56
 800e23c:	2080b00e 	bge	r4,r2,800e500 <__subdf3+0x514>
 800e240:	198cb03a 	or	r6,r3,r6
 800e244:	300ec03a 	cmpne	r7,r6,zero
 800e248:	0005883a 	mov	r2,zero
 800e24c:	3c4f883a 	add	r7,r7,r17
 800e250:	3c63803a 	cmpltu	r17,r7,r17
 800e254:	114b883a 	add	r5,r2,r5
 800e258:	2c4b883a 	add	r5,r5,r17
 800e25c:	3823883a 	mov	r17,r7
 800e260:	2880202c 	andhi	r2,r5,128
 800e264:	10002e26 	beq	r2,zero,800e320 <__subdf3+0x334>
 800e268:	84000044 	addi	r16,r16,1
 800e26c:	0081ffc4 	movi	r2,2047
 800e270:	8080de26 	beq	r16,r2,800e5ec <__subdf3+0x600>
 800e274:	00bfe034 	movhi	r2,65408
 800e278:	10bfffc4 	addi	r2,r2,-1
 800e27c:	288a703a 	and	r5,r5,r2
 800e280:	880cd07a 	srli	r6,r17,1
 800e284:	280897fa 	slli	r4,r5,31
 800e288:	88c0004c 	andi	r3,r17,1
 800e28c:	30e2b03a 	or	r17,r6,r3
 800e290:	280ad07a 	srli	r5,r5,1
 800e294:	8922b03a 	or	r17,r17,r4
 800e298:	003f7706 	br	800e078 <__alt_data_end+0xfc00e078>
 800e29c:	1984b03a 	or	r2,r3,r6
 800e2a0:	103f6e26 	beq	r2,zero,800e05c <__alt_data_end+0xfc00e05c>
 800e2a4:	39c03fcc 	andi	r7,r7,255
 800e2a8:	003f6d06 	br	800e060 <__alt_data_end+0xfc00e060>
 800e2ac:	1146b03a 	or	r3,r2,r5
 800e2b0:	18003f26 	beq	r3,zero,800e3b0 <__subdf3+0x3c4>
 800e2b4:	00c00434 	movhi	r3,16
 800e2b8:	29000234 	orhi	r4,r5,8
 800e2bc:	18ffffc4 	addi	r3,r3,-1
 800e2c0:	20c8703a 	and	r4,r4,r3
 800e2c4:	003f8406 	br	800e0d8 <__alt_data_end+0xfc00e0d8>
 800e2c8:	10bfffc4 	addi	r2,r2,-1
 800e2cc:	1000501e 	bne	r2,zero,800e410 <__subdf3+0x424>
 800e2d0:	898fc83a 	sub	r7,r17,r6
 800e2d4:	89e3803a 	cmpltu	r17,r17,r7
 800e2d8:	28cbc83a 	sub	r5,r5,r3
 800e2dc:	2c4bc83a 	sub	r5,r5,r17
 800e2e0:	3823883a 	mov	r17,r7
 800e2e4:	003fa106 	br	800e16c <__alt_data_end+0xfc00e16c>
 800e2e8:	1988b03a 	or	r4,r3,r6
 800e2ec:	203f6226 	beq	r4,zero,800e078 <__alt_data_end+0xfc00e078>
 800e2f0:	10bfffc4 	addi	r2,r2,-1
 800e2f4:	10009b1e 	bne	r2,zero,800e564 <__subdf3+0x578>
 800e2f8:	344d883a 	add	r6,r6,r17
 800e2fc:	3463803a 	cmpltu	r17,r6,r17
 800e300:	194b883a 	add	r5,r3,r5
 800e304:	2c4b883a 	add	r5,r5,r17
 800e308:	3023883a 	mov	r17,r6
 800e30c:	003fd406 	br	800e260 <__alt_data_end+0xfc00e260>
 800e310:	1106b03a 	or	r3,r2,r4
 800e314:	1800b426 	beq	r3,zero,800e5e8 <__subdf3+0x5fc>
 800e318:	100b883a 	mov	r5,r2
 800e31c:	2023883a 	mov	r17,r4
 800e320:	888001cc 	andi	r2,r17,7
 800e324:	103f561e 	bne	r2,zero,800e080 <__alt_data_end+0xfc00e080>
 800e328:	9200004c 	andi	r8,r18,1
 800e32c:	003fb206 	br	800e1f8 <__alt_data_end+0xfc00e1f8>
 800e330:	1000531e 	bne	r2,zero,800e480 <__subdf3+0x494>
 800e334:	80800044 	addi	r2,r16,1
 800e338:	1081ffcc 	andi	r2,r2,2047
 800e33c:	01000044 	movi	r4,1
 800e340:	2080a00e 	bge	r4,r2,800e5c4 <__subdf3+0x5d8>
 800e344:	8985c83a 	sub	r2,r17,r6
 800e348:	8889803a 	cmpltu	r4,r17,r2
 800e34c:	28e7c83a 	sub	r19,r5,r3
 800e350:	9927c83a 	sub	r19,r19,r4
 800e354:	9900202c 	andhi	r4,r19,128
 800e358:	20006226 	beq	r4,zero,800e4e4 <__subdf3+0x4f8>
 800e35c:	3463c83a 	sub	r17,r6,r17
 800e360:	194bc83a 	sub	r5,r3,r5
 800e364:	344d803a 	cmpltu	r6,r6,r17
 800e368:	29a7c83a 	sub	r19,r5,r6
 800e36c:	3825883a 	mov	r18,r7
 800e370:	983f841e 	bne	r19,zero,800e184 <__alt_data_end+0xfc00e184>
 800e374:	8809883a 	mov	r4,r17
 800e378:	800eab80 	call	800eab8 <__clzsi2>
 800e37c:	10800804 	addi	r2,r2,32
 800e380:	10fffe04 	addi	r3,r2,-8
 800e384:	010007c4 	movi	r4,31
 800e388:	20ff830e 	bge	r4,r3,800e198 <__alt_data_end+0xfc00e198>
 800e38c:	14fff604 	addi	r19,r2,-40
 800e390:	8ce6983a 	sll	r19,r17,r19
 800e394:	0023883a 	mov	r17,zero
 800e398:	1c3f860e 	bge	r3,r16,800e1b4 <__alt_data_end+0xfc00e1b4>
 800e39c:	017fe034 	movhi	r5,65408
 800e3a0:	297fffc4 	addi	r5,r5,-1
 800e3a4:	80e1c83a 	sub	r16,r16,r3
 800e3a8:	994a703a 	and	r5,r19,r5
 800e3ac:	003f3206 	br	800e078 <__alt_data_end+0xfc00e078>
 800e3b0:	0009883a 	mov	r4,zero
 800e3b4:	0005883a 	mov	r2,zero
 800e3b8:	003f4706 	br	800e0d8 <__alt_data_end+0xfc00e0d8>
 800e3bc:	198cb03a 	or	r6,r3,r6
 800e3c0:	300cc03a 	cmpne	r6,r6,zero
 800e3c4:	0005883a 	mov	r2,zero
 800e3c8:	003f6306 	br	800e158 <__alt_data_end+0xfc00e158>
 800e3cc:	10009d1e 	bne	r2,zero,800e644 <__subdf3+0x658>
 800e3d0:	81c00044 	addi	r7,r16,1
 800e3d4:	3881ffcc 	andi	r2,r7,2047
 800e3d8:	02400044 	movi	r9,1
 800e3dc:	4880680e 	bge	r9,r2,800e580 <__subdf3+0x594>
 800e3e0:	0081ffc4 	movi	r2,2047
 800e3e4:	3880ae26 	beq	r7,r2,800e6a0 <__subdf3+0x6b4>
 800e3e8:	344d883a 	add	r6,r6,r17
 800e3ec:	3463803a 	cmpltu	r17,r6,r17
 800e3f0:	194b883a 	add	r5,r3,r5
 800e3f4:	2c4b883a 	add	r5,r5,r17
 800e3f8:	282297fa 	slli	r17,r5,31
 800e3fc:	300cd07a 	srli	r6,r6,1
 800e400:	280ad07a 	srli	r5,r5,1
 800e404:	3821883a 	mov	r16,r7
 800e408:	89a2b03a 	or	r17,r17,r6
 800e40c:	003f1a06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e410:	0101ffc4 	movi	r4,2047
 800e414:	813f431e 	bne	r16,r4,800e124 <__alt_data_end+0xfc00e124>
 800e418:	003f1706 	br	800e078 <__alt_data_end+0xfc00e078>
 800e41c:	80bff844 	addi	r2,r16,-31
 800e420:	00c00804 	movi	r3,32
 800e424:	9884d83a 	srl	r2,r19,r2
 800e428:	28c05126 	beq	r5,r3,800e570 <__subdf3+0x584>
 800e42c:	00c00fc4 	movi	r3,63
 800e430:	1c21c83a 	sub	r16,r3,r16
 800e434:	9c26983a 	sll	r19,r19,r16
 800e438:	9c62b03a 	or	r17,r19,r17
 800e43c:	8822c03a 	cmpne	r17,r17,zero
 800e440:	88a2b03a 	or	r17,r17,r2
 800e444:	000b883a 	mov	r5,zero
 800e448:	0021883a 	mov	r16,zero
 800e44c:	003fb406 	br	800e320 <__alt_data_end+0xfc00e320>
 800e450:	113ff804 	addi	r4,r2,-32
 800e454:	01c00804 	movi	r7,32
 800e458:	1908d83a 	srl	r4,r3,r4
 800e45c:	11c04626 	beq	r2,r7,800e578 <__subdf3+0x58c>
 800e460:	01c01004 	movi	r7,64
 800e464:	3885c83a 	sub	r2,r7,r2
 800e468:	1884983a 	sll	r2,r3,r2
 800e46c:	118cb03a 	or	r6,r2,r6
 800e470:	300cc03a 	cmpne	r6,r6,zero
 800e474:	310cb03a 	or	r6,r6,r4
 800e478:	0005883a 	mov	r2,zero
 800e47c:	003f3606 	br	800e158 <__alt_data_end+0xfc00e158>
 800e480:	80002b26 	beq	r16,zero,800e530 <__subdf3+0x544>
 800e484:	0101ffc4 	movi	r4,2047
 800e488:	51006926 	beq	r10,r4,800e630 <__subdf3+0x644>
 800e48c:	0085c83a 	sub	r2,zero,r2
 800e490:	29402034 	orhi	r5,r5,128
 800e494:	01000e04 	movi	r4,56
 800e498:	20807d16 	blt	r4,r2,800e690 <__subdf3+0x6a4>
 800e49c:	010007c4 	movi	r4,31
 800e4a0:	2080d916 	blt	r4,r2,800e808 <__subdf3+0x81c>
 800e4a4:	01000804 	movi	r4,32
 800e4a8:	2089c83a 	sub	r4,r4,r2
 800e4ac:	2912983a 	sll	r9,r5,r4
 800e4b0:	8890d83a 	srl	r8,r17,r2
 800e4b4:	8908983a 	sll	r4,r17,r4
 800e4b8:	2884d83a 	srl	r2,r5,r2
 800e4bc:	4a22b03a 	or	r17,r9,r8
 800e4c0:	2008c03a 	cmpne	r4,r4,zero
 800e4c4:	8922b03a 	or	r17,r17,r4
 800e4c8:	3463c83a 	sub	r17,r6,r17
 800e4cc:	1885c83a 	sub	r2,r3,r2
 800e4d0:	344d803a 	cmpltu	r6,r6,r17
 800e4d4:	118bc83a 	sub	r5,r2,r6
 800e4d8:	5021883a 	mov	r16,r10
 800e4dc:	3825883a 	mov	r18,r7
 800e4e0:	003f2206 	br	800e16c <__alt_data_end+0xfc00e16c>
 800e4e4:	9886b03a 	or	r3,r19,r2
 800e4e8:	18001c1e 	bne	r3,zero,800e55c <__subdf3+0x570>
 800e4ec:	0011883a 	mov	r8,zero
 800e4f0:	000b883a 	mov	r5,zero
 800e4f4:	0023883a 	mov	r17,zero
 800e4f8:	0021883a 	mov	r16,zero
 800e4fc:	003f3e06 	br	800e1f8 <__alt_data_end+0xfc00e1f8>
 800e500:	010007c4 	movi	r4,31
 800e504:	20803c16 	blt	r4,r2,800e5f8 <__subdf3+0x60c>
 800e508:	01000804 	movi	r4,32
 800e50c:	2089c83a 	sub	r4,r4,r2
 800e510:	1912983a 	sll	r9,r3,r4
 800e514:	308ed83a 	srl	r7,r6,r2
 800e518:	3108983a 	sll	r4,r6,r4
 800e51c:	1884d83a 	srl	r2,r3,r2
 800e520:	49ceb03a 	or	r7,r9,r7
 800e524:	2008c03a 	cmpne	r4,r4,zero
 800e528:	390eb03a 	or	r7,r7,r4
 800e52c:	003f4706 	br	800e24c <__alt_data_end+0xfc00e24c>
 800e530:	2c48b03a 	or	r4,r5,r17
 800e534:	20003e26 	beq	r4,zero,800e630 <__subdf3+0x644>
 800e538:	0084303a 	nor	r2,zero,r2
 800e53c:	10003a1e 	bne	r2,zero,800e628 <__subdf3+0x63c>
 800e540:	3463c83a 	sub	r17,r6,r17
 800e544:	194bc83a 	sub	r5,r3,r5
 800e548:	344d803a 	cmpltu	r6,r6,r17
 800e54c:	298bc83a 	sub	r5,r5,r6
 800e550:	5021883a 	mov	r16,r10
 800e554:	3825883a 	mov	r18,r7
 800e558:	003f0406 	br	800e16c <__alt_data_end+0xfc00e16c>
 800e55c:	1023883a 	mov	r17,r2
 800e560:	003f0706 	br	800e180 <__alt_data_end+0xfc00e180>
 800e564:	0101ffc4 	movi	r4,2047
 800e568:	813f331e 	bne	r16,r4,800e238 <__alt_data_end+0xfc00e238>
 800e56c:	003ec206 	br	800e078 <__alt_data_end+0xfc00e078>
 800e570:	0027883a 	mov	r19,zero
 800e574:	003fb006 	br	800e438 <__alt_data_end+0xfc00e438>
 800e578:	0005883a 	mov	r2,zero
 800e57c:	003fbb06 	br	800e46c <__alt_data_end+0xfc00e46c>
 800e580:	2c44b03a 	or	r2,r5,r17
 800e584:	80008b1e 	bne	r16,zero,800e7b4 <__subdf3+0x7c8>
 800e588:	1000b526 	beq	r2,zero,800e860 <__subdf3+0x874>
 800e58c:	1984b03a 	or	r2,r3,r6
 800e590:	103eb926 	beq	r2,zero,800e078 <__alt_data_end+0xfc00e078>
 800e594:	3449883a 	add	r4,r6,r17
 800e598:	2463803a 	cmpltu	r17,r4,r17
 800e59c:	194b883a 	add	r5,r3,r5
 800e5a0:	2c4b883a 	add	r5,r5,r17
 800e5a4:	2880202c 	andhi	r2,r5,128
 800e5a8:	2023883a 	mov	r17,r4
 800e5ac:	103f5c26 	beq	r2,zero,800e320 <__alt_data_end+0xfc00e320>
 800e5b0:	00bfe034 	movhi	r2,65408
 800e5b4:	10bfffc4 	addi	r2,r2,-1
 800e5b8:	4821883a 	mov	r16,r9
 800e5bc:	288a703a 	and	r5,r5,r2
 800e5c0:	003ead06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e5c4:	2c44b03a 	or	r2,r5,r17
 800e5c8:	8000291e 	bne	r16,zero,800e670 <__subdf3+0x684>
 800e5cc:	10004f1e 	bne	r2,zero,800e70c <__subdf3+0x720>
 800e5d0:	1984b03a 	or	r2,r3,r6
 800e5d4:	10000426 	beq	r2,zero,800e5e8 <__subdf3+0x5fc>
 800e5d8:	180b883a 	mov	r5,r3
 800e5dc:	3023883a 	mov	r17,r6
 800e5e0:	3825883a 	mov	r18,r7
 800e5e4:	003ea406 	br	800e078 <__alt_data_end+0xfc00e078>
 800e5e8:	0011883a 	mov	r8,zero
 800e5ec:	000b883a 	mov	r5,zero
 800e5f0:	0023883a 	mov	r17,zero
 800e5f4:	003f0006 	br	800e1f8 <__alt_data_end+0xfc00e1f8>
 800e5f8:	11fff804 	addi	r7,r2,-32
 800e5fc:	19c8d83a 	srl	r4,r3,r7
 800e600:	01c00804 	movi	r7,32
 800e604:	11c07e26 	beq	r2,r7,800e800 <__subdf3+0x814>
 800e608:	01c01004 	movi	r7,64
 800e60c:	3885c83a 	sub	r2,r7,r2
 800e610:	1884983a 	sll	r2,r3,r2
 800e614:	118cb03a 	or	r6,r2,r6
 800e618:	300ec03a 	cmpne	r7,r6,zero
 800e61c:	390eb03a 	or	r7,r7,r4
 800e620:	0005883a 	mov	r2,zero
 800e624:	003f0906 	br	800e24c <__alt_data_end+0xfc00e24c>
 800e628:	0101ffc4 	movi	r4,2047
 800e62c:	513f991e 	bne	r10,r4,800e494 <__alt_data_end+0xfc00e494>
 800e630:	180b883a 	mov	r5,r3
 800e634:	3023883a 	mov	r17,r6
 800e638:	5021883a 	mov	r16,r10
 800e63c:	3825883a 	mov	r18,r7
 800e640:	003e8d06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e644:	80001a1e 	bne	r16,zero,800e6b0 <__subdf3+0x6c4>
 800e648:	2c48b03a 	or	r4,r5,r17
 800e64c:	20005526 	beq	r4,zero,800e7a4 <__subdf3+0x7b8>
 800e650:	0084303a 	nor	r2,zero,r2
 800e654:	1000511e 	bne	r2,zero,800e79c <__subdf3+0x7b0>
 800e658:	89a3883a 	add	r17,r17,r6
 800e65c:	194b883a 	add	r5,r3,r5
 800e660:	898d803a 	cmpltu	r6,r17,r6
 800e664:	298b883a 	add	r5,r5,r6
 800e668:	5021883a 	mov	r16,r10
 800e66c:	003efc06 	br	800e260 <__alt_data_end+0xfc00e260>
 800e670:	1000341e 	bne	r2,zero,800e744 <__subdf3+0x758>
 800e674:	1984b03a 	or	r2,r3,r6
 800e678:	10006f26 	beq	r2,zero,800e838 <__subdf3+0x84c>
 800e67c:	180b883a 	mov	r5,r3
 800e680:	3023883a 	mov	r17,r6
 800e684:	3825883a 	mov	r18,r7
 800e688:	0401ffc4 	movi	r16,2047
 800e68c:	003e7a06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e690:	2c62b03a 	or	r17,r5,r17
 800e694:	8822c03a 	cmpne	r17,r17,zero
 800e698:	0005883a 	mov	r2,zero
 800e69c:	003f8a06 	br	800e4c8 <__alt_data_end+0xfc00e4c8>
 800e6a0:	3821883a 	mov	r16,r7
 800e6a4:	000b883a 	mov	r5,zero
 800e6a8:	0023883a 	mov	r17,zero
 800e6ac:	003ed206 	br	800e1f8 <__alt_data_end+0xfc00e1f8>
 800e6b0:	0101ffc4 	movi	r4,2047
 800e6b4:	51003b26 	beq	r10,r4,800e7a4 <__subdf3+0x7b8>
 800e6b8:	0085c83a 	sub	r2,zero,r2
 800e6bc:	29402034 	orhi	r5,r5,128
 800e6c0:	01000e04 	movi	r4,56
 800e6c4:	20806216 	blt	r4,r2,800e850 <__subdf3+0x864>
 800e6c8:	010007c4 	movi	r4,31
 800e6cc:	20806b16 	blt	r4,r2,800e87c <__subdf3+0x890>
 800e6d0:	01000804 	movi	r4,32
 800e6d4:	2089c83a 	sub	r4,r4,r2
 800e6d8:	2912983a 	sll	r9,r5,r4
 800e6dc:	888ed83a 	srl	r7,r17,r2
 800e6e0:	8908983a 	sll	r4,r17,r4
 800e6e4:	2884d83a 	srl	r2,r5,r2
 800e6e8:	49e2b03a 	or	r17,r9,r7
 800e6ec:	2008c03a 	cmpne	r4,r4,zero
 800e6f0:	8922b03a 	or	r17,r17,r4
 800e6f4:	89a3883a 	add	r17,r17,r6
 800e6f8:	10c5883a 	add	r2,r2,r3
 800e6fc:	898d803a 	cmpltu	r6,r17,r6
 800e700:	118b883a 	add	r5,r2,r6
 800e704:	5021883a 	mov	r16,r10
 800e708:	003ed506 	br	800e260 <__alt_data_end+0xfc00e260>
 800e70c:	1984b03a 	or	r2,r3,r6
 800e710:	103e5926 	beq	r2,zero,800e078 <__alt_data_end+0xfc00e078>
 800e714:	8989c83a 	sub	r4,r17,r6
 800e718:	8911803a 	cmpltu	r8,r17,r4
 800e71c:	28c5c83a 	sub	r2,r5,r3
 800e720:	1205c83a 	sub	r2,r2,r8
 800e724:	1200202c 	andhi	r8,r2,128
 800e728:	403ef926 	beq	r8,zero,800e310 <__alt_data_end+0xfc00e310>
 800e72c:	3463c83a 	sub	r17,r6,r17
 800e730:	194bc83a 	sub	r5,r3,r5
 800e734:	344d803a 	cmpltu	r6,r6,r17
 800e738:	298bc83a 	sub	r5,r5,r6
 800e73c:	3825883a 	mov	r18,r7
 800e740:	003e4d06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e744:	1984b03a 	or	r2,r3,r6
 800e748:	10002b26 	beq	r2,zero,800e7f8 <__subdf3+0x80c>
 800e74c:	2808d0fa 	srli	r4,r5,3
 800e750:	8822d0fa 	srli	r17,r17,3
 800e754:	280a977a 	slli	r5,r5,29
 800e758:	2080022c 	andhi	r2,r4,8
 800e75c:	2c62b03a 	or	r17,r5,r17
 800e760:	10000826 	beq	r2,zero,800e784 <__subdf3+0x798>
 800e764:	1810d0fa 	srli	r8,r3,3
 800e768:	4080022c 	andhi	r2,r8,8
 800e76c:	1000051e 	bne	r2,zero,800e784 <__subdf3+0x798>
 800e770:	300cd0fa 	srli	r6,r6,3
 800e774:	1804977a 	slli	r2,r3,29
 800e778:	4009883a 	mov	r4,r8
 800e77c:	3825883a 	mov	r18,r7
 800e780:	11a2b03a 	or	r17,r2,r6
 800e784:	880ad77a 	srli	r5,r17,29
 800e788:	200890fa 	slli	r4,r4,3
 800e78c:	882290fa 	slli	r17,r17,3
 800e790:	0401ffc4 	movi	r16,2047
 800e794:	290ab03a 	or	r5,r5,r4
 800e798:	003e3706 	br	800e078 <__alt_data_end+0xfc00e078>
 800e79c:	0101ffc4 	movi	r4,2047
 800e7a0:	513fc71e 	bne	r10,r4,800e6c0 <__alt_data_end+0xfc00e6c0>
 800e7a4:	180b883a 	mov	r5,r3
 800e7a8:	3023883a 	mov	r17,r6
 800e7ac:	5021883a 	mov	r16,r10
 800e7b0:	003e3106 	br	800e078 <__alt_data_end+0xfc00e078>
 800e7b4:	10002d26 	beq	r2,zero,800e86c <__subdf3+0x880>
 800e7b8:	1984b03a 	or	r2,r3,r6
 800e7bc:	10000e26 	beq	r2,zero,800e7f8 <__subdf3+0x80c>
 800e7c0:	2808d0fa 	srli	r4,r5,3
 800e7c4:	8822d0fa 	srli	r17,r17,3
 800e7c8:	280a977a 	slli	r5,r5,29
 800e7cc:	2080022c 	andhi	r2,r4,8
 800e7d0:	2c62b03a 	or	r17,r5,r17
 800e7d4:	103feb26 	beq	r2,zero,800e784 <__alt_data_end+0xfc00e784>
 800e7d8:	180ed0fa 	srli	r7,r3,3
 800e7dc:	3880022c 	andhi	r2,r7,8
 800e7e0:	103fe81e 	bne	r2,zero,800e784 <__alt_data_end+0xfc00e784>
 800e7e4:	300cd0fa 	srli	r6,r6,3
 800e7e8:	1804977a 	slli	r2,r3,29
 800e7ec:	3809883a 	mov	r4,r7
 800e7f0:	11a2b03a 	or	r17,r2,r6
 800e7f4:	003fe306 	br	800e784 <__alt_data_end+0xfc00e784>
 800e7f8:	0401ffc4 	movi	r16,2047
 800e7fc:	003e1e06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e800:	0005883a 	mov	r2,zero
 800e804:	003f8306 	br	800e614 <__alt_data_end+0xfc00e614>
 800e808:	113ff804 	addi	r4,r2,-32
 800e80c:	02000804 	movi	r8,32
 800e810:	2908d83a 	srl	r4,r5,r4
 800e814:	12002526 	beq	r2,r8,800e8ac <__subdf3+0x8c0>
 800e818:	02001004 	movi	r8,64
 800e81c:	4085c83a 	sub	r2,r8,r2
 800e820:	288a983a 	sll	r5,r5,r2
 800e824:	2c62b03a 	or	r17,r5,r17
 800e828:	8822c03a 	cmpne	r17,r17,zero
 800e82c:	8922b03a 	or	r17,r17,r4
 800e830:	0005883a 	mov	r2,zero
 800e834:	003f2406 	br	800e4c8 <__alt_data_end+0xfc00e4c8>
 800e838:	01402034 	movhi	r5,128
 800e83c:	0011883a 	mov	r8,zero
 800e840:	297fffc4 	addi	r5,r5,-1
 800e844:	047ffe04 	movi	r17,-8
 800e848:	0401ffc4 	movi	r16,2047
 800e84c:	003e6a06 	br	800e1f8 <__alt_data_end+0xfc00e1f8>
 800e850:	2c62b03a 	or	r17,r5,r17
 800e854:	8822c03a 	cmpne	r17,r17,zero
 800e858:	0005883a 	mov	r2,zero
 800e85c:	003fa506 	br	800e6f4 <__alt_data_end+0xfc00e6f4>
 800e860:	180b883a 	mov	r5,r3
 800e864:	3023883a 	mov	r17,r6
 800e868:	003e0306 	br	800e078 <__alt_data_end+0xfc00e078>
 800e86c:	180b883a 	mov	r5,r3
 800e870:	3023883a 	mov	r17,r6
 800e874:	0401ffc4 	movi	r16,2047
 800e878:	003dff06 	br	800e078 <__alt_data_end+0xfc00e078>
 800e87c:	113ff804 	addi	r4,r2,-32
 800e880:	01c00804 	movi	r7,32
 800e884:	2908d83a 	srl	r4,r5,r4
 800e888:	11c00a26 	beq	r2,r7,800e8b4 <__subdf3+0x8c8>
 800e88c:	01c01004 	movi	r7,64
 800e890:	3885c83a 	sub	r2,r7,r2
 800e894:	288a983a 	sll	r5,r5,r2
 800e898:	2c62b03a 	or	r17,r5,r17
 800e89c:	8822c03a 	cmpne	r17,r17,zero
 800e8a0:	8922b03a 	or	r17,r17,r4
 800e8a4:	0005883a 	mov	r2,zero
 800e8a8:	003f9206 	br	800e6f4 <__alt_data_end+0xfc00e6f4>
 800e8ac:	000b883a 	mov	r5,zero
 800e8b0:	003fdc06 	br	800e824 <__alt_data_end+0xfc00e824>
 800e8b4:	000b883a 	mov	r5,zero
 800e8b8:	003ff706 	br	800e898 <__alt_data_end+0xfc00e898>

0800e8bc <__fixdfsi>:
 800e8bc:	2806d53a 	srli	r3,r5,20
 800e8c0:	00800434 	movhi	r2,16
 800e8c4:	10bfffc4 	addi	r2,r2,-1
 800e8c8:	18c1ffcc 	andi	r3,r3,2047
 800e8cc:	0180ff84 	movi	r6,1022
 800e8d0:	2884703a 	and	r2,r5,r2
 800e8d4:	280ad7fa 	srli	r5,r5,31
 800e8d8:	30c0130e 	bge	r6,r3,800e928 <__fixdfsi+0x6c>
 800e8dc:	01810744 	movi	r6,1053
 800e8e0:	30c00d16 	blt	r6,r3,800e918 <__fixdfsi+0x5c>
 800e8e4:	01810cc4 	movi	r6,1075
 800e8e8:	30cdc83a 	sub	r6,r6,r3
 800e8ec:	01c007c4 	movi	r7,31
 800e8f0:	10800434 	orhi	r2,r2,16
 800e8f4:	39800e0e 	bge	r7,r6,800e930 <__fixdfsi+0x74>
 800e8f8:	010104c4 	movi	r4,1043
 800e8fc:	20c7c83a 	sub	r3,r4,r3
 800e900:	10c6d83a 	srl	r3,r2,r3
 800e904:	29403fcc 	andi	r5,r5,255
 800e908:	0145c83a 	sub	r2,zero,r5
 800e90c:	1884f03a 	xor	r2,r3,r2
 800e910:	1145883a 	add	r2,r2,r5
 800e914:	f800283a 	ret
 800e918:	00a00034 	movhi	r2,32768
 800e91c:	10bfffc4 	addi	r2,r2,-1
 800e920:	2885883a 	add	r2,r5,r2
 800e924:	f800283a 	ret
 800e928:	0005883a 	mov	r2,zero
 800e92c:	f800283a 	ret
 800e930:	18fefb44 	addi	r3,r3,-1043
 800e934:	2188d83a 	srl	r4,r4,r6
 800e938:	10c6983a 	sll	r3,r2,r3
 800e93c:	20c6b03a 	or	r3,r4,r3
 800e940:	003ff006 	br	800e904 <__alt_data_end+0xfc00e904>

0800e944 <__floatsidf>:
 800e944:	defffd04 	addi	sp,sp,-12
 800e948:	dc400115 	stw	r17,4(sp)
 800e94c:	dfc00215 	stw	ra,8(sp)
 800e950:	dc000015 	stw	r16,0(sp)
 800e954:	2023883a 	mov	r17,r4
 800e958:	20001426 	beq	r4,zero,800e9ac <__floatsidf+0x68>
 800e95c:	2020d7fa 	srli	r16,r4,31
 800e960:	80000126 	beq	r16,zero,800e968 <__floatsidf+0x24>
 800e964:	0123c83a 	sub	r17,zero,r4
 800e968:	8809883a 	mov	r4,r17
 800e96c:	800eab80 	call	800eab8 <__clzsi2>
 800e970:	01410784 	movi	r5,1054
 800e974:	00c00284 	movi	r3,10
 800e978:	288bc83a 	sub	r5,r5,r2
 800e97c:	18801c16 	blt	r3,r2,800e9f0 <__floatsidf+0xac>
 800e980:	00c002c4 	movi	r3,11
 800e984:	1887c83a 	sub	r3,r3,r2
 800e988:	88c8d83a 	srl	r4,r17,r3
 800e98c:	00c00434 	movhi	r3,16
 800e990:	18ffffc4 	addi	r3,r3,-1
 800e994:	10800544 	addi	r2,r2,21
 800e998:	20c8703a 	and	r4,r4,r3
 800e99c:	8884983a 	sll	r2,r17,r2
 800e9a0:	28c1ffcc 	andi	r3,r5,2047
 800e9a4:	800d883a 	mov	r6,r16
 800e9a8:	00000406 	br	800e9bc <__floatsidf+0x78>
 800e9ac:	000d883a 	mov	r6,zero
 800e9b0:	0007883a 	mov	r3,zero
 800e9b4:	0009883a 	mov	r4,zero
 800e9b8:	0005883a 	mov	r2,zero
 800e9bc:	180a953a 	slli	r5,r3,20
 800e9c0:	31803fcc 	andi	r6,r6,255
 800e9c4:	00c00434 	movhi	r3,16
 800e9c8:	300c97fa 	slli	r6,r6,31
 800e9cc:	18ffffc4 	addi	r3,r3,-1
 800e9d0:	20c6703a 	and	r3,r4,r3
 800e9d4:	1946b03a 	or	r3,r3,r5
 800e9d8:	1986b03a 	or	r3,r3,r6
 800e9dc:	dfc00217 	ldw	ra,8(sp)
 800e9e0:	dc400117 	ldw	r17,4(sp)
 800e9e4:	dc000017 	ldw	r16,0(sp)
 800e9e8:	dec00304 	addi	sp,sp,12
 800e9ec:	f800283a 	ret
 800e9f0:	10fffd44 	addi	r3,r2,-11
 800e9f4:	88c8983a 	sll	r4,r17,r3
 800e9f8:	00800434 	movhi	r2,16
 800e9fc:	10bfffc4 	addi	r2,r2,-1
 800ea00:	2088703a 	and	r4,r4,r2
 800ea04:	28c1ffcc 	andi	r3,r5,2047
 800ea08:	800d883a 	mov	r6,r16
 800ea0c:	0005883a 	mov	r2,zero
 800ea10:	003fea06 	br	800e9bc <__alt_data_end+0xfc00e9bc>

0800ea14 <__floatunsidf>:
 800ea14:	defffe04 	addi	sp,sp,-8
 800ea18:	dc000015 	stw	r16,0(sp)
 800ea1c:	dfc00115 	stw	ra,4(sp)
 800ea20:	2021883a 	mov	r16,r4
 800ea24:	20001026 	beq	r4,zero,800ea68 <__floatunsidf+0x54>
 800ea28:	800eab80 	call	800eab8 <__clzsi2>
 800ea2c:	01410784 	movi	r5,1054
 800ea30:	100d883a 	mov	r6,r2
 800ea34:	288bc83a 	sub	r5,r5,r2
 800ea38:	00800284 	movi	r2,10
 800ea3c:	11801616 	blt	r2,r6,800ea98 <__floatunsidf+0x84>
 800ea40:	008002c4 	movi	r2,11
 800ea44:	1185c83a 	sub	r2,r2,r6
 800ea48:	8084d83a 	srl	r2,r16,r2
 800ea4c:	00c00434 	movhi	r3,16
 800ea50:	31c00544 	addi	r7,r6,21
 800ea54:	18ffffc4 	addi	r3,r3,-1
 800ea58:	81e0983a 	sll	r16,r16,r7
 800ea5c:	10cc703a 	and	r6,r2,r3
 800ea60:	2941ffcc 	andi	r5,r5,2047
 800ea64:	00000206 	br	800ea70 <__floatunsidf+0x5c>
 800ea68:	000b883a 	mov	r5,zero
 800ea6c:	000d883a 	mov	r6,zero
 800ea70:	280a953a 	slli	r5,r5,20
 800ea74:	00c00434 	movhi	r3,16
 800ea78:	18ffffc4 	addi	r3,r3,-1
 800ea7c:	30c6703a 	and	r3,r6,r3
 800ea80:	8005883a 	mov	r2,r16
 800ea84:	1946b03a 	or	r3,r3,r5
 800ea88:	dfc00117 	ldw	ra,4(sp)
 800ea8c:	dc000017 	ldw	r16,0(sp)
 800ea90:	dec00204 	addi	sp,sp,8
 800ea94:	f800283a 	ret
 800ea98:	31bffd44 	addi	r6,r6,-11
 800ea9c:	818c983a 	sll	r6,r16,r6
 800eaa0:	00800434 	movhi	r2,16
 800eaa4:	10bfffc4 	addi	r2,r2,-1
 800eaa8:	2941ffcc 	andi	r5,r5,2047
 800eaac:	0021883a 	mov	r16,zero
 800eab0:	308c703a 	and	r6,r6,r2
 800eab4:	003fee06 	br	800ea70 <__alt_data_end+0xfc00ea70>

0800eab8 <__clzsi2>:
 800eab8:	00bfffd4 	movui	r2,65535
 800eabc:	11000b36 	bltu	r2,r4,800eaec <__clzsi2+0x34>
 800eac0:	00803fc4 	movi	r2,255
 800eac4:	1100122e 	bgeu	r2,r4,800eb10 <__clzsi2+0x58>
 800eac8:	00c00204 	movi	r3,8
 800eacc:	01400604 	movi	r5,24
 800ead0:	20c8d83a 	srl	r4,r4,r3
 800ead4:	00820074 	movhi	r2,2049
 800ead8:	10872a04 	addi	r2,r2,7336
 800eadc:	1109883a 	add	r4,r2,r4
 800eae0:	20800003 	ldbu	r2,0(r4)
 800eae4:	2885c83a 	sub	r2,r5,r2
 800eae8:	f800283a 	ret
 800eaec:	00804034 	movhi	r2,256
 800eaf0:	10bfffc4 	addi	r2,r2,-1
 800eaf4:	11000336 	bltu	r2,r4,800eb04 <__clzsi2+0x4c>
 800eaf8:	00c00404 	movi	r3,16
 800eafc:	180b883a 	mov	r5,r3
 800eb00:	003ff306 	br	800ead0 <__alt_data_end+0xfc00ead0>
 800eb04:	00c00604 	movi	r3,24
 800eb08:	01400204 	movi	r5,8
 800eb0c:	003ff006 	br	800ead0 <__alt_data_end+0xfc00ead0>
 800eb10:	0007883a 	mov	r3,zero
 800eb14:	01400804 	movi	r5,32
 800eb18:	003fed06 	br	800ead0 <__alt_data_end+0xfc00ead0>

0800eb1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb1c:	defffe04 	addi	sp,sp,-8
 800eb20:	dfc00115 	stw	ra,4(sp)
 800eb24:	df000015 	stw	fp,0(sp)
 800eb28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb2c:	00820074 	movhi	r2,2049
 800eb30:	108e2d04 	addi	r2,r2,14516
 800eb34:	10800017 	ldw	r2,0(r2)
 800eb38:	10000526 	beq	r2,zero,800eb50 <alt_get_errno+0x34>
 800eb3c:	00820074 	movhi	r2,2049
 800eb40:	108e2d04 	addi	r2,r2,14516
 800eb44:	10800017 	ldw	r2,0(r2)
 800eb48:	103ee83a 	callr	r2
 800eb4c:	00000206 	br	800eb58 <alt_get_errno+0x3c>
 800eb50:	00820074 	movhi	r2,2049
 800eb54:	1094f404 	addi	r2,r2,21456
}
 800eb58:	e037883a 	mov	sp,fp
 800eb5c:	dfc00117 	ldw	ra,4(sp)
 800eb60:	df000017 	ldw	fp,0(sp)
 800eb64:	dec00204 	addi	sp,sp,8
 800eb68:	f800283a 	ret

0800eb6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800eb6c:	defffb04 	addi	sp,sp,-20
 800eb70:	dfc00415 	stw	ra,16(sp)
 800eb74:	df000315 	stw	fp,12(sp)
 800eb78:	df000304 	addi	fp,sp,12
 800eb7c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800eb80:	e0bfff17 	ldw	r2,-4(fp)
 800eb84:	10000816 	blt	r2,zero,800eba8 <close+0x3c>
 800eb88:	e13fff17 	ldw	r4,-4(fp)
 800eb8c:	01400304 	movi	r5,12
 800eb90:	800c2f80 	call	800c2f8 <__mulsi3>
 800eb94:	1007883a 	mov	r3,r2
 800eb98:	00820074 	movhi	r2,2049
 800eb9c:	1089aa04 	addi	r2,r2,9896
 800eba0:	1885883a 	add	r2,r3,r2
 800eba4:	00000106 	br	800ebac <close+0x40>
 800eba8:	0005883a 	mov	r2,zero
 800ebac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800ebb0:	e0bffd17 	ldw	r2,-12(fp)
 800ebb4:	10001926 	beq	r2,zero,800ec1c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ebb8:	e0bffd17 	ldw	r2,-12(fp)
 800ebbc:	10800017 	ldw	r2,0(r2)
 800ebc0:	10800417 	ldw	r2,16(r2)
 800ebc4:	10000626 	beq	r2,zero,800ebe0 <close+0x74>
 800ebc8:	e0bffd17 	ldw	r2,-12(fp)
 800ebcc:	10800017 	ldw	r2,0(r2)
 800ebd0:	10800417 	ldw	r2,16(r2)
 800ebd4:	e13ffd17 	ldw	r4,-12(fp)
 800ebd8:	103ee83a 	callr	r2
 800ebdc:	00000106 	br	800ebe4 <close+0x78>
 800ebe0:	0005883a 	mov	r2,zero
 800ebe4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ebe8:	e13fff17 	ldw	r4,-4(fp)
 800ebec:	800f2940 	call	800f294 <alt_release_fd>
    if (rval < 0)
 800ebf0:	e0bffe17 	ldw	r2,-8(fp)
 800ebf4:	1000070e 	bge	r2,zero,800ec14 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800ebf8:	800eb1c0 	call	800eb1c <alt_get_errno>
 800ebfc:	1007883a 	mov	r3,r2
 800ec00:	e0bffe17 	ldw	r2,-8(fp)
 800ec04:	0085c83a 	sub	r2,zero,r2
 800ec08:	18800015 	stw	r2,0(r3)
      return -1;
 800ec0c:	00bfffc4 	movi	r2,-1
 800ec10:	00000706 	br	800ec30 <close+0xc4>
    }
    return 0;
 800ec14:	0005883a 	mov	r2,zero
 800ec18:	00000506 	br	800ec30 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ec1c:	800eb1c0 	call	800eb1c <alt_get_errno>
 800ec20:	1007883a 	mov	r3,r2
 800ec24:	00801444 	movi	r2,81
 800ec28:	18800015 	stw	r2,0(r3)
    return -1;
 800ec2c:	00bfffc4 	movi	r2,-1
  }
}
 800ec30:	e037883a 	mov	sp,fp
 800ec34:	dfc00117 	ldw	ra,4(sp)
 800ec38:	df000017 	ldw	fp,0(sp)
 800ec3c:	dec00204 	addi	sp,sp,8
 800ec40:	f800283a 	ret

0800ec44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ec44:	defffc04 	addi	sp,sp,-16
 800ec48:	df000315 	stw	fp,12(sp)
 800ec4c:	df000304 	addi	fp,sp,12
 800ec50:	e13ffd15 	stw	r4,-12(fp)
 800ec54:	e17ffe15 	stw	r5,-8(fp)
 800ec58:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ec5c:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec60:	e037883a 	mov	sp,fp
 800ec64:	df000017 	ldw	fp,0(sp)
 800ec68:	dec00104 	addi	sp,sp,4
 800ec6c:	f800283a 	ret

0800ec70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ec70:	defffe04 	addi	sp,sp,-8
 800ec74:	dfc00115 	stw	ra,4(sp)
 800ec78:	df000015 	stw	fp,0(sp)
 800ec7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ec80:	00820074 	movhi	r2,2049
 800ec84:	108e2d04 	addi	r2,r2,14516
 800ec88:	10800017 	ldw	r2,0(r2)
 800ec8c:	10000526 	beq	r2,zero,800eca4 <alt_get_errno+0x34>
 800ec90:	00820074 	movhi	r2,2049
 800ec94:	108e2d04 	addi	r2,r2,14516
 800ec98:	10800017 	ldw	r2,0(r2)
 800ec9c:	103ee83a 	callr	r2
 800eca0:	00000206 	br	800ecac <alt_get_errno+0x3c>
 800eca4:	00820074 	movhi	r2,2049
 800eca8:	1094f404 	addi	r2,r2,21456
}
 800ecac:	e037883a 	mov	sp,fp
 800ecb0:	dfc00117 	ldw	ra,4(sp)
 800ecb4:	df000017 	ldw	fp,0(sp)
 800ecb8:	dec00204 	addi	sp,sp,8
 800ecbc:	f800283a 	ret

0800ecc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ecc0:	defffb04 	addi	sp,sp,-20
 800ecc4:	dfc00415 	stw	ra,16(sp)
 800ecc8:	df000315 	stw	fp,12(sp)
 800eccc:	df000304 	addi	fp,sp,12
 800ecd0:	e13ffe15 	stw	r4,-8(fp)
 800ecd4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ecd8:	e0bffe17 	ldw	r2,-8(fp)
 800ecdc:	10000816 	blt	r2,zero,800ed00 <fstat+0x40>
 800ece0:	e13ffe17 	ldw	r4,-8(fp)
 800ece4:	01400304 	movi	r5,12
 800ece8:	800c2f80 	call	800c2f8 <__mulsi3>
 800ecec:	1007883a 	mov	r3,r2
 800ecf0:	00820074 	movhi	r2,2049
 800ecf4:	1089aa04 	addi	r2,r2,9896
 800ecf8:	1885883a 	add	r2,r3,r2
 800ecfc:	00000106 	br	800ed04 <fstat+0x44>
 800ed00:	0005883a 	mov	r2,zero
 800ed04:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800ed08:	e0bffd17 	ldw	r2,-12(fp)
 800ed0c:	10001026 	beq	r2,zero,800ed50 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800ed10:	e0bffd17 	ldw	r2,-12(fp)
 800ed14:	10800017 	ldw	r2,0(r2)
 800ed18:	10800817 	ldw	r2,32(r2)
 800ed1c:	10000726 	beq	r2,zero,800ed3c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800ed20:	e0bffd17 	ldw	r2,-12(fp)
 800ed24:	10800017 	ldw	r2,0(r2)
 800ed28:	10800817 	ldw	r2,32(r2)
 800ed2c:	e13ffd17 	ldw	r4,-12(fp)
 800ed30:	e17fff17 	ldw	r5,-4(fp)
 800ed34:	103ee83a 	callr	r2
 800ed38:	00000a06 	br	800ed64 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ed3c:	e0bfff17 	ldw	r2,-4(fp)
 800ed40:	00c80004 	movi	r3,8192
 800ed44:	10c00115 	stw	r3,4(r2)
      return 0;
 800ed48:	0005883a 	mov	r2,zero
 800ed4c:	00000506 	br	800ed64 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ed50:	800ec700 	call	800ec70 <alt_get_errno>
 800ed54:	1007883a 	mov	r3,r2
 800ed58:	00801444 	movi	r2,81
 800ed5c:	18800015 	stw	r2,0(r3)
    return -1;
 800ed60:	00bfffc4 	movi	r2,-1
  }
}
 800ed64:	e037883a 	mov	sp,fp
 800ed68:	dfc00117 	ldw	ra,4(sp)
 800ed6c:	df000017 	ldw	fp,0(sp)
 800ed70:	dec00204 	addi	sp,sp,8
 800ed74:	f800283a 	ret

0800ed78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ed78:	defffe04 	addi	sp,sp,-8
 800ed7c:	dfc00115 	stw	ra,4(sp)
 800ed80:	df000015 	stw	fp,0(sp)
 800ed84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ed88:	00820074 	movhi	r2,2049
 800ed8c:	108e2d04 	addi	r2,r2,14516
 800ed90:	10800017 	ldw	r2,0(r2)
 800ed94:	10000526 	beq	r2,zero,800edac <alt_get_errno+0x34>
 800ed98:	00820074 	movhi	r2,2049
 800ed9c:	108e2d04 	addi	r2,r2,14516
 800eda0:	10800017 	ldw	r2,0(r2)
 800eda4:	103ee83a 	callr	r2
 800eda8:	00000206 	br	800edb4 <alt_get_errno+0x3c>
 800edac:	00820074 	movhi	r2,2049
 800edb0:	1094f404 	addi	r2,r2,21456
}
 800edb4:	e037883a 	mov	sp,fp
 800edb8:	dfc00117 	ldw	ra,4(sp)
 800edbc:	df000017 	ldw	fp,0(sp)
 800edc0:	dec00204 	addi	sp,sp,8
 800edc4:	f800283a 	ret

0800edc8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800edc8:	deffed04 	addi	sp,sp,-76
 800edcc:	dfc01215 	stw	ra,72(sp)
 800edd0:	df001115 	stw	fp,68(sp)
 800edd4:	df001104 	addi	fp,sp,68
 800edd8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eddc:	e0bfff17 	ldw	r2,-4(fp)
 800ede0:	10000816 	blt	r2,zero,800ee04 <isatty+0x3c>
 800ede4:	e13fff17 	ldw	r4,-4(fp)
 800ede8:	01400304 	movi	r5,12
 800edec:	800c2f80 	call	800c2f8 <__mulsi3>
 800edf0:	1007883a 	mov	r3,r2
 800edf4:	00820074 	movhi	r2,2049
 800edf8:	1089aa04 	addi	r2,r2,9896
 800edfc:	1885883a 	add	r2,r3,r2
 800ee00:	00000106 	br	800ee08 <isatty+0x40>
 800ee04:	0005883a 	mov	r2,zero
 800ee08:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ee0c:	e0bfef17 	ldw	r2,-68(fp)
 800ee10:	10000e26 	beq	r2,zero,800ee4c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ee14:	e0bfef17 	ldw	r2,-68(fp)
 800ee18:	10800017 	ldw	r2,0(r2)
 800ee1c:	10800817 	ldw	r2,32(r2)
 800ee20:	1000021e 	bne	r2,zero,800ee2c <isatty+0x64>
    {
      return 1;
 800ee24:	00800044 	movi	r2,1
 800ee28:	00000d06 	br	800ee60 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ee2c:	e0bff004 	addi	r2,fp,-64
 800ee30:	e13fff17 	ldw	r4,-4(fp)
 800ee34:	100b883a 	mov	r5,r2
 800ee38:	800ecc00 	call	800ecc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ee3c:	e0bff117 	ldw	r2,-60(fp)
 800ee40:	10880020 	cmpeqi	r2,r2,8192
 800ee44:	10803fcc 	andi	r2,r2,255
 800ee48:	00000506 	br	800ee60 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ee4c:	800ed780 	call	800ed78 <alt_get_errno>
 800ee50:	1007883a 	mov	r3,r2
 800ee54:	00801444 	movi	r2,81
 800ee58:	18800015 	stw	r2,0(r3)
    return 0;
 800ee5c:	0005883a 	mov	r2,zero
  }
}
 800ee60:	e037883a 	mov	sp,fp
 800ee64:	dfc00117 	ldw	ra,4(sp)
 800ee68:	df000017 	ldw	fp,0(sp)
 800ee6c:	dec00204 	addi	sp,sp,8
 800ee70:	f800283a 	ret

0800ee74 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800ee74:	defffc04 	addi	sp,sp,-16
 800ee78:	df000315 	stw	fp,12(sp)
 800ee7c:	df000304 	addi	fp,sp,12
 800ee80:	e13ffd15 	stw	r4,-12(fp)
 800ee84:	e17ffe15 	stw	r5,-8(fp)
 800ee88:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800ee8c:	e0fffe17 	ldw	r3,-8(fp)
 800ee90:	e0bffd17 	ldw	r2,-12(fp)
 800ee94:	18800c26 	beq	r3,r2,800eec8 <alt_load_section+0x54>
  {
    while( to != end )
 800ee98:	00000806 	br	800eebc <alt_load_section+0x48>
    {
      *to++ = *from++;
 800ee9c:	e0bffe17 	ldw	r2,-8(fp)
 800eea0:	10c00104 	addi	r3,r2,4
 800eea4:	e0fffe15 	stw	r3,-8(fp)
 800eea8:	e0fffd17 	ldw	r3,-12(fp)
 800eeac:	19000104 	addi	r4,r3,4
 800eeb0:	e13ffd15 	stw	r4,-12(fp)
 800eeb4:	18c00017 	ldw	r3,0(r3)
 800eeb8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800eebc:	e0fffe17 	ldw	r3,-8(fp)
 800eec0:	e0bfff17 	ldw	r2,-4(fp)
 800eec4:	18bff51e 	bne	r3,r2,800ee9c <__alt_data_end+0xfc00ee9c>
    {
      *to++ = *from++;
    }
  }
}
 800eec8:	e037883a 	mov	sp,fp
 800eecc:	df000017 	ldw	fp,0(sp)
 800eed0:	dec00104 	addi	sp,sp,4
 800eed4:	f800283a 	ret

0800eed8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800eed8:	defffe04 	addi	sp,sp,-8
 800eedc:	dfc00115 	stw	ra,4(sp)
 800eee0:	df000015 	stw	fp,0(sp)
 800eee4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800eee8:	01020074 	movhi	r4,2049
 800eeec:	210e3204 	addi	r4,r4,14536
 800eef0:	01420074 	movhi	r5,2049
 800eef4:	29477704 	addi	r5,r5,7644
 800eef8:	01820074 	movhi	r6,2049
 800eefc:	318e3204 	addi	r6,r6,14536
 800ef00:	800ee740 	call	800ee74 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800ef04:	01020034 	movhi	r4,2048
 800ef08:	21000804 	addi	r4,r4,32
 800ef0c:	01420034 	movhi	r5,2048
 800ef10:	29400804 	addi	r5,r5,32
 800ef14:	01820034 	movhi	r6,2048
 800ef18:	31806f04 	addi	r6,r6,444
 800ef1c:	800ee740 	call	800ee74 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ef20:	01020074 	movhi	r4,2049
 800ef24:	2104d904 	addi	r4,r4,4964
 800ef28:	01420074 	movhi	r5,2049
 800ef2c:	2944d904 	addi	r5,r5,4964
 800ef30:	01820074 	movhi	r6,2049
 800ef34:	31877704 	addi	r6,r6,7644
 800ef38:	800ee740 	call	800ee74 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ef3c:	80102dc0 	call	80102dc <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ef40:	80104a40 	call	80104a4 <alt_icache_flush_all>
}
 800ef44:	e037883a 	mov	sp,fp
 800ef48:	dfc00117 	ldw	ra,4(sp)
 800ef4c:	df000017 	ldw	fp,0(sp)
 800ef50:	dec00204 	addi	sp,sp,8
 800ef54:	f800283a 	ret

0800ef58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ef58:	defffe04 	addi	sp,sp,-8
 800ef5c:	dfc00115 	stw	ra,4(sp)
 800ef60:	df000015 	stw	fp,0(sp)
 800ef64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ef68:	00820074 	movhi	r2,2049
 800ef6c:	108e2d04 	addi	r2,r2,14516
 800ef70:	10800017 	ldw	r2,0(r2)
 800ef74:	10000526 	beq	r2,zero,800ef8c <alt_get_errno+0x34>
 800ef78:	00820074 	movhi	r2,2049
 800ef7c:	108e2d04 	addi	r2,r2,14516
 800ef80:	10800017 	ldw	r2,0(r2)
 800ef84:	103ee83a 	callr	r2
 800ef88:	00000206 	br	800ef94 <alt_get_errno+0x3c>
 800ef8c:	00820074 	movhi	r2,2049
 800ef90:	1094f404 	addi	r2,r2,21456
}
 800ef94:	e037883a 	mov	sp,fp
 800ef98:	dfc00117 	ldw	ra,4(sp)
 800ef9c:	df000017 	ldw	fp,0(sp)
 800efa0:	dec00204 	addi	sp,sp,8
 800efa4:	f800283a 	ret

0800efa8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800efa8:	defff904 	addi	sp,sp,-28
 800efac:	dfc00615 	stw	ra,24(sp)
 800efb0:	df000515 	stw	fp,20(sp)
 800efb4:	df000504 	addi	fp,sp,20
 800efb8:	e13ffd15 	stw	r4,-12(fp)
 800efbc:	e17ffe15 	stw	r5,-8(fp)
 800efc0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800efc4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800efc8:	e0bffd17 	ldw	r2,-12(fp)
 800efcc:	10000816 	blt	r2,zero,800eff0 <lseek+0x48>
 800efd0:	e13ffd17 	ldw	r4,-12(fp)
 800efd4:	01400304 	movi	r5,12
 800efd8:	800c2f80 	call	800c2f8 <__mulsi3>
 800efdc:	1007883a 	mov	r3,r2
 800efe0:	00820074 	movhi	r2,2049
 800efe4:	1089aa04 	addi	r2,r2,9896
 800efe8:	1885883a 	add	r2,r3,r2
 800efec:	00000106 	br	800eff4 <lseek+0x4c>
 800eff0:	0005883a 	mov	r2,zero
 800eff4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800eff8:	e0bffc17 	ldw	r2,-16(fp)
 800effc:	10001026 	beq	r2,zero,800f040 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f000:	e0bffc17 	ldw	r2,-16(fp)
 800f004:	10800017 	ldw	r2,0(r2)
 800f008:	10800717 	ldw	r2,28(r2)
 800f00c:	10000926 	beq	r2,zero,800f034 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f010:	e0bffc17 	ldw	r2,-16(fp)
 800f014:	10800017 	ldw	r2,0(r2)
 800f018:	10800717 	ldw	r2,28(r2)
 800f01c:	e13ffc17 	ldw	r4,-16(fp)
 800f020:	e17ffe17 	ldw	r5,-8(fp)
 800f024:	e1bfff17 	ldw	r6,-4(fp)
 800f028:	103ee83a 	callr	r2
 800f02c:	e0bffb15 	stw	r2,-20(fp)
 800f030:	00000506 	br	800f048 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f034:	00bfde84 	movi	r2,-134
 800f038:	e0bffb15 	stw	r2,-20(fp)
 800f03c:	00000206 	br	800f048 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f040:	00bfebc4 	movi	r2,-81
 800f044:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f048:	e0bffb17 	ldw	r2,-20(fp)
 800f04c:	1000070e 	bge	r2,zero,800f06c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800f050:	800ef580 	call	800ef58 <alt_get_errno>
 800f054:	1007883a 	mov	r3,r2
 800f058:	e0bffb17 	ldw	r2,-20(fp)
 800f05c:	0085c83a 	sub	r2,zero,r2
 800f060:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f064:	00bfffc4 	movi	r2,-1
 800f068:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f06c:	e0bffb17 	ldw	r2,-20(fp)
}
 800f070:	e037883a 	mov	sp,fp
 800f074:	dfc00117 	ldw	ra,4(sp)
 800f078:	df000017 	ldw	fp,0(sp)
 800f07c:	dec00204 	addi	sp,sp,8
 800f080:	f800283a 	ret

0800f084 <alt_main>:
 800f084:	defffd04 	addi	sp,sp,-12
 800f088:	dfc00215 	stw	ra,8(sp)
 800f08c:	df000115 	stw	fp,4(sp)
 800f090:	df000104 	addi	fp,sp,4
 800f094:	0009883a 	mov	r4,zero
 800f098:	800f57c0 	call	800f57c <alt_irq_init>
 800f09c:	0001883a 	nop
 800f0a0:	800f5b00 	call	800f5b0 <alt_sys_init>
 800f0a4:	01820074 	movhi	r6,2049
 800f0a8:	31876d04 	addi	r6,r6,7604
 800f0ac:	01420074 	movhi	r5,2049
 800f0b0:	29476d04 	addi	r5,r5,7604
 800f0b4:	01020074 	movhi	r4,2049
 800f0b8:	21076d04 	addi	r4,r4,7604
 800f0bc:	80108700 	call	8010870 <alt_io_redirect>
 800f0c0:	80103ec0 	call	80103ec <_do_ctors>
 800f0c4:	01020074 	movhi	r4,2049
 800f0c8:	21011204 	addi	r4,r4,1096
 800f0cc:	8010fc00 	call	8010fc0 <atexit>
 800f0d0:	d0a6d317 	ldw	r2,-25780(gp)
 800f0d4:	d0e6d417 	ldw	r3,-25776(gp)
 800f0d8:	d126d517 	ldw	r4,-25772(gp)
 800f0dc:	200d883a 	mov	r6,r4
 800f0e0:	180b883a 	mov	r5,r3
 800f0e4:	1009883a 	mov	r4,r2
 800f0e8:	80003280 	call	8000328 <main>
 800f0ec:	e0bfff15 	stw	r2,-4(fp)
 800f0f0:	01000044 	movi	r4,1
 800f0f4:	800eb6c0 	call	800eb6c <close>
 800f0f8:	e13fff17 	ldw	r4,-4(fp)
 800f0fc:	8010fd40 	call	8010fd4 <exit>

0800f100 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f100:	defffe04 	addi	sp,sp,-8
 800f104:	df000115 	stw	fp,4(sp)
 800f108:	df000104 	addi	fp,sp,4
 800f10c:	e13fff15 	stw	r4,-4(fp)
}
 800f110:	e037883a 	mov	sp,fp
 800f114:	df000017 	ldw	fp,0(sp)
 800f118:	dec00104 	addi	sp,sp,4
 800f11c:	f800283a 	ret

0800f120 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f120:	defffe04 	addi	sp,sp,-8
 800f124:	df000115 	stw	fp,4(sp)
 800f128:	df000104 	addi	fp,sp,4
 800f12c:	e13fff15 	stw	r4,-4(fp)
}
 800f130:	e037883a 	mov	sp,fp
 800f134:	df000017 	ldw	fp,0(sp)
 800f138:	dec00104 	addi	sp,sp,4
 800f13c:	f800283a 	ret

0800f140 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f140:	defffe04 	addi	sp,sp,-8
 800f144:	dfc00115 	stw	ra,4(sp)
 800f148:	df000015 	stw	fp,0(sp)
 800f14c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f150:	00820074 	movhi	r2,2049
 800f154:	108e2d04 	addi	r2,r2,14516
 800f158:	10800017 	ldw	r2,0(r2)
 800f15c:	10000526 	beq	r2,zero,800f174 <alt_get_errno+0x34>
 800f160:	00820074 	movhi	r2,2049
 800f164:	108e2d04 	addi	r2,r2,14516
 800f168:	10800017 	ldw	r2,0(r2)
 800f16c:	103ee83a 	callr	r2
 800f170:	00000206 	br	800f17c <alt_get_errno+0x3c>
 800f174:	00820074 	movhi	r2,2049
 800f178:	1094f404 	addi	r2,r2,21456
}
 800f17c:	e037883a 	mov	sp,fp
 800f180:	dfc00117 	ldw	ra,4(sp)
 800f184:	df000017 	ldw	fp,0(sp)
 800f188:	dec00204 	addi	sp,sp,8
 800f18c:	f800283a 	ret

0800f190 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f190:	defff904 	addi	sp,sp,-28
 800f194:	dfc00615 	stw	ra,24(sp)
 800f198:	df000515 	stw	fp,20(sp)
 800f19c:	df000504 	addi	fp,sp,20
 800f1a0:	e13ffd15 	stw	r4,-12(fp)
 800f1a4:	e17ffe15 	stw	r5,-8(fp)
 800f1a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f1ac:	e0bffd17 	ldw	r2,-12(fp)
 800f1b0:	10000816 	blt	r2,zero,800f1d4 <read+0x44>
 800f1b4:	e13ffd17 	ldw	r4,-12(fp)
 800f1b8:	01400304 	movi	r5,12
 800f1bc:	800c2f80 	call	800c2f8 <__mulsi3>
 800f1c0:	1007883a 	mov	r3,r2
 800f1c4:	00820074 	movhi	r2,2049
 800f1c8:	1089aa04 	addi	r2,r2,9896
 800f1cc:	1885883a 	add	r2,r3,r2
 800f1d0:	00000106 	br	800f1d8 <read+0x48>
 800f1d4:	0005883a 	mov	r2,zero
 800f1d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f1dc:	e0bffb17 	ldw	r2,-20(fp)
 800f1e0:	10002226 	beq	r2,zero,800f26c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f1e4:	e0bffb17 	ldw	r2,-20(fp)
 800f1e8:	10800217 	ldw	r2,8(r2)
 800f1ec:	108000cc 	andi	r2,r2,3
 800f1f0:	10800060 	cmpeqi	r2,r2,1
 800f1f4:	1000181e 	bne	r2,zero,800f258 <read+0xc8>
        (fd->dev->read))
 800f1f8:	e0bffb17 	ldw	r2,-20(fp)
 800f1fc:	10800017 	ldw	r2,0(r2)
 800f200:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f204:	10001426 	beq	r2,zero,800f258 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f208:	e0bffb17 	ldw	r2,-20(fp)
 800f20c:	10800017 	ldw	r2,0(r2)
 800f210:	10800517 	ldw	r2,20(r2)
 800f214:	e0ffff17 	ldw	r3,-4(fp)
 800f218:	e13ffb17 	ldw	r4,-20(fp)
 800f21c:	e17ffe17 	ldw	r5,-8(fp)
 800f220:	180d883a 	mov	r6,r3
 800f224:	103ee83a 	callr	r2
 800f228:	e0bffc15 	stw	r2,-16(fp)
 800f22c:	e0bffc17 	ldw	r2,-16(fp)
 800f230:	1000070e 	bge	r2,zero,800f250 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f234:	800f1400 	call	800f140 <alt_get_errno>
 800f238:	1007883a 	mov	r3,r2
 800f23c:	e0bffc17 	ldw	r2,-16(fp)
 800f240:	0085c83a 	sub	r2,zero,r2
 800f244:	18800015 	stw	r2,0(r3)
          return -1;
 800f248:	00bfffc4 	movi	r2,-1
 800f24c:	00000c06 	br	800f280 <read+0xf0>
        }
        return rval;
 800f250:	e0bffc17 	ldw	r2,-16(fp)
 800f254:	00000a06 	br	800f280 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f258:	800f1400 	call	800f140 <alt_get_errno>
 800f25c:	1007883a 	mov	r3,r2
 800f260:	00800344 	movi	r2,13
 800f264:	18800015 	stw	r2,0(r3)
 800f268:	00000406 	br	800f27c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f26c:	800f1400 	call	800f140 <alt_get_errno>
 800f270:	1007883a 	mov	r3,r2
 800f274:	00801444 	movi	r2,81
 800f278:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f27c:	00bfffc4 	movi	r2,-1
}
 800f280:	e037883a 	mov	sp,fp
 800f284:	dfc00117 	ldw	ra,4(sp)
 800f288:	df000017 	ldw	fp,0(sp)
 800f28c:	dec00204 	addi	sp,sp,8
 800f290:	f800283a 	ret

0800f294 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f294:	defffc04 	addi	sp,sp,-16
 800f298:	dfc00315 	stw	ra,12(sp)
 800f29c:	df000215 	stw	fp,8(sp)
 800f2a0:	dc000115 	stw	r16,4(sp)
 800f2a4:	df000204 	addi	fp,sp,8
 800f2a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f2ac:	e0bffe17 	ldw	r2,-8(fp)
 800f2b0:	108000d0 	cmplti	r2,r2,3
 800f2b4:	1000111e 	bne	r2,zero,800f2fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f2b8:	04020074 	movhi	r16,2049
 800f2bc:	8409aa04 	addi	r16,r16,9896
 800f2c0:	e0bffe17 	ldw	r2,-8(fp)
 800f2c4:	1009883a 	mov	r4,r2
 800f2c8:	01400304 	movi	r5,12
 800f2cc:	800c2f80 	call	800c2f8 <__mulsi3>
 800f2d0:	8085883a 	add	r2,r16,r2
 800f2d4:	10800204 	addi	r2,r2,8
 800f2d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f2dc:	04020074 	movhi	r16,2049
 800f2e0:	8409aa04 	addi	r16,r16,9896
 800f2e4:	e0bffe17 	ldw	r2,-8(fp)
 800f2e8:	1009883a 	mov	r4,r2
 800f2ec:	01400304 	movi	r5,12
 800f2f0:	800c2f80 	call	800c2f8 <__mulsi3>
 800f2f4:	8085883a 	add	r2,r16,r2
 800f2f8:	10000015 	stw	zero,0(r2)
  }
}
 800f2fc:	e6ffff04 	addi	sp,fp,-4
 800f300:	dfc00217 	ldw	ra,8(sp)
 800f304:	df000117 	ldw	fp,4(sp)
 800f308:	dc000017 	ldw	r16,0(sp)
 800f30c:	dec00304 	addi	sp,sp,12
 800f310:	f800283a 	ret

0800f314 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f314:	defff904 	addi	sp,sp,-28
 800f318:	df000615 	stw	fp,24(sp)
 800f31c:	df000604 	addi	fp,sp,24
 800f320:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f324:	0005303a 	rdctl	r2,status
 800f328:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f32c:	e0fffc17 	ldw	r3,-16(fp)
 800f330:	00bfff84 	movi	r2,-2
 800f334:	1884703a 	and	r2,r3,r2
 800f338:	1001703a 	wrctl	status,r2
  
  return context;
 800f33c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f340:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f344:	d0a00c17 	ldw	r2,-32720(gp)
 800f348:	10c000c4 	addi	r3,r2,3
 800f34c:	00bfff04 	movi	r2,-4
 800f350:	1884703a 	and	r2,r3,r2
 800f354:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f358:	d0e00c17 	ldw	r3,-32720(gp)
 800f35c:	e0bfff17 	ldw	r2,-4(fp)
 800f360:	1887883a 	add	r3,r3,r2
 800f364:	00830034 	movhi	r2,3072
 800f368:	10800004 	addi	r2,r2,0
 800f36c:	10c0062e 	bgeu	r2,r3,800f388 <sbrk+0x74>
 800f370:	e0bffa17 	ldw	r2,-24(fp)
 800f374:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f378:	e0bffd17 	ldw	r2,-12(fp)
 800f37c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f380:	00bfffc4 	movi	r2,-1
 800f384:	00000b06 	br	800f3b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f388:	d0a00c17 	ldw	r2,-32720(gp)
 800f38c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f390:	d0e00c17 	ldw	r3,-32720(gp)
 800f394:	e0bfff17 	ldw	r2,-4(fp)
 800f398:	1885883a 	add	r2,r3,r2
 800f39c:	d0a00c15 	stw	r2,-32720(gp)
 800f3a0:	e0bffa17 	ldw	r2,-24(fp)
 800f3a4:	e0bffe15 	stw	r2,-8(fp)
 800f3a8:	e0bffe17 	ldw	r2,-8(fp)
 800f3ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f3b0:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f3b4:	e037883a 	mov	sp,fp
 800f3b8:	df000017 	ldw	fp,0(sp)
 800f3bc:	dec00104 	addi	sp,sp,4
 800f3c0:	f800283a 	ret

0800f3c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f3c4:	defffd04 	addi	sp,sp,-12
 800f3c8:	dfc00215 	stw	ra,8(sp)
 800f3cc:	df000115 	stw	fp,4(sp)
 800f3d0:	df000104 	addi	fp,sp,4
 800f3d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f3d8:	e13fff17 	ldw	r4,-4(fp)
 800f3dc:	80101840 	call	8010184 <alt_busy_sleep>
}
 800f3e0:	e037883a 	mov	sp,fp
 800f3e4:	dfc00117 	ldw	ra,4(sp)
 800f3e8:	df000017 	ldw	fp,0(sp)
 800f3ec:	dec00204 	addi	sp,sp,8
 800f3f0:	f800283a 	ret

0800f3f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f3f4:	defffe04 	addi	sp,sp,-8
 800f3f8:	dfc00115 	stw	ra,4(sp)
 800f3fc:	df000015 	stw	fp,0(sp)
 800f400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f404:	00820074 	movhi	r2,2049
 800f408:	108e2d04 	addi	r2,r2,14516
 800f40c:	10800017 	ldw	r2,0(r2)
 800f410:	10000526 	beq	r2,zero,800f428 <alt_get_errno+0x34>
 800f414:	00820074 	movhi	r2,2049
 800f418:	108e2d04 	addi	r2,r2,14516
 800f41c:	10800017 	ldw	r2,0(r2)
 800f420:	103ee83a 	callr	r2
 800f424:	00000206 	br	800f430 <alt_get_errno+0x3c>
 800f428:	00820074 	movhi	r2,2049
 800f42c:	1094f404 	addi	r2,r2,21456
}
 800f430:	e037883a 	mov	sp,fp
 800f434:	dfc00117 	ldw	ra,4(sp)
 800f438:	df000017 	ldw	fp,0(sp)
 800f43c:	dec00204 	addi	sp,sp,8
 800f440:	f800283a 	ret

0800f444 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f444:	defff904 	addi	sp,sp,-28
 800f448:	dfc00615 	stw	ra,24(sp)
 800f44c:	df000515 	stw	fp,20(sp)
 800f450:	df000504 	addi	fp,sp,20
 800f454:	e13ffd15 	stw	r4,-12(fp)
 800f458:	e17ffe15 	stw	r5,-8(fp)
 800f45c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f460:	e0bffd17 	ldw	r2,-12(fp)
 800f464:	10000816 	blt	r2,zero,800f488 <write+0x44>
 800f468:	e13ffd17 	ldw	r4,-12(fp)
 800f46c:	01400304 	movi	r5,12
 800f470:	800c2f80 	call	800c2f8 <__mulsi3>
 800f474:	1007883a 	mov	r3,r2
 800f478:	00820074 	movhi	r2,2049
 800f47c:	1089aa04 	addi	r2,r2,9896
 800f480:	1885883a 	add	r2,r3,r2
 800f484:	00000106 	br	800f48c <write+0x48>
 800f488:	0005883a 	mov	r2,zero
 800f48c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f490:	e0bffb17 	ldw	r2,-20(fp)
 800f494:	10002126 	beq	r2,zero,800f51c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f498:	e0bffb17 	ldw	r2,-20(fp)
 800f49c:	10800217 	ldw	r2,8(r2)
 800f4a0:	108000cc 	andi	r2,r2,3
 800f4a4:	10001826 	beq	r2,zero,800f508 <write+0xc4>
 800f4a8:	e0bffb17 	ldw	r2,-20(fp)
 800f4ac:	10800017 	ldw	r2,0(r2)
 800f4b0:	10800617 	ldw	r2,24(r2)
 800f4b4:	10001426 	beq	r2,zero,800f508 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f4b8:	e0bffb17 	ldw	r2,-20(fp)
 800f4bc:	10800017 	ldw	r2,0(r2)
 800f4c0:	10800617 	ldw	r2,24(r2)
 800f4c4:	e0ffff17 	ldw	r3,-4(fp)
 800f4c8:	e13ffb17 	ldw	r4,-20(fp)
 800f4cc:	e17ffe17 	ldw	r5,-8(fp)
 800f4d0:	180d883a 	mov	r6,r3
 800f4d4:	103ee83a 	callr	r2
 800f4d8:	e0bffc15 	stw	r2,-16(fp)
 800f4dc:	e0bffc17 	ldw	r2,-16(fp)
 800f4e0:	1000070e 	bge	r2,zero,800f500 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800f4e4:	800f3f40 	call	800f3f4 <alt_get_errno>
 800f4e8:	1007883a 	mov	r3,r2
 800f4ec:	e0bffc17 	ldw	r2,-16(fp)
 800f4f0:	0085c83a 	sub	r2,zero,r2
 800f4f4:	18800015 	stw	r2,0(r3)
        return -1;
 800f4f8:	00bfffc4 	movi	r2,-1
 800f4fc:	00000c06 	br	800f530 <write+0xec>
      }
      return rval;
 800f500:	e0bffc17 	ldw	r2,-16(fp)
 800f504:	00000a06 	br	800f530 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f508:	800f3f40 	call	800f3f4 <alt_get_errno>
 800f50c:	1007883a 	mov	r3,r2
 800f510:	00800344 	movi	r2,13
 800f514:	18800015 	stw	r2,0(r3)
 800f518:	00000406 	br	800f52c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f51c:	800f3f40 	call	800f3f4 <alt_get_errno>
 800f520:	1007883a 	mov	r3,r2
 800f524:	00801444 	movi	r2,81
 800f528:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f52c:	00bfffc4 	movi	r2,-1
}
 800f530:	e037883a 	mov	sp,fp
 800f534:	dfc00117 	ldw	ra,4(sp)
 800f538:	df000017 	ldw	fp,0(sp)
 800f53c:	dec00204 	addi	sp,sp,8
 800f540:	f800283a 	ret

0800f544 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f544:	defffd04 	addi	sp,sp,-12
 800f548:	dfc00215 	stw	ra,8(sp)
 800f54c:	df000115 	stw	fp,4(sp)
 800f550:	df000104 	addi	fp,sp,4
 800f554:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f558:	e13fff17 	ldw	r4,-4(fp)
 800f55c:	01420074 	movhi	r5,2049
 800f560:	294e2a04 	addi	r5,r5,14504
 800f564:	80103480 	call	8010348 <alt_dev_llist_insert>
}
 800f568:	e037883a 	mov	sp,fp
 800f56c:	dfc00117 	ldw	ra,4(sp)
 800f570:	df000017 	ldw	fp,0(sp)
 800f574:	dec00204 	addi	sp,sp,8
 800f578:	f800283a 	ret

0800f57c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f57c:	defffd04 	addi	sp,sp,-12
 800f580:	dfc00215 	stw	ra,8(sp)
 800f584:	df000115 	stw	fp,4(sp)
 800f588:	df000104 	addi	fp,sp,4
 800f58c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800f590:	8010d280 	call	8010d28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f594:	00800044 	movi	r2,1
 800f598:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f59c:	e037883a 	mov	sp,fp
 800f5a0:	dfc00117 	ldw	ra,4(sp)
 800f5a4:	df000017 	ldw	fp,0(sp)
 800f5a8:	dec00204 	addi	sp,sp,8
 800f5ac:	f800283a 	ret

0800f5b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f5b0:	defffe04 	addi	sp,sp,-8
 800f5b4:	dfc00115 	stw	ra,4(sp)
 800f5b8:	df000015 	stw	fp,0(sp)
 800f5bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800f5c0:	01020074 	movhi	r4,2049
 800f5c4:	210a1404 	addi	r4,r4,10320
 800f5c8:	000b883a 	mov	r5,zero
 800f5cc:	01800144 	movi	r6,5
 800f5d0:	800f75c0 	call	800f75c <altera_avalon_jtag_uart_init>
 800f5d4:	01020074 	movhi	r4,2049
 800f5d8:	210a0a04 	addi	r4,r4,10280
 800f5dc:	800f5440 	call	800f544 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800f5e0:	0001883a 	nop
}
 800f5e4:	e037883a 	mov	sp,fp
 800f5e8:	dfc00117 	ldw	ra,4(sp)
 800f5ec:	df000017 	ldw	fp,0(sp)
 800f5f0:	dec00204 	addi	sp,sp,8
 800f5f4:	f800283a 	ret

0800f5f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f5f8:	defffa04 	addi	sp,sp,-24
 800f5fc:	dfc00515 	stw	ra,20(sp)
 800f600:	df000415 	stw	fp,16(sp)
 800f604:	df000404 	addi	fp,sp,16
 800f608:	e13ffd15 	stw	r4,-12(fp)
 800f60c:	e17ffe15 	stw	r5,-8(fp)
 800f610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f614:	e0bffd17 	ldw	r2,-12(fp)
 800f618:	10800017 	ldw	r2,0(r2)
 800f61c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f620:	e0bffc17 	ldw	r2,-16(fp)
 800f624:	10c00a04 	addi	r3,r2,40
 800f628:	e0bffd17 	ldw	r2,-12(fp)
 800f62c:	10800217 	ldw	r2,8(r2)
 800f630:	1809883a 	mov	r4,r3
 800f634:	e17ffe17 	ldw	r5,-8(fp)
 800f638:	e1bfff17 	ldw	r6,-4(fp)
 800f63c:	100f883a 	mov	r7,r2
 800f640:	800fc200 	call	800fc20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f644:	e037883a 	mov	sp,fp
 800f648:	dfc00117 	ldw	ra,4(sp)
 800f64c:	df000017 	ldw	fp,0(sp)
 800f650:	dec00204 	addi	sp,sp,8
 800f654:	f800283a 	ret

0800f658 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f658:	defffa04 	addi	sp,sp,-24
 800f65c:	dfc00515 	stw	ra,20(sp)
 800f660:	df000415 	stw	fp,16(sp)
 800f664:	df000404 	addi	fp,sp,16
 800f668:	e13ffd15 	stw	r4,-12(fp)
 800f66c:	e17ffe15 	stw	r5,-8(fp)
 800f670:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f674:	e0bffd17 	ldw	r2,-12(fp)
 800f678:	10800017 	ldw	r2,0(r2)
 800f67c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f680:	e0bffc17 	ldw	r2,-16(fp)
 800f684:	10c00a04 	addi	r3,r2,40
 800f688:	e0bffd17 	ldw	r2,-12(fp)
 800f68c:	10800217 	ldw	r2,8(r2)
 800f690:	1809883a 	mov	r4,r3
 800f694:	e17ffe17 	ldw	r5,-8(fp)
 800f698:	e1bfff17 	ldw	r6,-4(fp)
 800f69c:	100f883a 	mov	r7,r2
 800f6a0:	800fe2c0 	call	800fe2c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f6a4:	e037883a 	mov	sp,fp
 800f6a8:	dfc00117 	ldw	ra,4(sp)
 800f6ac:	df000017 	ldw	fp,0(sp)
 800f6b0:	dec00204 	addi	sp,sp,8
 800f6b4:	f800283a 	ret

0800f6b8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f6b8:	defffc04 	addi	sp,sp,-16
 800f6bc:	dfc00315 	stw	ra,12(sp)
 800f6c0:	df000215 	stw	fp,8(sp)
 800f6c4:	df000204 	addi	fp,sp,8
 800f6c8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f6cc:	e0bfff17 	ldw	r2,-4(fp)
 800f6d0:	10800017 	ldw	r2,0(r2)
 800f6d4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f6d8:	e0bffe17 	ldw	r2,-8(fp)
 800f6dc:	10c00a04 	addi	r3,r2,40
 800f6e0:	e0bfff17 	ldw	r2,-4(fp)
 800f6e4:	10800217 	ldw	r2,8(r2)
 800f6e8:	1809883a 	mov	r4,r3
 800f6ec:	100b883a 	mov	r5,r2
 800f6f0:	800facc0 	call	800facc <altera_avalon_jtag_uart_close>
}
 800f6f4:	e037883a 	mov	sp,fp
 800f6f8:	dfc00117 	ldw	ra,4(sp)
 800f6fc:	df000017 	ldw	fp,0(sp)
 800f700:	dec00204 	addi	sp,sp,8
 800f704:	f800283a 	ret

0800f708 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f708:	defffa04 	addi	sp,sp,-24
 800f70c:	dfc00515 	stw	ra,20(sp)
 800f710:	df000415 	stw	fp,16(sp)
 800f714:	df000404 	addi	fp,sp,16
 800f718:	e13ffd15 	stw	r4,-12(fp)
 800f71c:	e17ffe15 	stw	r5,-8(fp)
 800f720:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f724:	e0bffd17 	ldw	r2,-12(fp)
 800f728:	10800017 	ldw	r2,0(r2)
 800f72c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f730:	e0bffc17 	ldw	r2,-16(fp)
 800f734:	10800a04 	addi	r2,r2,40
 800f738:	1009883a 	mov	r4,r2
 800f73c:	e17ffe17 	ldw	r5,-8(fp)
 800f740:	e1bfff17 	ldw	r6,-4(fp)
 800f744:	800fb340 	call	800fb34 <altera_avalon_jtag_uart_ioctl>
}
 800f748:	e037883a 	mov	sp,fp
 800f74c:	dfc00117 	ldw	ra,4(sp)
 800f750:	df000017 	ldw	fp,0(sp)
 800f754:	dec00204 	addi	sp,sp,8
 800f758:	f800283a 	ret

0800f75c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f75c:	defffa04 	addi	sp,sp,-24
 800f760:	dfc00515 	stw	ra,20(sp)
 800f764:	df000415 	stw	fp,16(sp)
 800f768:	df000404 	addi	fp,sp,16
 800f76c:	e13ffd15 	stw	r4,-12(fp)
 800f770:	e17ffe15 	stw	r5,-8(fp)
 800f774:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f778:	e0bffd17 	ldw	r2,-12(fp)
 800f77c:	00c00044 	movi	r3,1
 800f780:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f784:	e0bffd17 	ldw	r2,-12(fp)
 800f788:	10800017 	ldw	r2,0(r2)
 800f78c:	10800104 	addi	r2,r2,4
 800f790:	1007883a 	mov	r3,r2
 800f794:	e0bffd17 	ldw	r2,-12(fp)
 800f798:	10800817 	ldw	r2,32(r2)
 800f79c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f7a0:	e0fffe17 	ldw	r3,-8(fp)
 800f7a4:	e0bfff17 	ldw	r2,-4(fp)
 800f7a8:	d8000015 	stw	zero,0(sp)
 800f7ac:	1809883a 	mov	r4,r3
 800f7b0:	100b883a 	mov	r5,r2
 800f7b4:	01820074 	movhi	r6,2049
 800f7b8:	31be0804 	addi	r6,r6,-2016
 800f7bc:	e1fffd17 	ldw	r7,-12(fp)
 800f7c0:	80104c00 	call	80104c0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f7c4:	e0bffd17 	ldw	r2,-12(fp)
 800f7c8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f7cc:	e0bffd17 	ldw	r2,-12(fp)
 800f7d0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f7d4:	00820074 	movhi	r2,2049
 800f7d8:	1094f904 	addi	r2,r2,21476
 800f7dc:	10800017 	ldw	r2,0(r2)
 800f7e0:	1809883a 	mov	r4,r3
 800f7e4:	100b883a 	mov	r5,r2
 800f7e8:	01820074 	movhi	r6,2049
 800f7ec:	31be8904 	addi	r6,r6,-1500
 800f7f0:	e1fffd17 	ldw	r7,-12(fp)
 800f7f4:	80100440 	call	8010044 <alt_alarm_start>
 800f7f8:	1000040e 	bge	r2,zero,800f80c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f7fc:	e0fffd17 	ldw	r3,-12(fp)
 800f800:	00a00034 	movhi	r2,32768
 800f804:	10bfffc4 	addi	r2,r2,-1
 800f808:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f80c:	e037883a 	mov	sp,fp
 800f810:	dfc00117 	ldw	ra,4(sp)
 800f814:	df000017 	ldw	fp,0(sp)
 800f818:	dec00204 	addi	sp,sp,8
 800f81c:	f800283a 	ret

0800f820 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f820:	defff804 	addi	sp,sp,-32
 800f824:	df000715 	stw	fp,28(sp)
 800f828:	df000704 	addi	fp,sp,28
 800f82c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f830:	e0bfff17 	ldw	r2,-4(fp)
 800f834:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f838:	e0bffb17 	ldw	r2,-20(fp)
 800f83c:	10800017 	ldw	r2,0(r2)
 800f840:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f844:	e0bffc17 	ldw	r2,-16(fp)
 800f848:	10800104 	addi	r2,r2,4
 800f84c:	10800037 	ldwio	r2,0(r2)
 800f850:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f854:	e0bffd17 	ldw	r2,-12(fp)
 800f858:	1080c00c 	andi	r2,r2,768
 800f85c:	1000011e 	bne	r2,zero,800f864 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f860:	00006c06 	br	800fa14 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f864:	e0bffd17 	ldw	r2,-12(fp)
 800f868:	1080400c 	andi	r2,r2,256
 800f86c:	10003426 	beq	r2,zero,800f940 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f870:	00800074 	movhi	r2,1
 800f874:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f878:	e0bffb17 	ldw	r2,-20(fp)
 800f87c:	10800a17 	ldw	r2,40(r2)
 800f880:	10800044 	addi	r2,r2,1
 800f884:	1081ffcc 	andi	r2,r2,2047
 800f888:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f88c:	e0bffb17 	ldw	r2,-20(fp)
 800f890:	10c00b17 	ldw	r3,44(r2)
 800f894:	e0bffe17 	ldw	r2,-8(fp)
 800f898:	1880011e 	bne	r3,r2,800f8a0 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f89c:	00001606 	br	800f8f8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f8a0:	e0bffc17 	ldw	r2,-16(fp)
 800f8a4:	10800037 	ldwio	r2,0(r2)
 800f8a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f8ac:	e0bff917 	ldw	r2,-28(fp)
 800f8b0:	10a0000c 	andi	r2,r2,32768
 800f8b4:	1000011e 	bne	r2,zero,800f8bc <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f8b8:	00000f06 	br	800f8f8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f8bc:	e0bffb17 	ldw	r2,-20(fp)
 800f8c0:	10800a17 	ldw	r2,40(r2)
 800f8c4:	e0fff917 	ldw	r3,-28(fp)
 800f8c8:	1809883a 	mov	r4,r3
 800f8cc:	e0fffb17 	ldw	r3,-20(fp)
 800f8d0:	1885883a 	add	r2,r3,r2
 800f8d4:	10800e04 	addi	r2,r2,56
 800f8d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f8dc:	e0bffb17 	ldw	r2,-20(fp)
 800f8e0:	10800a17 	ldw	r2,40(r2)
 800f8e4:	10800044 	addi	r2,r2,1
 800f8e8:	10c1ffcc 	andi	r3,r2,2047
 800f8ec:	e0bffb17 	ldw	r2,-20(fp)
 800f8f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f8f4:	003fe006 	br	800f878 <__alt_data_end+0xfc00f878>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f8f8:	e0bff917 	ldw	r2,-28(fp)
 800f8fc:	10bfffec 	andhi	r2,r2,65535
 800f900:	10000f26 	beq	r2,zero,800f940 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f904:	e0bffb17 	ldw	r2,-20(fp)
 800f908:	10c00817 	ldw	r3,32(r2)
 800f90c:	00bfff84 	movi	r2,-2
 800f910:	1886703a 	and	r3,r3,r2
 800f914:	e0bffb17 	ldw	r2,-20(fp)
 800f918:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f91c:	e0bffc17 	ldw	r2,-16(fp)
 800f920:	10800104 	addi	r2,r2,4
 800f924:	1007883a 	mov	r3,r2
 800f928:	e0bffb17 	ldw	r2,-20(fp)
 800f92c:	10800817 	ldw	r2,32(r2)
 800f930:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f934:	e0bffc17 	ldw	r2,-16(fp)
 800f938:	10800104 	addi	r2,r2,4
 800f93c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f940:	e0bffd17 	ldw	r2,-12(fp)
 800f944:	1080800c 	andi	r2,r2,512
 800f948:	10003126 	beq	r2,zero,800fa10 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f94c:	e0bffd17 	ldw	r2,-12(fp)
 800f950:	1004d43a 	srli	r2,r2,16
 800f954:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f958:	00001406 	br	800f9ac <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f95c:	e0bffc17 	ldw	r2,-16(fp)
 800f960:	e0fffb17 	ldw	r3,-20(fp)
 800f964:	18c00d17 	ldw	r3,52(r3)
 800f968:	e13ffb17 	ldw	r4,-20(fp)
 800f96c:	20c7883a 	add	r3,r4,r3
 800f970:	18c20e04 	addi	r3,r3,2104
 800f974:	18c00003 	ldbu	r3,0(r3)
 800f978:	18c03fcc 	andi	r3,r3,255
 800f97c:	18c0201c 	xori	r3,r3,128
 800f980:	18ffe004 	addi	r3,r3,-128
 800f984:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f988:	e0bffb17 	ldw	r2,-20(fp)
 800f98c:	10800d17 	ldw	r2,52(r2)
 800f990:	10800044 	addi	r2,r2,1
 800f994:	10c1ffcc 	andi	r3,r2,2047
 800f998:	e0bffb17 	ldw	r2,-20(fp)
 800f99c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f9a0:	e0bffa17 	ldw	r2,-24(fp)
 800f9a4:	10bfffc4 	addi	r2,r2,-1
 800f9a8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f9ac:	e0bffa17 	ldw	r2,-24(fp)
 800f9b0:	10000526 	beq	r2,zero,800f9c8 <altera_avalon_jtag_uart_irq+0x1a8>
 800f9b4:	e0bffb17 	ldw	r2,-20(fp)
 800f9b8:	10c00d17 	ldw	r3,52(r2)
 800f9bc:	e0bffb17 	ldw	r2,-20(fp)
 800f9c0:	10800c17 	ldw	r2,48(r2)
 800f9c4:	18bfe51e 	bne	r3,r2,800f95c <__alt_data_end+0xfc00f95c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f9c8:	e0bffa17 	ldw	r2,-24(fp)
 800f9cc:	10001026 	beq	r2,zero,800fa10 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f9d0:	e0bffb17 	ldw	r2,-20(fp)
 800f9d4:	10c00817 	ldw	r3,32(r2)
 800f9d8:	00bfff44 	movi	r2,-3
 800f9dc:	1886703a 	and	r3,r3,r2
 800f9e0:	e0bffb17 	ldw	r2,-20(fp)
 800f9e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800f9e8:	e0bffb17 	ldw	r2,-20(fp)
 800f9ec:	10800017 	ldw	r2,0(r2)
 800f9f0:	10800104 	addi	r2,r2,4
 800f9f4:	1007883a 	mov	r3,r2
 800f9f8:	e0bffb17 	ldw	r2,-20(fp)
 800f9fc:	10800817 	ldw	r2,32(r2)
 800fa00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fa04:	e0bffc17 	ldw	r2,-16(fp)
 800fa08:	10800104 	addi	r2,r2,4
 800fa0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800fa10:	003f8c06 	br	800f844 <__alt_data_end+0xfc00f844>
}
 800fa14:	e037883a 	mov	sp,fp
 800fa18:	df000017 	ldw	fp,0(sp)
 800fa1c:	dec00104 	addi	sp,sp,4
 800fa20:	f800283a 	ret

0800fa24 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800fa24:	defff804 	addi	sp,sp,-32
 800fa28:	df000715 	stw	fp,28(sp)
 800fa2c:	df000704 	addi	fp,sp,28
 800fa30:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800fa34:	e0bffb17 	ldw	r2,-20(fp)
 800fa38:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800fa3c:	e0bff917 	ldw	r2,-28(fp)
 800fa40:	10800017 	ldw	r2,0(r2)
 800fa44:	10800104 	addi	r2,r2,4
 800fa48:	10800037 	ldwio	r2,0(r2)
 800fa4c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fa50:	e0bffa17 	ldw	r2,-24(fp)
 800fa54:	1081000c 	andi	r2,r2,1024
 800fa58:	10000b26 	beq	r2,zero,800fa88 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fa5c:	e0bff917 	ldw	r2,-28(fp)
 800fa60:	10800017 	ldw	r2,0(r2)
 800fa64:	10800104 	addi	r2,r2,4
 800fa68:	1007883a 	mov	r3,r2
 800fa6c:	e0bff917 	ldw	r2,-28(fp)
 800fa70:	10800817 	ldw	r2,32(r2)
 800fa74:	10810014 	ori	r2,r2,1024
 800fa78:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800fa7c:	e0bff917 	ldw	r2,-28(fp)
 800fa80:	10000915 	stw	zero,36(r2)
 800fa84:	00000a06 	br	800fab0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fa88:	e0bff917 	ldw	r2,-28(fp)
 800fa8c:	10c00917 	ldw	r3,36(r2)
 800fa90:	00a00034 	movhi	r2,32768
 800fa94:	10bfff04 	addi	r2,r2,-4
 800fa98:	10c00536 	bltu	r2,r3,800fab0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800fa9c:	e0bff917 	ldw	r2,-28(fp)
 800faa0:	10800917 	ldw	r2,36(r2)
 800faa4:	10c00044 	addi	r3,r2,1
 800faa8:	e0bff917 	ldw	r2,-28(fp)
 800faac:	10c00915 	stw	r3,36(r2)
 800fab0:	00820074 	movhi	r2,2049
 800fab4:	1094f904 	addi	r2,r2,21476
 800fab8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800fabc:	e037883a 	mov	sp,fp
 800fac0:	df000017 	ldw	fp,0(sp)
 800fac4:	dec00104 	addi	sp,sp,4
 800fac8:	f800283a 	ret

0800facc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800facc:	defffd04 	addi	sp,sp,-12
 800fad0:	df000215 	stw	fp,8(sp)
 800fad4:	df000204 	addi	fp,sp,8
 800fad8:	e13ffe15 	stw	r4,-8(fp)
 800fadc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fae0:	00000506 	br	800faf8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fae4:	e0bfff17 	ldw	r2,-4(fp)
 800fae8:	1090000c 	andi	r2,r2,16384
 800faec:	10000226 	beq	r2,zero,800faf8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800faf0:	00bffd44 	movi	r2,-11
 800faf4:	00000b06 	br	800fb24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800faf8:	e0bffe17 	ldw	r2,-8(fp)
 800fafc:	10c00d17 	ldw	r3,52(r2)
 800fb00:	e0bffe17 	ldw	r2,-8(fp)
 800fb04:	10800c17 	ldw	r2,48(r2)
 800fb08:	18800526 	beq	r3,r2,800fb20 <altera_avalon_jtag_uart_close+0x54>
 800fb0c:	e0bffe17 	ldw	r2,-8(fp)
 800fb10:	10c00917 	ldw	r3,36(r2)
 800fb14:	e0bffe17 	ldw	r2,-8(fp)
 800fb18:	10800117 	ldw	r2,4(r2)
 800fb1c:	18bff136 	bltu	r3,r2,800fae4 <__alt_data_end+0xfc00fae4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fb20:	0005883a 	mov	r2,zero
}
 800fb24:	e037883a 	mov	sp,fp
 800fb28:	df000017 	ldw	fp,0(sp)
 800fb2c:	dec00104 	addi	sp,sp,4
 800fb30:	f800283a 	ret

0800fb34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fb34:	defffa04 	addi	sp,sp,-24
 800fb38:	df000515 	stw	fp,20(sp)
 800fb3c:	df000504 	addi	fp,sp,20
 800fb40:	e13ffd15 	stw	r4,-12(fp)
 800fb44:	e17ffe15 	stw	r5,-8(fp)
 800fb48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fb4c:	00bff9c4 	movi	r2,-25
 800fb50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fb54:	e0bffe17 	ldw	r2,-8(fp)
 800fb58:	10da8060 	cmpeqi	r3,r2,27137
 800fb5c:	1800031e 	bne	r3,zero,800fb6c <altera_avalon_jtag_uart_ioctl+0x38>
 800fb60:	109a80a0 	cmpeqi	r2,r2,27138
 800fb64:	1000191e 	bne	r2,zero,800fbcc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800fb68:	00002806 	br	800fc0c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fb6c:	e0bffd17 	ldw	r2,-12(fp)
 800fb70:	10c00117 	ldw	r3,4(r2)
 800fb74:	00a00034 	movhi	r2,32768
 800fb78:	10bfffc4 	addi	r2,r2,-1
 800fb7c:	18801226 	beq	r3,r2,800fbc8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800fb80:	e0bfff17 	ldw	r2,-4(fp)
 800fb84:	10800017 	ldw	r2,0(r2)
 800fb88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fb8c:	e0bffc17 	ldw	r2,-16(fp)
 800fb90:	10800090 	cmplti	r2,r2,2
 800fb94:	1000061e 	bne	r2,zero,800fbb0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fb98:	e0fffc17 	ldw	r3,-16(fp)
 800fb9c:	00a00034 	movhi	r2,32768
 800fba0:	10bfffc4 	addi	r2,r2,-1
 800fba4:	18800226 	beq	r3,r2,800fbb0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800fba8:	e0bffc17 	ldw	r2,-16(fp)
 800fbac:	00000206 	br	800fbb8 <altera_avalon_jtag_uart_ioctl+0x84>
 800fbb0:	00a00034 	movhi	r2,32768
 800fbb4:	10bfff84 	addi	r2,r2,-2
 800fbb8:	e0fffd17 	ldw	r3,-12(fp)
 800fbbc:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fbc0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fbc4:	00001106 	br	800fc0c <altera_avalon_jtag_uart_ioctl+0xd8>
 800fbc8:	00001006 	br	800fc0c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fbcc:	e0bffd17 	ldw	r2,-12(fp)
 800fbd0:	10c00117 	ldw	r3,4(r2)
 800fbd4:	00a00034 	movhi	r2,32768
 800fbd8:	10bfffc4 	addi	r2,r2,-1
 800fbdc:	18800a26 	beq	r3,r2,800fc08 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fbe0:	e0bffd17 	ldw	r2,-12(fp)
 800fbe4:	10c00917 	ldw	r3,36(r2)
 800fbe8:	e0bffd17 	ldw	r2,-12(fp)
 800fbec:	10800117 	ldw	r2,4(r2)
 800fbf0:	1885803a 	cmpltu	r2,r3,r2
 800fbf4:	10c03fcc 	andi	r3,r2,255
 800fbf8:	e0bfff17 	ldw	r2,-4(fp)
 800fbfc:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fc00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fc04:	00000006 	br	800fc08 <altera_avalon_jtag_uart_ioctl+0xd4>
 800fc08:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fc0c:	e0bffb17 	ldw	r2,-20(fp)
}
 800fc10:	e037883a 	mov	sp,fp
 800fc14:	df000017 	ldw	fp,0(sp)
 800fc18:	dec00104 	addi	sp,sp,4
 800fc1c:	f800283a 	ret

0800fc20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fc20:	defff304 	addi	sp,sp,-52
 800fc24:	dfc00c15 	stw	ra,48(sp)
 800fc28:	df000b15 	stw	fp,44(sp)
 800fc2c:	df000b04 	addi	fp,sp,44
 800fc30:	e13ffc15 	stw	r4,-16(fp)
 800fc34:	e17ffd15 	stw	r5,-12(fp)
 800fc38:	e1bffe15 	stw	r6,-8(fp)
 800fc3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fc40:	e0bffd17 	ldw	r2,-12(fp)
 800fc44:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fc48:	00004906 	br	800fd70 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fc4c:	e0bffc17 	ldw	r2,-16(fp)
 800fc50:	10800a17 	ldw	r2,40(r2)
 800fc54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fc58:	e0bffc17 	ldw	r2,-16(fp)
 800fc5c:	10800b17 	ldw	r2,44(r2)
 800fc60:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fc64:	e0fff717 	ldw	r3,-36(fp)
 800fc68:	e0bff817 	ldw	r2,-32(fp)
 800fc6c:	18800536 	bltu	r3,r2,800fc84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fc70:	e0fff717 	ldw	r3,-36(fp)
 800fc74:	e0bff817 	ldw	r2,-32(fp)
 800fc78:	1885c83a 	sub	r2,r3,r2
 800fc7c:	e0bff615 	stw	r2,-40(fp)
 800fc80:	00000406 	br	800fc94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fc84:	00c20004 	movi	r3,2048
 800fc88:	e0bff817 	ldw	r2,-32(fp)
 800fc8c:	1885c83a 	sub	r2,r3,r2
 800fc90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fc94:	e0bff617 	ldw	r2,-40(fp)
 800fc98:	1000011e 	bne	r2,zero,800fca0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fc9c:	00001d06 	br	800fd14 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fca0:	e0fffe17 	ldw	r3,-8(fp)
 800fca4:	e0bff617 	ldw	r2,-40(fp)
 800fca8:	1880022e 	bgeu	r3,r2,800fcb4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fcac:	e0bffe17 	ldw	r2,-8(fp)
 800fcb0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fcb4:	e0bff817 	ldw	r2,-32(fp)
 800fcb8:	10800e04 	addi	r2,r2,56
 800fcbc:	e0fffc17 	ldw	r3,-16(fp)
 800fcc0:	1885883a 	add	r2,r3,r2
 800fcc4:	e13ff517 	ldw	r4,-44(fp)
 800fcc8:	100b883a 	mov	r5,r2
 800fccc:	e1bff617 	ldw	r6,-40(fp)
 800fcd0:	8007a800 	call	8007a80 <memcpy>
      ptr   += n;
 800fcd4:	e0fff517 	ldw	r3,-44(fp)
 800fcd8:	e0bff617 	ldw	r2,-40(fp)
 800fcdc:	1885883a 	add	r2,r3,r2
 800fce0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fce4:	e0fffe17 	ldw	r3,-8(fp)
 800fce8:	e0bff617 	ldw	r2,-40(fp)
 800fcec:	1885c83a 	sub	r2,r3,r2
 800fcf0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fcf4:	e0fff817 	ldw	r3,-32(fp)
 800fcf8:	e0bff617 	ldw	r2,-40(fp)
 800fcfc:	1885883a 	add	r2,r3,r2
 800fd00:	10c1ffcc 	andi	r3,r2,2047
 800fd04:	e0bffc17 	ldw	r2,-16(fp)
 800fd08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fd0c:	e0bffe17 	ldw	r2,-8(fp)
 800fd10:	00bfce16 	blt	zero,r2,800fc4c <__alt_data_end+0xfc00fc4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fd14:	e0fff517 	ldw	r3,-44(fp)
 800fd18:	e0bffd17 	ldw	r2,-12(fp)
 800fd1c:	18800126 	beq	r3,r2,800fd24 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fd20:	00001506 	br	800fd78 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fd24:	e0bfff17 	ldw	r2,-4(fp)
 800fd28:	1090000c 	andi	r2,r2,16384
 800fd2c:	10000126 	beq	r2,zero,800fd34 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fd30:	00001106 	br	800fd78 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fd34:	0001883a 	nop
 800fd38:	e0bffc17 	ldw	r2,-16(fp)
 800fd3c:	10c00a17 	ldw	r3,40(r2)
 800fd40:	e0bff717 	ldw	r2,-36(fp)
 800fd44:	1880051e 	bne	r3,r2,800fd5c <altera_avalon_jtag_uart_read+0x13c>
 800fd48:	e0bffc17 	ldw	r2,-16(fp)
 800fd4c:	10c00917 	ldw	r3,36(r2)
 800fd50:	e0bffc17 	ldw	r2,-16(fp)
 800fd54:	10800117 	ldw	r2,4(r2)
 800fd58:	18bff736 	bltu	r3,r2,800fd38 <__alt_data_end+0xfc00fd38>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fd5c:	e0bffc17 	ldw	r2,-16(fp)
 800fd60:	10c00a17 	ldw	r3,40(r2)
 800fd64:	e0bff717 	ldw	r2,-36(fp)
 800fd68:	1880011e 	bne	r3,r2,800fd70 <altera_avalon_jtag_uart_read+0x150>
      break;
 800fd6c:	00000206 	br	800fd78 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fd70:	e0bffe17 	ldw	r2,-8(fp)
 800fd74:	00bfb516 	blt	zero,r2,800fc4c <__alt_data_end+0xfc00fc4c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fd78:	e0fff517 	ldw	r3,-44(fp)
 800fd7c:	e0bffd17 	ldw	r2,-12(fp)
 800fd80:	18801826 	beq	r3,r2,800fde4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd84:	0005303a 	rdctl	r2,status
 800fd88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fd8c:	e0fffa17 	ldw	r3,-24(fp)
 800fd90:	00bfff84 	movi	r2,-2
 800fd94:	1884703a 	and	r2,r3,r2
 800fd98:	1001703a 	wrctl	status,r2
  
  return context;
 800fd9c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fda0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fda4:	e0bffc17 	ldw	r2,-16(fp)
 800fda8:	10800817 	ldw	r2,32(r2)
 800fdac:	10c00054 	ori	r3,r2,1
 800fdb0:	e0bffc17 	ldw	r2,-16(fp)
 800fdb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fdb8:	e0bffc17 	ldw	r2,-16(fp)
 800fdbc:	10800017 	ldw	r2,0(r2)
 800fdc0:	10800104 	addi	r2,r2,4
 800fdc4:	1007883a 	mov	r3,r2
 800fdc8:	e0bffc17 	ldw	r2,-16(fp)
 800fdcc:	10800817 	ldw	r2,32(r2)
 800fdd0:	18800035 	stwio	r2,0(r3)
 800fdd4:	e0bff917 	ldw	r2,-28(fp)
 800fdd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fddc:	e0bffb17 	ldw	r2,-20(fp)
 800fde0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fde4:	e0fff517 	ldw	r3,-44(fp)
 800fde8:	e0bffd17 	ldw	r2,-12(fp)
 800fdec:	18800426 	beq	r3,r2,800fe00 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800fdf0:	e0fff517 	ldw	r3,-44(fp)
 800fdf4:	e0bffd17 	ldw	r2,-12(fp)
 800fdf8:	1885c83a 	sub	r2,r3,r2
 800fdfc:	00000606 	br	800fe18 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800fe00:	e0bfff17 	ldw	r2,-4(fp)
 800fe04:	1090000c 	andi	r2,r2,16384
 800fe08:	10000226 	beq	r2,zero,800fe14 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800fe0c:	00bffd44 	movi	r2,-11
 800fe10:	00000106 	br	800fe18 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800fe14:	00bffec4 	movi	r2,-5
}
 800fe18:	e037883a 	mov	sp,fp
 800fe1c:	dfc00117 	ldw	ra,4(sp)
 800fe20:	df000017 	ldw	fp,0(sp)
 800fe24:	dec00204 	addi	sp,sp,8
 800fe28:	f800283a 	ret

0800fe2c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fe2c:	defff304 	addi	sp,sp,-52
 800fe30:	dfc00c15 	stw	ra,48(sp)
 800fe34:	df000b15 	stw	fp,44(sp)
 800fe38:	df000b04 	addi	fp,sp,44
 800fe3c:	e13ffc15 	stw	r4,-16(fp)
 800fe40:	e17ffd15 	stw	r5,-12(fp)
 800fe44:	e1bffe15 	stw	r6,-8(fp)
 800fe48:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fe4c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fe50:	e0bffd17 	ldw	r2,-12(fp)
 800fe54:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fe58:	00003806 	br	800ff3c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fe5c:	e0bffc17 	ldw	r2,-16(fp)
 800fe60:	10800c17 	ldw	r2,48(r2)
 800fe64:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fe68:	e0bffc17 	ldw	r2,-16(fp)
 800fe6c:	10800d17 	ldw	r2,52(r2)
 800fe70:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fe74:	e0fff817 	ldw	r3,-32(fp)
 800fe78:	e0bff517 	ldw	r2,-44(fp)
 800fe7c:	1880062e 	bgeu	r3,r2,800fe98 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800fe80:	e0fff517 	ldw	r3,-44(fp)
 800fe84:	e0bff817 	ldw	r2,-32(fp)
 800fe88:	1885c83a 	sub	r2,r3,r2
 800fe8c:	10bfffc4 	addi	r2,r2,-1
 800fe90:	e0bff615 	stw	r2,-40(fp)
 800fe94:	00000b06 	br	800fec4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800fe98:	e0bff517 	ldw	r2,-44(fp)
 800fe9c:	10000526 	beq	r2,zero,800feb4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fea0:	00c20004 	movi	r3,2048
 800fea4:	e0bff817 	ldw	r2,-32(fp)
 800fea8:	1885c83a 	sub	r2,r3,r2
 800feac:	e0bff615 	stw	r2,-40(fp)
 800feb0:	00000406 	br	800fec4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800feb4:	00c1ffc4 	movi	r3,2047
 800feb8:	e0bff817 	ldw	r2,-32(fp)
 800febc:	1885c83a 	sub	r2,r3,r2
 800fec0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fec4:	e0bff617 	ldw	r2,-40(fp)
 800fec8:	1000011e 	bne	r2,zero,800fed0 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800fecc:	00001d06 	br	800ff44 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800fed0:	e0fffe17 	ldw	r3,-8(fp)
 800fed4:	e0bff617 	ldw	r2,-40(fp)
 800fed8:	1880022e 	bgeu	r3,r2,800fee4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800fedc:	e0bffe17 	ldw	r2,-8(fp)
 800fee0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800fee4:	e0bff817 	ldw	r2,-32(fp)
 800fee8:	10820e04 	addi	r2,r2,2104
 800feec:	e0fffc17 	ldw	r3,-16(fp)
 800fef0:	1885883a 	add	r2,r3,r2
 800fef4:	1009883a 	mov	r4,r2
 800fef8:	e17ffd17 	ldw	r5,-12(fp)
 800fefc:	e1bff617 	ldw	r6,-40(fp)
 800ff00:	8007a800 	call	8007a80 <memcpy>
      ptr   += n;
 800ff04:	e0fffd17 	ldw	r3,-12(fp)
 800ff08:	e0bff617 	ldw	r2,-40(fp)
 800ff0c:	1885883a 	add	r2,r3,r2
 800ff10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800ff14:	e0fffe17 	ldw	r3,-8(fp)
 800ff18:	e0bff617 	ldw	r2,-40(fp)
 800ff1c:	1885c83a 	sub	r2,r3,r2
 800ff20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ff24:	e0fff817 	ldw	r3,-32(fp)
 800ff28:	e0bff617 	ldw	r2,-40(fp)
 800ff2c:	1885883a 	add	r2,r3,r2
 800ff30:	10c1ffcc 	andi	r3,r2,2047
 800ff34:	e0bffc17 	ldw	r2,-16(fp)
 800ff38:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ff3c:	e0bffe17 	ldw	r2,-8(fp)
 800ff40:	00bfc616 	blt	zero,r2,800fe5c <__alt_data_end+0xfc00fe5c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff44:	0005303a 	rdctl	r2,status
 800ff48:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff4c:	e0fffa17 	ldw	r3,-24(fp)
 800ff50:	00bfff84 	movi	r2,-2
 800ff54:	1884703a 	and	r2,r3,r2
 800ff58:	1001703a 	wrctl	status,r2
  
  return context;
 800ff5c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ff60:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ff64:	e0bffc17 	ldw	r2,-16(fp)
 800ff68:	10800817 	ldw	r2,32(r2)
 800ff6c:	10c00094 	ori	r3,r2,2
 800ff70:	e0bffc17 	ldw	r2,-16(fp)
 800ff74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ff78:	e0bffc17 	ldw	r2,-16(fp)
 800ff7c:	10800017 	ldw	r2,0(r2)
 800ff80:	10800104 	addi	r2,r2,4
 800ff84:	1007883a 	mov	r3,r2
 800ff88:	e0bffc17 	ldw	r2,-16(fp)
 800ff8c:	10800817 	ldw	r2,32(r2)
 800ff90:	18800035 	stwio	r2,0(r3)
 800ff94:	e0bff917 	ldw	r2,-28(fp)
 800ff98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ff9c:	e0bffb17 	ldw	r2,-20(fp)
 800ffa0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ffa4:	e0bffe17 	ldw	r2,-8(fp)
 800ffa8:	0080120e 	bge	zero,r2,800fff4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800ffac:	e0bfff17 	ldw	r2,-4(fp)
 800ffb0:	1090000c 	andi	r2,r2,16384
 800ffb4:	10000126 	beq	r2,zero,800ffbc <altera_avalon_jtag_uart_write+0x190>
        break;
 800ffb8:	00001006 	br	800fffc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ffbc:	0001883a 	nop
 800ffc0:	e0bffc17 	ldw	r2,-16(fp)
 800ffc4:	10c00d17 	ldw	r3,52(r2)
 800ffc8:	e0bff517 	ldw	r2,-44(fp)
 800ffcc:	1880051e 	bne	r3,r2,800ffe4 <altera_avalon_jtag_uart_write+0x1b8>
 800ffd0:	e0bffc17 	ldw	r2,-16(fp)
 800ffd4:	10c00917 	ldw	r3,36(r2)
 800ffd8:	e0bffc17 	ldw	r2,-16(fp)
 800ffdc:	10800117 	ldw	r2,4(r2)
 800ffe0:	18bff736 	bltu	r3,r2,800ffc0 <__alt_data_end+0xfc00ffc0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800ffe4:	e0bffc17 	ldw	r2,-16(fp)
 800ffe8:	10800917 	ldw	r2,36(r2)
 800ffec:	10000126 	beq	r2,zero,800fff4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800fff0:	00000206 	br	800fffc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800fff4:	e0bffe17 	ldw	r2,-8(fp)
 800fff8:	00bf9716 	blt	zero,r2,800fe58 <__alt_data_end+0xfc00fe58>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800fffc:	e0fffd17 	ldw	r3,-12(fp)
 8010000:	e0bff717 	ldw	r2,-36(fp)
 8010004:	18800426 	beq	r3,r2,8010018 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8010008:	e0fffd17 	ldw	r3,-12(fp)
 801000c:	e0bff717 	ldw	r2,-36(fp)
 8010010:	1885c83a 	sub	r2,r3,r2
 8010014:	00000606 	br	8010030 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8010018:	e0bfff17 	ldw	r2,-4(fp)
 801001c:	1090000c 	andi	r2,r2,16384
 8010020:	10000226 	beq	r2,zero,801002c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8010024:	00bffd44 	movi	r2,-11
 8010028:	00000106 	br	8010030 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801002c:	00bffec4 	movi	r2,-5
}
 8010030:	e037883a 	mov	sp,fp
 8010034:	dfc00117 	ldw	ra,4(sp)
 8010038:	df000017 	ldw	fp,0(sp)
 801003c:	dec00204 	addi	sp,sp,8
 8010040:	f800283a 	ret

08010044 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010044:	defff504 	addi	sp,sp,-44
 8010048:	df000a15 	stw	fp,40(sp)
 801004c:	df000a04 	addi	fp,sp,40
 8010050:	e13ffc15 	stw	r4,-16(fp)
 8010054:	e17ffd15 	stw	r5,-12(fp)
 8010058:	e1bffe15 	stw	r6,-8(fp)
 801005c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010060:	e03ff615 	stw	zero,-40(fp)
 8010064:	00820074 	movhi	r2,2049
 8010068:	1094f904 	addi	r2,r2,21476
 801006c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 8010070:	10003f26 	beq	r2,zero,8010170 <alt_alarm_start+0x12c>
  {
    if (alarm)
 8010074:	e0bffc17 	ldw	r2,-16(fp)
 8010078:	10003b26 	beq	r2,zero,8010168 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801007c:	e0bffc17 	ldw	r2,-16(fp)
 8010080:	e0fffe17 	ldw	r3,-8(fp)
 8010084:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010088:	e0bffc17 	ldw	r2,-16(fp)
 801008c:	e0ffff17 	ldw	r3,-4(fp)
 8010090:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010094:	0005303a 	rdctl	r2,status
 8010098:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801009c:	e0fff817 	ldw	r3,-32(fp)
 80100a0:	00bfff84 	movi	r2,-2
 80100a4:	1884703a 	and	r2,r3,r2
 80100a8:	1001703a 	wrctl	status,r2
  
  return context;
 80100ac:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80100b0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80100b4:	00820074 	movhi	r2,2049
 80100b8:	1094fa04 	addi	r2,r2,21480
 80100bc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80100c0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80100c4:	e0fffd17 	ldw	r3,-12(fp)
 80100c8:	e0bff617 	ldw	r2,-40(fp)
 80100cc:	1885883a 	add	r2,r3,r2
 80100d0:	10c00044 	addi	r3,r2,1
 80100d4:	e0bffc17 	ldw	r2,-16(fp)
 80100d8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80100dc:	e0bffc17 	ldw	r2,-16(fp)
 80100e0:	10c00217 	ldw	r3,8(r2)
 80100e4:	e0bff617 	ldw	r2,-40(fp)
 80100e8:	1880042e 	bgeu	r3,r2,80100fc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 80100ec:	e0bffc17 	ldw	r2,-16(fp)
 80100f0:	00c00044 	movi	r3,1
 80100f4:	10c00405 	stb	r3,16(r2)
 80100f8:	00000206 	br	8010104 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 80100fc:	e0bffc17 	ldw	r2,-16(fp)
 8010100:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010104:	e0fffc17 	ldw	r3,-16(fp)
 8010108:	00820074 	movhi	r2,2049
 801010c:	108e3004 	addi	r2,r2,14528
 8010110:	e0bff915 	stw	r2,-28(fp)
 8010114:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010118:	e0bffa17 	ldw	r2,-24(fp)
 801011c:	e0fff917 	ldw	r3,-28(fp)
 8010120:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010124:	e0bff917 	ldw	r2,-28(fp)
 8010128:	10c00017 	ldw	r3,0(r2)
 801012c:	e0bffa17 	ldw	r2,-24(fp)
 8010130:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010134:	e0bff917 	ldw	r2,-28(fp)
 8010138:	10800017 	ldw	r2,0(r2)
 801013c:	e0fffa17 	ldw	r3,-24(fp)
 8010140:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010144:	e0bff917 	ldw	r2,-28(fp)
 8010148:	e0fffa17 	ldw	r3,-24(fp)
 801014c:	10c00015 	stw	r3,0(r2)
 8010150:	e0bff717 	ldw	r2,-36(fp)
 8010154:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010158:	e0bffb17 	ldw	r2,-20(fp)
 801015c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010160:	0005883a 	mov	r2,zero
 8010164:	00000306 	br	8010174 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010168:	00bffa84 	movi	r2,-22
 801016c:	00000106 	br	8010174 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 8010170:	00bfde84 	movi	r2,-134
  }
}
 8010174:	e037883a 	mov	sp,fp
 8010178:	df000017 	ldw	fp,0(sp)
 801017c:	dec00104 	addi	sp,sp,4
 8010180:	f800283a 	ret

08010184 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010184:	defffa04 	addi	sp,sp,-24
 8010188:	dfc00515 	stw	ra,20(sp)
 801018c:	df000415 	stw	fp,16(sp)
 8010190:	df000404 	addi	fp,sp,16
 8010194:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010198:	00800244 	movi	r2,9
 801019c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80101a0:	e13ffd17 	ldw	r4,-12(fp)
 80101a4:	014003f4 	movhi	r5,15
 80101a8:	29509004 	addi	r5,r5,16960
 80101ac:	800c2f80 	call	800c2f8 <__mulsi3>
 80101b0:	0100bef4 	movhi	r4,763
 80101b4:	213c2004 	addi	r4,r4,-3968
 80101b8:	100b883a 	mov	r5,r2
 80101bc:	800c2e80 	call	800c2e8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80101c0:	01200034 	movhi	r4,32768
 80101c4:	213fffc4 	addi	r4,r4,-1
 80101c8:	100b883a 	mov	r5,r2
 80101cc:	800c2e80 	call	800c2e8 <__udivsi3>
 80101d0:	e13fff17 	ldw	r4,-4(fp)
 80101d4:	100b883a 	mov	r5,r2
 80101d8:	800c2e80 	call	800c2e8 <__udivsi3>
 80101dc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 80101e0:	e0bffe17 	ldw	r2,-8(fp)
 80101e4:	10002a26 	beq	r2,zero,8010290 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 80101e8:	e03ffc15 	stw	zero,-16(fp)
 80101ec:	00001706 	br	801024c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 80101f0:	00a00034 	movhi	r2,32768
 80101f4:	10bfffc4 	addi	r2,r2,-1
 80101f8:	10bfffc4 	addi	r2,r2,-1
 80101fc:	103ffe1e 	bne	r2,zero,80101f8 <__alt_data_end+0xfc0101f8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010200:	e13ffd17 	ldw	r4,-12(fp)
 8010204:	014003f4 	movhi	r5,15
 8010208:	29509004 	addi	r5,r5,16960
 801020c:	800c2f80 	call	800c2f8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010210:	0100bef4 	movhi	r4,763
 8010214:	213c2004 	addi	r4,r4,-3968
 8010218:	100b883a 	mov	r5,r2
 801021c:	800c2e80 	call	800c2e8 <__udivsi3>
 8010220:	01200034 	movhi	r4,32768
 8010224:	213fffc4 	addi	r4,r4,-1
 8010228:	100b883a 	mov	r5,r2
 801022c:	800c2e80 	call	800c2e8 <__udivsi3>
 8010230:	1007883a 	mov	r3,r2
 8010234:	e0bfff17 	ldw	r2,-4(fp)
 8010238:	10c5c83a 	sub	r2,r2,r3
 801023c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8010240:	e0bffc17 	ldw	r2,-16(fp)
 8010244:	10800044 	addi	r2,r2,1
 8010248:	e0bffc15 	stw	r2,-16(fp)
 801024c:	e0fffc17 	ldw	r3,-16(fp)
 8010250:	e0bffe17 	ldw	r2,-8(fp)
 8010254:	18bfe616 	blt	r3,r2,80101f0 <__alt_data_end+0xfc0101f0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010258:	e13ffd17 	ldw	r4,-12(fp)
 801025c:	014003f4 	movhi	r5,15
 8010260:	29509004 	addi	r5,r5,16960
 8010264:	800c2f80 	call	800c2f8 <__mulsi3>
 8010268:	0100bef4 	movhi	r4,763
 801026c:	213c2004 	addi	r4,r4,-3968
 8010270:	100b883a 	mov	r5,r2
 8010274:	800c2e80 	call	800c2e8 <__udivsi3>
 8010278:	1009883a 	mov	r4,r2
 801027c:	e17fff17 	ldw	r5,-4(fp)
 8010280:	800c2f80 	call	800c2f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8010284:	10bfffc4 	addi	r2,r2,-1
 8010288:	103ffe1e 	bne	r2,zero,8010284 <__alt_data_end+0xfc010284>
 801028c:	00000d06 	br	80102c4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010290:	e13ffd17 	ldw	r4,-12(fp)
 8010294:	014003f4 	movhi	r5,15
 8010298:	29509004 	addi	r5,r5,16960
 801029c:	800c2f80 	call	800c2f8 <__mulsi3>
 80102a0:	0100bef4 	movhi	r4,763
 80102a4:	213c2004 	addi	r4,r4,-3968
 80102a8:	100b883a 	mov	r5,r2
 80102ac:	800c2e80 	call	800c2e8 <__udivsi3>
 80102b0:	1009883a 	mov	r4,r2
 80102b4:	e17fff17 	ldw	r5,-4(fp)
 80102b8:	800c2f80 	call	800c2f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80102bc:	10bfffc4 	addi	r2,r2,-1
 80102c0:	00bffe16 	blt	zero,r2,80102bc <__alt_data_end+0xfc0102bc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80102c4:	0005883a 	mov	r2,zero
}
 80102c8:	e037883a 	mov	sp,fp
 80102cc:	dfc00117 	ldw	ra,4(sp)
 80102d0:	df000017 	ldw	fp,0(sp)
 80102d4:	dec00204 	addi	sp,sp,8
 80102d8:	f800283a 	ret

080102dc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80102dc:	deffff04 	addi	sp,sp,-4
 80102e0:	df000015 	stw	fp,0(sp)
 80102e4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80102e8:	e037883a 	mov	sp,fp
 80102ec:	df000017 	ldw	fp,0(sp)
 80102f0:	dec00104 	addi	sp,sp,4
 80102f4:	f800283a 	ret

080102f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80102f8:	defffe04 	addi	sp,sp,-8
 80102fc:	dfc00115 	stw	ra,4(sp)
 8010300:	df000015 	stw	fp,0(sp)
 8010304:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010308:	00820074 	movhi	r2,2049
 801030c:	108e2d04 	addi	r2,r2,14516
 8010310:	10800017 	ldw	r2,0(r2)
 8010314:	10000526 	beq	r2,zero,801032c <alt_get_errno+0x34>
 8010318:	00820074 	movhi	r2,2049
 801031c:	108e2d04 	addi	r2,r2,14516
 8010320:	10800017 	ldw	r2,0(r2)
 8010324:	103ee83a 	callr	r2
 8010328:	00000206 	br	8010334 <alt_get_errno+0x3c>
 801032c:	00820074 	movhi	r2,2049
 8010330:	1094f404 	addi	r2,r2,21456
}
 8010334:	e037883a 	mov	sp,fp
 8010338:	dfc00117 	ldw	ra,4(sp)
 801033c:	df000017 	ldw	fp,0(sp)
 8010340:	dec00204 	addi	sp,sp,8
 8010344:	f800283a 	ret

08010348 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010348:	defffa04 	addi	sp,sp,-24
 801034c:	dfc00515 	stw	ra,20(sp)
 8010350:	df000415 	stw	fp,16(sp)
 8010354:	df000404 	addi	fp,sp,16
 8010358:	e13ffe15 	stw	r4,-8(fp)
 801035c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010360:	e0bffe17 	ldw	r2,-8(fp)
 8010364:	10000326 	beq	r2,zero,8010374 <alt_dev_llist_insert+0x2c>
 8010368:	e0bffe17 	ldw	r2,-8(fp)
 801036c:	10800217 	ldw	r2,8(r2)
 8010370:	1000061e 	bne	r2,zero,801038c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010374:	80102f80 	call	80102f8 <alt_get_errno>
 8010378:	1007883a 	mov	r3,r2
 801037c:	00800584 	movi	r2,22
 8010380:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010384:	00bffa84 	movi	r2,-22
 8010388:	00001306 	br	80103d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801038c:	e0bffe17 	ldw	r2,-8(fp)
 8010390:	e0ffff17 	ldw	r3,-4(fp)
 8010394:	e0fffc15 	stw	r3,-16(fp)
 8010398:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801039c:	e0bffd17 	ldw	r2,-12(fp)
 80103a0:	e0fffc17 	ldw	r3,-16(fp)
 80103a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80103a8:	e0bffc17 	ldw	r2,-16(fp)
 80103ac:	10c00017 	ldw	r3,0(r2)
 80103b0:	e0bffd17 	ldw	r2,-12(fp)
 80103b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80103b8:	e0bffc17 	ldw	r2,-16(fp)
 80103bc:	10800017 	ldw	r2,0(r2)
 80103c0:	e0fffd17 	ldw	r3,-12(fp)
 80103c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80103c8:	e0bffc17 	ldw	r2,-16(fp)
 80103cc:	e0fffd17 	ldw	r3,-12(fp)
 80103d0:	10c00015 	stw	r3,0(r2)

  return 0;  
 80103d4:	0005883a 	mov	r2,zero
}
 80103d8:	e037883a 	mov	sp,fp
 80103dc:	dfc00117 	ldw	ra,4(sp)
 80103e0:	df000017 	ldw	fp,0(sp)
 80103e4:	dec00204 	addi	sp,sp,8
 80103e8:	f800283a 	ret

080103ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80103ec:	defffd04 	addi	sp,sp,-12
 80103f0:	dfc00215 	stw	ra,8(sp)
 80103f4:	df000115 	stw	fp,4(sp)
 80103f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80103fc:	00820074 	movhi	r2,2049
 8010400:	1084d804 	addi	r2,r2,4960
 8010404:	e0bfff15 	stw	r2,-4(fp)
 8010408:	00000606 	br	8010424 <_do_ctors+0x38>
        (*ctor) (); 
 801040c:	e0bfff17 	ldw	r2,-4(fp)
 8010410:	10800017 	ldw	r2,0(r2)
 8010414:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010418:	e0bfff17 	ldw	r2,-4(fp)
 801041c:	10bfff04 	addi	r2,r2,-4
 8010420:	e0bfff15 	stw	r2,-4(fp)
 8010424:	e0ffff17 	ldw	r3,-4(fp)
 8010428:	00820074 	movhi	r2,2049
 801042c:	1084d904 	addi	r2,r2,4964
 8010430:	18bff62e 	bgeu	r3,r2,801040c <__alt_data_end+0xfc01040c>
        (*ctor) (); 
}
 8010434:	e037883a 	mov	sp,fp
 8010438:	dfc00117 	ldw	ra,4(sp)
 801043c:	df000017 	ldw	fp,0(sp)
 8010440:	dec00204 	addi	sp,sp,8
 8010444:	f800283a 	ret

08010448 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010448:	defffd04 	addi	sp,sp,-12
 801044c:	dfc00215 	stw	ra,8(sp)
 8010450:	df000115 	stw	fp,4(sp)
 8010454:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010458:	00820074 	movhi	r2,2049
 801045c:	1084d804 	addi	r2,r2,4960
 8010460:	e0bfff15 	stw	r2,-4(fp)
 8010464:	00000606 	br	8010480 <_do_dtors+0x38>
        (*dtor) (); 
 8010468:	e0bfff17 	ldw	r2,-4(fp)
 801046c:	10800017 	ldw	r2,0(r2)
 8010470:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010474:	e0bfff17 	ldw	r2,-4(fp)
 8010478:	10bfff04 	addi	r2,r2,-4
 801047c:	e0bfff15 	stw	r2,-4(fp)
 8010480:	e0ffff17 	ldw	r3,-4(fp)
 8010484:	00820074 	movhi	r2,2049
 8010488:	1084d904 	addi	r2,r2,4964
 801048c:	18bff62e 	bgeu	r3,r2,8010468 <__alt_data_end+0xfc010468>
        (*dtor) (); 
}
 8010490:	e037883a 	mov	sp,fp
 8010494:	dfc00117 	ldw	ra,4(sp)
 8010498:	df000017 	ldw	fp,0(sp)
 801049c:	dec00204 	addi	sp,sp,8
 80104a0:	f800283a 	ret

080104a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80104a4:	deffff04 	addi	sp,sp,-4
 80104a8:	df000015 	stw	fp,0(sp)
 80104ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80104b0:	e037883a 	mov	sp,fp
 80104b4:	df000017 	ldw	fp,0(sp)
 80104b8:	dec00104 	addi	sp,sp,4
 80104bc:	f800283a 	ret

080104c0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80104c0:	defff904 	addi	sp,sp,-28
 80104c4:	dfc00615 	stw	ra,24(sp)
 80104c8:	df000515 	stw	fp,20(sp)
 80104cc:	df000504 	addi	fp,sp,20
 80104d0:	e13ffc15 	stw	r4,-16(fp)
 80104d4:	e17ffd15 	stw	r5,-12(fp)
 80104d8:	e1bffe15 	stw	r6,-8(fp)
 80104dc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80104e0:	e0800217 	ldw	r2,8(fp)
 80104e4:	d8800015 	stw	r2,0(sp)
 80104e8:	e13ffc17 	ldw	r4,-16(fp)
 80104ec:	e17ffd17 	ldw	r5,-12(fp)
 80104f0:	e1bffe17 	ldw	r6,-8(fp)
 80104f4:	e1ffff17 	ldw	r7,-4(fp)
 80104f8:	80106a00 	call	80106a0 <alt_iic_isr_register>
}  
 80104fc:	e037883a 	mov	sp,fp
 8010500:	dfc00117 	ldw	ra,4(sp)
 8010504:	df000017 	ldw	fp,0(sp)
 8010508:	dec00204 	addi	sp,sp,8
 801050c:	f800283a 	ret

08010510 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8010510:	defff904 	addi	sp,sp,-28
 8010514:	df000615 	stw	fp,24(sp)
 8010518:	df000604 	addi	fp,sp,24
 801051c:	e13ffe15 	stw	r4,-8(fp)
 8010520:	e17fff15 	stw	r5,-4(fp)
 8010524:	e0bfff17 	ldw	r2,-4(fp)
 8010528:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801052c:	0005303a 	rdctl	r2,status
 8010530:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010534:	e0fffb17 	ldw	r3,-20(fp)
 8010538:	00bfff84 	movi	r2,-2
 801053c:	1884703a 	and	r2,r3,r2
 8010540:	1001703a 	wrctl	status,r2
  
  return context;
 8010544:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010548:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801054c:	e0bffa17 	ldw	r2,-24(fp)
 8010550:	00c00044 	movi	r3,1
 8010554:	1884983a 	sll	r2,r3,r2
 8010558:	1007883a 	mov	r3,r2
 801055c:	00820074 	movhi	r2,2049
 8010560:	1094f804 	addi	r2,r2,21472
 8010564:	10800017 	ldw	r2,0(r2)
 8010568:	1886b03a 	or	r3,r3,r2
 801056c:	00820074 	movhi	r2,2049
 8010570:	1094f804 	addi	r2,r2,21472
 8010574:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010578:	00820074 	movhi	r2,2049
 801057c:	1094f804 	addi	r2,r2,21472
 8010580:	10800017 	ldw	r2,0(r2)
 8010584:	100170fa 	wrctl	ienable,r2
 8010588:	e0bffc17 	ldw	r2,-16(fp)
 801058c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010590:	e0bffd17 	ldw	r2,-12(fp)
 8010594:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010598:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801059c:	0001883a 	nop
}
 80105a0:	e037883a 	mov	sp,fp
 80105a4:	df000017 	ldw	fp,0(sp)
 80105a8:	dec00104 	addi	sp,sp,4
 80105ac:	f800283a 	ret

080105b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80105b0:	defff904 	addi	sp,sp,-28
 80105b4:	df000615 	stw	fp,24(sp)
 80105b8:	df000604 	addi	fp,sp,24
 80105bc:	e13ffe15 	stw	r4,-8(fp)
 80105c0:	e17fff15 	stw	r5,-4(fp)
 80105c4:	e0bfff17 	ldw	r2,-4(fp)
 80105c8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80105cc:	0005303a 	rdctl	r2,status
 80105d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80105d4:	e0fffb17 	ldw	r3,-20(fp)
 80105d8:	00bfff84 	movi	r2,-2
 80105dc:	1884703a 	and	r2,r3,r2
 80105e0:	1001703a 	wrctl	status,r2
  
  return context;
 80105e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80105e8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 80105ec:	e0bffa17 	ldw	r2,-24(fp)
 80105f0:	00c00044 	movi	r3,1
 80105f4:	1884983a 	sll	r2,r3,r2
 80105f8:	0084303a 	nor	r2,zero,r2
 80105fc:	1007883a 	mov	r3,r2
 8010600:	00820074 	movhi	r2,2049
 8010604:	1094f804 	addi	r2,r2,21472
 8010608:	10800017 	ldw	r2,0(r2)
 801060c:	1886703a 	and	r3,r3,r2
 8010610:	00820074 	movhi	r2,2049
 8010614:	1094f804 	addi	r2,r2,21472
 8010618:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801061c:	00820074 	movhi	r2,2049
 8010620:	1094f804 	addi	r2,r2,21472
 8010624:	10800017 	ldw	r2,0(r2)
 8010628:	100170fa 	wrctl	ienable,r2
 801062c:	e0bffc17 	ldw	r2,-16(fp)
 8010630:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010634:	e0bffd17 	ldw	r2,-12(fp)
 8010638:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801063c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8010640:	0001883a 	nop
}
 8010644:	e037883a 	mov	sp,fp
 8010648:	df000017 	ldw	fp,0(sp)
 801064c:	dec00104 	addi	sp,sp,4
 8010650:	f800283a 	ret

08010654 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010654:	defffc04 	addi	sp,sp,-16
 8010658:	df000315 	stw	fp,12(sp)
 801065c:	df000304 	addi	fp,sp,12
 8010660:	e13ffe15 	stw	r4,-8(fp)
 8010664:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010668:	000530fa 	rdctl	r2,ienable
 801066c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8010670:	e0bfff17 	ldw	r2,-4(fp)
 8010674:	00c00044 	movi	r3,1
 8010678:	1884983a 	sll	r2,r3,r2
 801067c:	1007883a 	mov	r3,r2
 8010680:	e0bffd17 	ldw	r2,-12(fp)
 8010684:	1884703a 	and	r2,r3,r2
 8010688:	1004c03a 	cmpne	r2,r2,zero
 801068c:	10803fcc 	andi	r2,r2,255
}
 8010690:	e037883a 	mov	sp,fp
 8010694:	df000017 	ldw	fp,0(sp)
 8010698:	dec00104 	addi	sp,sp,4
 801069c:	f800283a 	ret

080106a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80106a0:	defff504 	addi	sp,sp,-44
 80106a4:	dfc00a15 	stw	ra,40(sp)
 80106a8:	df000915 	stw	fp,36(sp)
 80106ac:	df000904 	addi	fp,sp,36
 80106b0:	e13ffc15 	stw	r4,-16(fp)
 80106b4:	e17ffd15 	stw	r5,-12(fp)
 80106b8:	e1bffe15 	stw	r6,-8(fp)
 80106bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80106c0:	00bffa84 	movi	r2,-22
 80106c4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80106c8:	e0bffd17 	ldw	r2,-12(fp)
 80106cc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80106d0:	e0bff817 	ldw	r2,-32(fp)
 80106d4:	10800808 	cmpgei	r2,r2,32
 80106d8:	1000271e 	bne	r2,zero,8010778 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80106dc:	0005303a 	rdctl	r2,status
 80106e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80106e4:	e0fffa17 	ldw	r3,-24(fp)
 80106e8:	00bfff84 	movi	r2,-2
 80106ec:	1884703a 	and	r2,r3,r2
 80106f0:	1001703a 	wrctl	status,r2
  
  return context;
 80106f4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80106f8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 80106fc:	00820074 	movhi	r2,2049
 8010700:	10950504 	addi	r2,r2,21524
 8010704:	e0fff817 	ldw	r3,-32(fp)
 8010708:	180690fa 	slli	r3,r3,3
 801070c:	10c5883a 	add	r2,r2,r3
 8010710:	e0fffe17 	ldw	r3,-8(fp)
 8010714:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010718:	00820074 	movhi	r2,2049
 801071c:	10950504 	addi	r2,r2,21524
 8010720:	e0fff817 	ldw	r3,-32(fp)
 8010724:	180690fa 	slli	r3,r3,3
 8010728:	10c5883a 	add	r2,r2,r3
 801072c:	10800104 	addi	r2,r2,4
 8010730:	e0ffff17 	ldw	r3,-4(fp)
 8010734:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010738:	e0bffe17 	ldw	r2,-8(fp)
 801073c:	10000526 	beq	r2,zero,8010754 <alt_iic_isr_register+0xb4>
 8010740:	e0bff817 	ldw	r2,-32(fp)
 8010744:	e13ffc17 	ldw	r4,-16(fp)
 8010748:	100b883a 	mov	r5,r2
 801074c:	80105100 	call	8010510 <alt_ic_irq_enable>
 8010750:	00000406 	br	8010764 <alt_iic_isr_register+0xc4>
 8010754:	e0bff817 	ldw	r2,-32(fp)
 8010758:	e13ffc17 	ldw	r4,-16(fp)
 801075c:	100b883a 	mov	r5,r2
 8010760:	80105b00 	call	80105b0 <alt_ic_irq_disable>
 8010764:	e0bff715 	stw	r2,-36(fp)
 8010768:	e0bff917 	ldw	r2,-28(fp)
 801076c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010770:	e0bffb17 	ldw	r2,-20(fp)
 8010774:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8010778:	e0bff717 	ldw	r2,-36(fp)
}
 801077c:	e037883a 	mov	sp,fp
 8010780:	dfc00117 	ldw	ra,4(sp)
 8010784:	df000017 	ldw	fp,0(sp)
 8010788:	dec00204 	addi	sp,sp,8
 801078c:	f800283a 	ret

08010790 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8010790:	defff804 	addi	sp,sp,-32
 8010794:	dfc00715 	stw	ra,28(sp)
 8010798:	df000615 	stw	fp,24(sp)
 801079c:	dc000515 	stw	r16,20(sp)
 80107a0:	df000604 	addi	fp,sp,24
 80107a4:	e13ffb15 	stw	r4,-20(fp)
 80107a8:	e17ffc15 	stw	r5,-16(fp)
 80107ac:	e1bffd15 	stw	r6,-12(fp)
 80107b0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80107b4:	e13ffc17 	ldw	r4,-16(fp)
 80107b8:	e17ffd17 	ldw	r5,-12(fp)
 80107bc:	e1bffe17 	ldw	r6,-8(fp)
 80107c0:	8010a2c0 	call	8010a2c <open>
 80107c4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80107c8:	e0bffa17 	ldw	r2,-24(fp)
 80107cc:	10002216 	blt	r2,zero,8010858 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80107d0:	04020074 	movhi	r16,2049
 80107d4:	8409aa04 	addi	r16,r16,9896
 80107d8:	e0bffa17 	ldw	r2,-24(fp)
 80107dc:	1009883a 	mov	r4,r2
 80107e0:	01400304 	movi	r5,12
 80107e4:	800c2f80 	call	800c2f8 <__mulsi3>
 80107e8:	8085883a 	add	r2,r16,r2
 80107ec:	10c00017 	ldw	r3,0(r2)
 80107f0:	e0bffb17 	ldw	r2,-20(fp)
 80107f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80107f8:	04020074 	movhi	r16,2049
 80107fc:	8409aa04 	addi	r16,r16,9896
 8010800:	e0bffa17 	ldw	r2,-24(fp)
 8010804:	1009883a 	mov	r4,r2
 8010808:	01400304 	movi	r5,12
 801080c:	800c2f80 	call	800c2f8 <__mulsi3>
 8010810:	8085883a 	add	r2,r16,r2
 8010814:	10800104 	addi	r2,r2,4
 8010818:	10c00017 	ldw	r3,0(r2)
 801081c:	e0bffb17 	ldw	r2,-20(fp)
 8010820:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010824:	04020074 	movhi	r16,2049
 8010828:	8409aa04 	addi	r16,r16,9896
 801082c:	e0bffa17 	ldw	r2,-24(fp)
 8010830:	1009883a 	mov	r4,r2
 8010834:	01400304 	movi	r5,12
 8010838:	800c2f80 	call	800c2f8 <__mulsi3>
 801083c:	8085883a 	add	r2,r16,r2
 8010840:	10800204 	addi	r2,r2,8
 8010844:	10c00017 	ldw	r3,0(r2)
 8010848:	e0bffb17 	ldw	r2,-20(fp)
 801084c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8010850:	e13ffa17 	ldw	r4,-24(fp)
 8010854:	800f2940 	call	800f294 <alt_release_fd>
  }
} 
 8010858:	e6ffff04 	addi	sp,fp,-4
 801085c:	dfc00217 	ldw	ra,8(sp)
 8010860:	df000117 	ldw	fp,4(sp)
 8010864:	dc000017 	ldw	r16,0(sp)
 8010868:	dec00304 	addi	sp,sp,12
 801086c:	f800283a 	ret

08010870 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8010870:	defffb04 	addi	sp,sp,-20
 8010874:	dfc00415 	stw	ra,16(sp)
 8010878:	df000315 	stw	fp,12(sp)
 801087c:	df000304 	addi	fp,sp,12
 8010880:	e13ffd15 	stw	r4,-12(fp)
 8010884:	e17ffe15 	stw	r5,-8(fp)
 8010888:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801088c:	01020074 	movhi	r4,2049
 8010890:	2109ad04 	addi	r4,r4,9908
 8010894:	e17ffd17 	ldw	r5,-12(fp)
 8010898:	01800044 	movi	r6,1
 801089c:	01c07fc4 	movi	r7,511
 80108a0:	80107900 	call	8010790 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80108a4:	01020074 	movhi	r4,2049
 80108a8:	2109aa04 	addi	r4,r4,9896
 80108ac:	e17ffe17 	ldw	r5,-8(fp)
 80108b0:	000d883a 	mov	r6,zero
 80108b4:	01c07fc4 	movi	r7,511
 80108b8:	80107900 	call	8010790 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80108bc:	01020074 	movhi	r4,2049
 80108c0:	2109b004 	addi	r4,r4,9920
 80108c4:	e17fff17 	ldw	r5,-4(fp)
 80108c8:	01800044 	movi	r6,1
 80108cc:	01c07fc4 	movi	r7,511
 80108d0:	80107900 	call	8010790 <alt_open_fd>
}  
 80108d4:	e037883a 	mov	sp,fp
 80108d8:	dfc00117 	ldw	ra,4(sp)
 80108dc:	df000017 	ldw	fp,0(sp)
 80108e0:	dec00204 	addi	sp,sp,8
 80108e4:	f800283a 	ret

080108e8 <alt_get_errno>:
 80108e8:	defffe04 	addi	sp,sp,-8
 80108ec:	dfc00115 	stw	ra,4(sp)
 80108f0:	df000015 	stw	fp,0(sp)
 80108f4:	d839883a 	mov	fp,sp
 80108f8:	00820074 	movhi	r2,2049
 80108fc:	108e2d04 	addi	r2,r2,14516
 8010900:	10800017 	ldw	r2,0(r2)
 8010904:	10000526 	beq	r2,zero,801091c <alt_get_errno+0x34>
 8010908:	00820074 	movhi	r2,2049
 801090c:	108e2d04 	addi	r2,r2,14516
 8010910:	10800017 	ldw	r2,0(r2)
 8010914:	103ee83a 	callr	r2
 8010918:	00000206 	br	8010924 <alt_get_errno+0x3c>
 801091c:	00820074 	movhi	r2,2049
 8010920:	1094f404 	addi	r2,r2,21456
 8010924:	e037883a 	mov	sp,fp
 8010928:	dfc00117 	ldw	ra,4(sp)
 801092c:	df000017 	ldw	fp,0(sp)
 8010930:	dec00204 	addi	sp,sp,8
 8010934:	f800283a 	ret

08010938 <alt_file_locked>:
 8010938:	defffb04 	addi	sp,sp,-20
 801093c:	dfc00415 	stw	ra,16(sp)
 8010940:	df000315 	stw	fp,12(sp)
 8010944:	dc000215 	stw	r16,8(sp)
 8010948:	df000304 	addi	fp,sp,12
 801094c:	e13ffe15 	stw	r4,-8(fp)
 8010950:	e0bffe17 	ldw	r2,-8(fp)
 8010954:	10800217 	ldw	r2,8(r2)
 8010958:	10d00034 	orhi	r3,r2,16384
 801095c:	e0bffe17 	ldw	r2,-8(fp)
 8010960:	10c00215 	stw	r3,8(r2)
 8010964:	e03ffd15 	stw	zero,-12(fp)
 8010968:	00002306 	br	80109f8 <alt_file_locked+0xc0>
 801096c:	04020074 	movhi	r16,2049
 8010970:	8409aa04 	addi	r16,r16,9896
 8010974:	e0bffd17 	ldw	r2,-12(fp)
 8010978:	01400304 	movi	r5,12
 801097c:	1009883a 	mov	r4,r2
 8010980:	800c2f80 	call	800c2f8 <__mulsi3>
 8010984:	8085883a 	add	r2,r16,r2
 8010988:	10c00017 	ldw	r3,0(r2)
 801098c:	e0bffe17 	ldw	r2,-8(fp)
 8010990:	10800017 	ldw	r2,0(r2)
 8010994:	1880151e 	bne	r3,r2,80109ec <alt_file_locked+0xb4>
 8010998:	04020074 	movhi	r16,2049
 801099c:	8409aa04 	addi	r16,r16,9896
 80109a0:	e0bffd17 	ldw	r2,-12(fp)
 80109a4:	01400304 	movi	r5,12
 80109a8:	1009883a 	mov	r4,r2
 80109ac:	800c2f80 	call	800c2f8 <__mulsi3>
 80109b0:	8085883a 	add	r2,r16,r2
 80109b4:	10800204 	addi	r2,r2,8
 80109b8:	10800017 	ldw	r2,0(r2)
 80109bc:	10000b0e 	bge	r2,zero,80109ec <alt_file_locked+0xb4>
 80109c0:	01400304 	movi	r5,12
 80109c4:	e13ffd17 	ldw	r4,-12(fp)
 80109c8:	800c2f80 	call	800c2f8 <__mulsi3>
 80109cc:	1007883a 	mov	r3,r2
 80109d0:	00820074 	movhi	r2,2049
 80109d4:	1089aa04 	addi	r2,r2,9896
 80109d8:	1887883a 	add	r3,r3,r2
 80109dc:	e0bffe17 	ldw	r2,-8(fp)
 80109e0:	18800226 	beq	r3,r2,80109ec <alt_file_locked+0xb4>
 80109e4:	00bffcc4 	movi	r2,-13
 80109e8:	00000a06 	br	8010a14 <alt_file_locked+0xdc>
 80109ec:	e0bffd17 	ldw	r2,-12(fp)
 80109f0:	10800044 	addi	r2,r2,1
 80109f4:	e0bffd15 	stw	r2,-12(fp)
 80109f8:	00820074 	movhi	r2,2049
 80109fc:	108e2c04 	addi	r2,r2,14512
 8010a00:	10800017 	ldw	r2,0(r2)
 8010a04:	1007883a 	mov	r3,r2
 8010a08:	e0bffd17 	ldw	r2,-12(fp)
 8010a0c:	18bfd72e 	bgeu	r3,r2,801096c <__alt_data_end+0xfc01096c>
 8010a10:	0005883a 	mov	r2,zero
 8010a14:	e6ffff04 	addi	sp,fp,-4
 8010a18:	dfc00217 	ldw	ra,8(sp)
 8010a1c:	df000117 	ldw	fp,4(sp)
 8010a20:	dc000017 	ldw	r16,0(sp)
 8010a24:	dec00304 	addi	sp,sp,12
 8010a28:	f800283a 	ret

08010a2c <open>:
 8010a2c:	defff604 	addi	sp,sp,-40
 8010a30:	dfc00915 	stw	ra,36(sp)
 8010a34:	df000815 	stw	fp,32(sp)
 8010a38:	df000804 	addi	fp,sp,32
 8010a3c:	e13ffd15 	stw	r4,-12(fp)
 8010a40:	e17ffe15 	stw	r5,-8(fp)
 8010a44:	e1bfff15 	stw	r6,-4(fp)
 8010a48:	00bfffc4 	movi	r2,-1
 8010a4c:	e0bff915 	stw	r2,-28(fp)
 8010a50:	00bffb44 	movi	r2,-19
 8010a54:	e0bffa15 	stw	r2,-24(fp)
 8010a58:	e03ffb15 	stw	zero,-20(fp)
 8010a5c:	01420074 	movhi	r5,2049
 8010a60:	294e2a04 	addi	r5,r5,14504
 8010a64:	e13ffd17 	ldw	r4,-12(fp)
 8010a68:	8010d480 	call	8010d48 <alt_find_dev>
 8010a6c:	e0bff815 	stw	r2,-32(fp)
 8010a70:	e0bff817 	ldw	r2,-32(fp)
 8010a74:	1000051e 	bne	r2,zero,8010a8c <open+0x60>
 8010a78:	e13ffd17 	ldw	r4,-12(fp)
 8010a7c:	8010dd80 	call	8010dd8 <alt_find_file>
 8010a80:	e0bff815 	stw	r2,-32(fp)
 8010a84:	00800044 	movi	r2,1
 8010a88:	e0bffb15 	stw	r2,-20(fp)
 8010a8c:	e0bff817 	ldw	r2,-32(fp)
 8010a90:	10002b26 	beq	r2,zero,8010b40 <open+0x114>
 8010a94:	e13ff817 	ldw	r4,-32(fp)
 8010a98:	8010eec0 	call	8010eec <alt_get_fd>
 8010a9c:	e0bff915 	stw	r2,-28(fp)
 8010aa0:	e0bff917 	ldw	r2,-28(fp)
 8010aa4:	1000030e 	bge	r2,zero,8010ab4 <open+0x88>
 8010aa8:	e0bff917 	ldw	r2,-28(fp)
 8010aac:	e0bffa15 	stw	r2,-24(fp)
 8010ab0:	00002506 	br	8010b48 <open+0x11c>
 8010ab4:	01400304 	movi	r5,12
 8010ab8:	e13ff917 	ldw	r4,-28(fp)
 8010abc:	800c2f80 	call	800c2f8 <__mulsi3>
 8010ac0:	1007883a 	mov	r3,r2
 8010ac4:	00820074 	movhi	r2,2049
 8010ac8:	1089aa04 	addi	r2,r2,9896
 8010acc:	1885883a 	add	r2,r3,r2
 8010ad0:	e0bffc15 	stw	r2,-16(fp)
 8010ad4:	e0fffe17 	ldw	r3,-8(fp)
 8010ad8:	00900034 	movhi	r2,16384
 8010adc:	10bfffc4 	addi	r2,r2,-1
 8010ae0:	1886703a 	and	r3,r3,r2
 8010ae4:	e0bffc17 	ldw	r2,-16(fp)
 8010ae8:	10c00215 	stw	r3,8(r2)
 8010aec:	e0bffb17 	ldw	r2,-20(fp)
 8010af0:	1000051e 	bne	r2,zero,8010b08 <open+0xdc>
 8010af4:	e13ffc17 	ldw	r4,-16(fp)
 8010af8:	80109380 	call	8010938 <alt_file_locked>
 8010afc:	e0bffa15 	stw	r2,-24(fp)
 8010b00:	e0bffa17 	ldw	r2,-24(fp)
 8010b04:	10001016 	blt	r2,zero,8010b48 <open+0x11c>
 8010b08:	e0bff817 	ldw	r2,-32(fp)
 8010b0c:	10800317 	ldw	r2,12(r2)
 8010b10:	10000826 	beq	r2,zero,8010b34 <open+0x108>
 8010b14:	e0bff817 	ldw	r2,-32(fp)
 8010b18:	10800317 	ldw	r2,12(r2)
 8010b1c:	e1ffff17 	ldw	r7,-4(fp)
 8010b20:	e1bffe17 	ldw	r6,-8(fp)
 8010b24:	e17ffd17 	ldw	r5,-12(fp)
 8010b28:	e13ffc17 	ldw	r4,-16(fp)
 8010b2c:	103ee83a 	callr	r2
 8010b30:	00000106 	br	8010b38 <open+0x10c>
 8010b34:	0005883a 	mov	r2,zero
 8010b38:	e0bffa15 	stw	r2,-24(fp)
 8010b3c:	00000206 	br	8010b48 <open+0x11c>
 8010b40:	00bffb44 	movi	r2,-19
 8010b44:	e0bffa15 	stw	r2,-24(fp)
 8010b48:	e0bffa17 	ldw	r2,-24(fp)
 8010b4c:	1000090e 	bge	r2,zero,8010b74 <open+0x148>
 8010b50:	e13ff917 	ldw	r4,-28(fp)
 8010b54:	800f2940 	call	800f294 <alt_release_fd>
 8010b58:	80108e80 	call	80108e8 <alt_get_errno>
 8010b5c:	1007883a 	mov	r3,r2
 8010b60:	e0bffa17 	ldw	r2,-24(fp)
 8010b64:	0085c83a 	sub	r2,zero,r2
 8010b68:	18800015 	stw	r2,0(r3)
 8010b6c:	00bfffc4 	movi	r2,-1
 8010b70:	00000106 	br	8010b78 <open+0x14c>
 8010b74:	e0bff917 	ldw	r2,-28(fp)
 8010b78:	e037883a 	mov	sp,fp
 8010b7c:	dfc00117 	ldw	ra,4(sp)
 8010b80:	df000017 	ldw	fp,0(sp)
 8010b84:	dec00204 	addi	sp,sp,8
 8010b88:	f800283a 	ret

08010b8c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010b8c:	defffa04 	addi	sp,sp,-24
 8010b90:	df000515 	stw	fp,20(sp)
 8010b94:	df000504 	addi	fp,sp,20
 8010b98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010b9c:	0005303a 	rdctl	r2,status
 8010ba0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010ba4:	e0fffc17 	ldw	r3,-16(fp)
 8010ba8:	00bfff84 	movi	r2,-2
 8010bac:	1884703a 	and	r2,r3,r2
 8010bb0:	1001703a 	wrctl	status,r2
  
  return context;
 8010bb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010bb8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010bbc:	e0bfff17 	ldw	r2,-4(fp)
 8010bc0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010bc4:	e0bffd17 	ldw	r2,-12(fp)
 8010bc8:	10800017 	ldw	r2,0(r2)
 8010bcc:	e0fffd17 	ldw	r3,-12(fp)
 8010bd0:	18c00117 	ldw	r3,4(r3)
 8010bd4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010bd8:	e0bffd17 	ldw	r2,-12(fp)
 8010bdc:	10800117 	ldw	r2,4(r2)
 8010be0:	e0fffd17 	ldw	r3,-12(fp)
 8010be4:	18c00017 	ldw	r3,0(r3)
 8010be8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010bec:	e0bffd17 	ldw	r2,-12(fp)
 8010bf0:	e0fffd17 	ldw	r3,-12(fp)
 8010bf4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010bf8:	e0bffd17 	ldw	r2,-12(fp)
 8010bfc:	e0fffd17 	ldw	r3,-12(fp)
 8010c00:	10c00015 	stw	r3,0(r2)
 8010c04:	e0bffb17 	ldw	r2,-20(fp)
 8010c08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c0c:	e0bffe17 	ldw	r2,-8(fp)
 8010c10:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010c14:	e037883a 	mov	sp,fp
 8010c18:	df000017 	ldw	fp,0(sp)
 8010c1c:	dec00104 	addi	sp,sp,4
 8010c20:	f800283a 	ret

08010c24 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010c24:	defffb04 	addi	sp,sp,-20
 8010c28:	dfc00415 	stw	ra,16(sp)
 8010c2c:	df000315 	stw	fp,12(sp)
 8010c30:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010c34:	d0a00e17 	ldw	r2,-32712(gp)
 8010c38:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010c3c:	d0a6d817 	ldw	r2,-25760(gp)
 8010c40:	10800044 	addi	r2,r2,1
 8010c44:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010c48:	00002e06 	br	8010d04 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010c4c:	e0bffd17 	ldw	r2,-12(fp)
 8010c50:	10800017 	ldw	r2,0(r2)
 8010c54:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010c58:	e0bffd17 	ldw	r2,-12(fp)
 8010c5c:	10800403 	ldbu	r2,16(r2)
 8010c60:	10803fcc 	andi	r2,r2,255
 8010c64:	10000426 	beq	r2,zero,8010c78 <alt_tick+0x54>
 8010c68:	d0a6d817 	ldw	r2,-25760(gp)
 8010c6c:	1000021e 	bne	r2,zero,8010c78 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010c70:	e0bffd17 	ldw	r2,-12(fp)
 8010c74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010c78:	e0bffd17 	ldw	r2,-12(fp)
 8010c7c:	10800217 	ldw	r2,8(r2)
 8010c80:	d0e6d817 	ldw	r3,-25760(gp)
 8010c84:	18801d36 	bltu	r3,r2,8010cfc <alt_tick+0xd8>
 8010c88:	e0bffd17 	ldw	r2,-12(fp)
 8010c8c:	10800403 	ldbu	r2,16(r2)
 8010c90:	10803fcc 	andi	r2,r2,255
 8010c94:	1000191e 	bne	r2,zero,8010cfc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010c98:	e0bffd17 	ldw	r2,-12(fp)
 8010c9c:	10800317 	ldw	r2,12(r2)
 8010ca0:	e0fffd17 	ldw	r3,-12(fp)
 8010ca4:	18c00517 	ldw	r3,20(r3)
 8010ca8:	1809883a 	mov	r4,r3
 8010cac:	103ee83a 	callr	r2
 8010cb0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010cb4:	e0bfff17 	ldw	r2,-4(fp)
 8010cb8:	1000031e 	bne	r2,zero,8010cc8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010cbc:	e13ffd17 	ldw	r4,-12(fp)
 8010cc0:	8010b8c0 	call	8010b8c <alt_alarm_stop>
 8010cc4:	00000d06 	br	8010cfc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010cc8:	e0bffd17 	ldw	r2,-12(fp)
 8010ccc:	10c00217 	ldw	r3,8(r2)
 8010cd0:	e0bfff17 	ldw	r2,-4(fp)
 8010cd4:	1887883a 	add	r3,r3,r2
 8010cd8:	e0bffd17 	ldw	r2,-12(fp)
 8010cdc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010ce0:	e0bffd17 	ldw	r2,-12(fp)
 8010ce4:	10c00217 	ldw	r3,8(r2)
 8010ce8:	d0a6d817 	ldw	r2,-25760(gp)
 8010cec:	1880032e 	bgeu	r3,r2,8010cfc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010cf0:	e0bffd17 	ldw	r2,-12(fp)
 8010cf4:	00c00044 	movi	r3,1
 8010cf8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010cfc:	e0bffe17 	ldw	r2,-8(fp)
 8010d00:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010d04:	e0fffd17 	ldw	r3,-12(fp)
 8010d08:	d0a00e04 	addi	r2,gp,-32712
 8010d0c:	18bfcf1e 	bne	r3,r2,8010c4c <__alt_data_end+0xfc010c4c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010d10:	0001883a 	nop
}
 8010d14:	e037883a 	mov	sp,fp
 8010d18:	dfc00117 	ldw	ra,4(sp)
 8010d1c:	df000017 	ldw	fp,0(sp)
 8010d20:	dec00204 	addi	sp,sp,8
 8010d24:	f800283a 	ret

08010d28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8010d28:	deffff04 	addi	sp,sp,-4
 8010d2c:	df000015 	stw	fp,0(sp)
 8010d30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010d34:	000170fa 	wrctl	ienable,zero
}
 8010d38:	e037883a 	mov	sp,fp
 8010d3c:	df000017 	ldw	fp,0(sp)
 8010d40:	dec00104 	addi	sp,sp,4
 8010d44:	f800283a 	ret

08010d48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010d48:	defffa04 	addi	sp,sp,-24
 8010d4c:	dfc00515 	stw	ra,20(sp)
 8010d50:	df000415 	stw	fp,16(sp)
 8010d54:	df000404 	addi	fp,sp,16
 8010d58:	e13ffe15 	stw	r4,-8(fp)
 8010d5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010d60:	e0bfff17 	ldw	r2,-4(fp)
 8010d64:	10800017 	ldw	r2,0(r2)
 8010d68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010d6c:	e13ffe17 	ldw	r4,-8(fp)
 8010d70:	80022ec0 	call	80022ec <strlen>
 8010d74:	10800044 	addi	r2,r2,1
 8010d78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010d7c:	00000d06 	br	8010db4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010d80:	e0bffc17 	ldw	r2,-16(fp)
 8010d84:	10c00217 	ldw	r3,8(r2)
 8010d88:	e0bffd17 	ldw	r2,-12(fp)
 8010d8c:	1809883a 	mov	r4,r3
 8010d90:	e17ffe17 	ldw	r5,-8(fp)
 8010d94:	100d883a 	mov	r6,r2
 8010d98:	801100c0 	call	801100c <memcmp>
 8010d9c:	1000021e 	bne	r2,zero,8010da8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010da0:	e0bffc17 	ldw	r2,-16(fp)
 8010da4:	00000706 	br	8010dc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010da8:	e0bffc17 	ldw	r2,-16(fp)
 8010dac:	10800017 	ldw	r2,0(r2)
 8010db0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010db4:	e0fffc17 	ldw	r3,-16(fp)
 8010db8:	e0bfff17 	ldw	r2,-4(fp)
 8010dbc:	18bff01e 	bne	r3,r2,8010d80 <__alt_data_end+0xfc010d80>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010dc0:	0005883a 	mov	r2,zero
}
 8010dc4:	e037883a 	mov	sp,fp
 8010dc8:	dfc00117 	ldw	ra,4(sp)
 8010dcc:	df000017 	ldw	fp,0(sp)
 8010dd0:	dec00204 	addi	sp,sp,8
 8010dd4:	f800283a 	ret

08010dd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010dd8:	defffb04 	addi	sp,sp,-20
 8010ddc:	dfc00415 	stw	ra,16(sp)
 8010de0:	df000315 	stw	fp,12(sp)
 8010de4:	df000304 	addi	fp,sp,12
 8010de8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010dec:	00820074 	movhi	r2,2049
 8010df0:	108e2804 	addi	r2,r2,14496
 8010df4:	10800017 	ldw	r2,0(r2)
 8010df8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010dfc:	00003106 	br	8010ec4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010e00:	e0bffd17 	ldw	r2,-12(fp)
 8010e04:	10800217 	ldw	r2,8(r2)
 8010e08:	1009883a 	mov	r4,r2
 8010e0c:	80022ec0 	call	80022ec <strlen>
 8010e10:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010e14:	e0bffd17 	ldw	r2,-12(fp)
 8010e18:	10c00217 	ldw	r3,8(r2)
 8010e1c:	e0bffe17 	ldw	r2,-8(fp)
 8010e20:	10bfffc4 	addi	r2,r2,-1
 8010e24:	1885883a 	add	r2,r3,r2
 8010e28:	10800003 	ldbu	r2,0(r2)
 8010e2c:	10803fcc 	andi	r2,r2,255
 8010e30:	1080201c 	xori	r2,r2,128
 8010e34:	10bfe004 	addi	r2,r2,-128
 8010e38:	10800bd8 	cmpnei	r2,r2,47
 8010e3c:	1000031e 	bne	r2,zero,8010e4c <alt_find_file+0x74>
    {
      len -= 1;
 8010e40:	e0bffe17 	ldw	r2,-8(fp)
 8010e44:	10bfffc4 	addi	r2,r2,-1
 8010e48:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010e4c:	e0bffe17 	ldw	r2,-8(fp)
 8010e50:	e0ffff17 	ldw	r3,-4(fp)
 8010e54:	1885883a 	add	r2,r3,r2
 8010e58:	10800003 	ldbu	r2,0(r2)
 8010e5c:	10803fcc 	andi	r2,r2,255
 8010e60:	1080201c 	xori	r2,r2,128
 8010e64:	10bfe004 	addi	r2,r2,-128
 8010e68:	10800be0 	cmpeqi	r2,r2,47
 8010e6c:	1000081e 	bne	r2,zero,8010e90 <alt_find_file+0xb8>
 8010e70:	e0bffe17 	ldw	r2,-8(fp)
 8010e74:	e0ffff17 	ldw	r3,-4(fp)
 8010e78:	1885883a 	add	r2,r3,r2
 8010e7c:	10800003 	ldbu	r2,0(r2)
 8010e80:	10803fcc 	andi	r2,r2,255
 8010e84:	1080201c 	xori	r2,r2,128
 8010e88:	10bfe004 	addi	r2,r2,-128
 8010e8c:	10000a1e 	bne	r2,zero,8010eb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010e90:	e0bffd17 	ldw	r2,-12(fp)
 8010e94:	10c00217 	ldw	r3,8(r2)
 8010e98:	e0bffe17 	ldw	r2,-8(fp)
 8010e9c:	1809883a 	mov	r4,r3
 8010ea0:	e17fff17 	ldw	r5,-4(fp)
 8010ea4:	100d883a 	mov	r6,r2
 8010ea8:	801100c0 	call	801100c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010eac:	1000021e 	bne	r2,zero,8010eb8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010eb0:	e0bffd17 	ldw	r2,-12(fp)
 8010eb4:	00000806 	br	8010ed8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010eb8:	e0bffd17 	ldw	r2,-12(fp)
 8010ebc:	10800017 	ldw	r2,0(r2)
 8010ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010ec4:	e0fffd17 	ldw	r3,-12(fp)
 8010ec8:	00820074 	movhi	r2,2049
 8010ecc:	108e2804 	addi	r2,r2,14496
 8010ed0:	18bfcb1e 	bne	r3,r2,8010e00 <__alt_data_end+0xfc010e00>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010ed4:	0005883a 	mov	r2,zero
}
 8010ed8:	e037883a 	mov	sp,fp
 8010edc:	dfc00117 	ldw	ra,4(sp)
 8010ee0:	df000017 	ldw	fp,0(sp)
 8010ee4:	dec00204 	addi	sp,sp,8
 8010ee8:	f800283a 	ret

08010eec <alt_get_fd>:
 8010eec:	defffa04 	addi	sp,sp,-24
 8010ef0:	dfc00515 	stw	ra,20(sp)
 8010ef4:	df000415 	stw	fp,16(sp)
 8010ef8:	dc000315 	stw	r16,12(sp)
 8010efc:	df000404 	addi	fp,sp,16
 8010f00:	e13ffe15 	stw	r4,-8(fp)
 8010f04:	00bffa04 	movi	r2,-24
 8010f08:	e0bffd15 	stw	r2,-12(fp)
 8010f0c:	e03ffc15 	stw	zero,-16(fp)
 8010f10:	00002106 	br	8010f98 <alt_get_fd+0xac>
 8010f14:	04020074 	movhi	r16,2049
 8010f18:	8409aa04 	addi	r16,r16,9896
 8010f1c:	e0bffc17 	ldw	r2,-16(fp)
 8010f20:	01400304 	movi	r5,12
 8010f24:	1009883a 	mov	r4,r2
 8010f28:	800c2f80 	call	800c2f8 <__mulsi3>
 8010f2c:	8085883a 	add	r2,r16,r2
 8010f30:	10800017 	ldw	r2,0(r2)
 8010f34:	1000151e 	bne	r2,zero,8010f8c <alt_get_fd+0xa0>
 8010f38:	04020074 	movhi	r16,2049
 8010f3c:	8409aa04 	addi	r16,r16,9896
 8010f40:	e0bffc17 	ldw	r2,-16(fp)
 8010f44:	01400304 	movi	r5,12
 8010f48:	1009883a 	mov	r4,r2
 8010f4c:	800c2f80 	call	800c2f8 <__mulsi3>
 8010f50:	8085883a 	add	r2,r16,r2
 8010f54:	e0fffe17 	ldw	r3,-8(fp)
 8010f58:	10c00015 	stw	r3,0(r2)
 8010f5c:	00820074 	movhi	r2,2049
 8010f60:	108e2c04 	addi	r2,r2,14512
 8010f64:	10c00017 	ldw	r3,0(r2)
 8010f68:	e0bffc17 	ldw	r2,-16(fp)
 8010f6c:	1880040e 	bge	r3,r2,8010f80 <alt_get_fd+0x94>
 8010f70:	00820074 	movhi	r2,2049
 8010f74:	108e2c04 	addi	r2,r2,14512
 8010f78:	e0fffc17 	ldw	r3,-16(fp)
 8010f7c:	10c00015 	stw	r3,0(r2)
 8010f80:	e0bffc17 	ldw	r2,-16(fp)
 8010f84:	e0bffd15 	stw	r2,-12(fp)
 8010f88:	00000606 	br	8010fa4 <alt_get_fd+0xb8>
 8010f8c:	e0bffc17 	ldw	r2,-16(fp)
 8010f90:	10800044 	addi	r2,r2,1
 8010f94:	e0bffc15 	stw	r2,-16(fp)
 8010f98:	e0bffc17 	ldw	r2,-16(fp)
 8010f9c:	10800810 	cmplti	r2,r2,32
 8010fa0:	103fdc1e 	bne	r2,zero,8010f14 <__alt_data_end+0xfc010f14>
 8010fa4:	e0bffd17 	ldw	r2,-12(fp)
 8010fa8:	e6ffff04 	addi	sp,fp,-4
 8010fac:	dfc00217 	ldw	ra,8(sp)
 8010fb0:	df000117 	ldw	fp,4(sp)
 8010fb4:	dc000017 	ldw	r16,0(sp)
 8010fb8:	dec00304 	addi	sp,sp,12
 8010fbc:	f800283a 	ret

08010fc0 <atexit>:
 8010fc0:	200b883a 	mov	r5,r4
 8010fc4:	000d883a 	mov	r6,zero
 8010fc8:	0009883a 	mov	r4,zero
 8010fcc:	000f883a 	mov	r7,zero
 8010fd0:	80110881 	jmpi	8011088 <__register_exitproc>

08010fd4 <exit>:
 8010fd4:	defffe04 	addi	sp,sp,-8
 8010fd8:	000b883a 	mov	r5,zero
 8010fdc:	dc000015 	stw	r16,0(sp)
 8010fe0:	dfc00115 	stw	ra,4(sp)
 8010fe4:	2021883a 	mov	r16,r4
 8010fe8:	801119c0 	call	801119c <__call_exitprocs>
 8010fec:	00820074 	movhi	r2,2049
 8010ff0:	108e2204 	addi	r2,r2,14472
 8010ff4:	11000017 	ldw	r4,0(r2)
 8010ff8:	20800f17 	ldw	r2,60(r4)
 8010ffc:	10000126 	beq	r2,zero,8011004 <exit+0x30>
 8011000:	103ee83a 	callr	r2
 8011004:	8009883a 	mov	r4,r16
 8011008:	80113300 	call	8011330 <_exit>

0801100c <memcmp>:
 801100c:	01c000c4 	movi	r7,3
 8011010:	3980192e 	bgeu	r7,r6,8011078 <memcmp+0x6c>
 8011014:	2144b03a 	or	r2,r4,r5
 8011018:	11c4703a 	and	r2,r2,r7
 801101c:	10000f26 	beq	r2,zero,801105c <memcmp+0x50>
 8011020:	20800003 	ldbu	r2,0(r4)
 8011024:	28c00003 	ldbu	r3,0(r5)
 8011028:	10c0151e 	bne	r2,r3,8011080 <memcmp+0x74>
 801102c:	31bfff84 	addi	r6,r6,-2
 8011030:	01ffffc4 	movi	r7,-1
 8011034:	00000406 	br	8011048 <memcmp+0x3c>
 8011038:	20800003 	ldbu	r2,0(r4)
 801103c:	28c00003 	ldbu	r3,0(r5)
 8011040:	31bfffc4 	addi	r6,r6,-1
 8011044:	10c00e1e 	bne	r2,r3,8011080 <memcmp+0x74>
 8011048:	21000044 	addi	r4,r4,1
 801104c:	29400044 	addi	r5,r5,1
 8011050:	31fff91e 	bne	r6,r7,8011038 <__alt_data_end+0xfc011038>
 8011054:	0005883a 	mov	r2,zero
 8011058:	f800283a 	ret
 801105c:	20c00017 	ldw	r3,0(r4)
 8011060:	28800017 	ldw	r2,0(r5)
 8011064:	1880041e 	bne	r3,r2,8011078 <memcmp+0x6c>
 8011068:	31bfff04 	addi	r6,r6,-4
 801106c:	21000104 	addi	r4,r4,4
 8011070:	29400104 	addi	r5,r5,4
 8011074:	39bff936 	bltu	r7,r6,801105c <__alt_data_end+0xfc01105c>
 8011078:	303fe91e 	bne	r6,zero,8011020 <__alt_data_end+0xfc011020>
 801107c:	003ff506 	br	8011054 <__alt_data_end+0xfc011054>
 8011080:	10c5c83a 	sub	r2,r2,r3
 8011084:	f800283a 	ret

08011088 <__register_exitproc>:
 8011088:	00820074 	movhi	r2,2049
 801108c:	defffa04 	addi	sp,sp,-24
 8011090:	108e2204 	addi	r2,r2,14472
 8011094:	dc000315 	stw	r16,12(sp)
 8011098:	14000017 	ldw	r16,0(r2)
 801109c:	dc400415 	stw	r17,16(sp)
 80110a0:	dfc00515 	stw	ra,20(sp)
 80110a4:	80805217 	ldw	r2,328(r16)
 80110a8:	2023883a 	mov	r17,r4
 80110ac:	10003626 	beq	r2,zero,8011188 <__register_exitproc+0x100>
 80110b0:	10c00117 	ldw	r3,4(r2)
 80110b4:	010007c4 	movi	r4,31
 80110b8:	20c00e16 	blt	r4,r3,80110f4 <__register_exitproc+0x6c>
 80110bc:	1a400044 	addi	r9,r3,1
 80110c0:	8800211e 	bne	r17,zero,8011148 <__register_exitproc+0xc0>
 80110c4:	18c00084 	addi	r3,r3,2
 80110c8:	18c7883a 	add	r3,r3,r3
 80110cc:	18c7883a 	add	r3,r3,r3
 80110d0:	12400115 	stw	r9,4(r2)
 80110d4:	10c7883a 	add	r3,r2,r3
 80110d8:	19400015 	stw	r5,0(r3)
 80110dc:	0005883a 	mov	r2,zero
 80110e0:	dfc00517 	ldw	ra,20(sp)
 80110e4:	dc400417 	ldw	r17,16(sp)
 80110e8:	dc000317 	ldw	r16,12(sp)
 80110ec:	dec00604 	addi	sp,sp,24
 80110f0:	f800283a 	ret
 80110f4:	00800034 	movhi	r2,0
 80110f8:	10800004 	addi	r2,r2,0
 80110fc:	10002526 	beq	r2,zero,8011194 <__register_exitproc+0x10c>
 8011100:	01006404 	movi	r4,400
 8011104:	d9400015 	stw	r5,0(sp)
 8011108:	d9800115 	stw	r6,4(sp)
 801110c:	d9c00215 	stw	r7,8(sp)
 8011110:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011114:	d9400017 	ldw	r5,0(sp)
 8011118:	d9800117 	ldw	r6,4(sp)
 801111c:	d9c00217 	ldw	r7,8(sp)
 8011120:	10001c26 	beq	r2,zero,8011194 <__register_exitproc+0x10c>
 8011124:	80c05217 	ldw	r3,328(r16)
 8011128:	10000115 	stw	zero,4(r2)
 801112c:	02400044 	movi	r9,1
 8011130:	10c00015 	stw	r3,0(r2)
 8011134:	80805215 	stw	r2,328(r16)
 8011138:	10006215 	stw	zero,392(r2)
 801113c:	10006315 	stw	zero,396(r2)
 8011140:	0007883a 	mov	r3,zero
 8011144:	883fdf26 	beq	r17,zero,80110c4 <__alt_data_end+0xfc0110c4>
 8011148:	18d1883a 	add	r8,r3,r3
 801114c:	4211883a 	add	r8,r8,r8
 8011150:	1211883a 	add	r8,r2,r8
 8011154:	41802215 	stw	r6,136(r8)
 8011158:	01000044 	movi	r4,1
 801115c:	11806217 	ldw	r6,392(r2)
 8011160:	20c8983a 	sll	r4,r4,r3
 8011164:	310cb03a 	or	r6,r6,r4
 8011168:	11806215 	stw	r6,392(r2)
 801116c:	41c04215 	stw	r7,264(r8)
 8011170:	01800084 	movi	r6,2
 8011174:	89bfd31e 	bne	r17,r6,80110c4 <__alt_data_end+0xfc0110c4>
 8011178:	11806317 	ldw	r6,396(r2)
 801117c:	3108b03a 	or	r4,r6,r4
 8011180:	11006315 	stw	r4,396(r2)
 8011184:	003fcf06 	br	80110c4 <__alt_data_end+0xfc0110c4>
 8011188:	80805304 	addi	r2,r16,332
 801118c:	80805215 	stw	r2,328(r16)
 8011190:	003fc706 	br	80110b0 <__alt_data_end+0xfc0110b0>
 8011194:	00bfffc4 	movi	r2,-1
 8011198:	003fd106 	br	80110e0 <__alt_data_end+0xfc0110e0>

0801119c <__call_exitprocs>:
 801119c:	00820074 	movhi	r2,2049
 80111a0:	108e2204 	addi	r2,r2,14472
 80111a4:	10800017 	ldw	r2,0(r2)
 80111a8:	defff404 	addi	sp,sp,-48
 80111ac:	dd800815 	stw	r22,32(sp)
 80111b0:	d8800015 	stw	r2,0(sp)
 80111b4:	10805204 	addi	r2,r2,328
 80111b8:	dd000615 	stw	r20,24(sp)
 80111bc:	dc800415 	stw	r18,16(sp)
 80111c0:	dfc00b15 	stw	ra,44(sp)
 80111c4:	df000a15 	stw	fp,40(sp)
 80111c8:	ddc00915 	stw	r23,36(sp)
 80111cc:	dd400715 	stw	r21,28(sp)
 80111d0:	dcc00515 	stw	r19,20(sp)
 80111d4:	dc400315 	stw	r17,12(sp)
 80111d8:	dc000215 	stw	r16,8(sp)
 80111dc:	2025883a 	mov	r18,r4
 80111e0:	2829883a 	mov	r20,r5
 80111e4:	d8800115 	stw	r2,4(sp)
 80111e8:	05bfffc4 	movi	r22,-1
 80111ec:	d8800017 	ldw	r2,0(sp)
 80111f0:	14c05217 	ldw	r19,328(r2)
 80111f4:	98001d26 	beq	r19,zero,801126c <__call_exitprocs+0xd0>
 80111f8:	dd400117 	ldw	r21,4(sp)
 80111fc:	98800117 	ldw	r2,4(r19)
 8011200:	173fffc4 	addi	fp,r2,-1
 8011204:	e0000d16 	blt	fp,zero,801123c <__call_exitprocs+0xa0>
 8011208:	14000044 	addi	r16,r2,1
 801120c:	8421883a 	add	r16,r16,r16
 8011210:	8421883a 	add	r16,r16,r16
 8011214:	84402004 	addi	r17,r16,128
 8011218:	9c63883a 	add	r17,r19,r17
 801121c:	9c21883a 	add	r16,r19,r16
 8011220:	a0001e26 	beq	r20,zero,801129c <__call_exitprocs+0x100>
 8011224:	80804017 	ldw	r2,256(r16)
 8011228:	15001c26 	beq	r2,r20,801129c <__call_exitprocs+0x100>
 801122c:	e73fffc4 	addi	fp,fp,-1
 8011230:	843fff04 	addi	r16,r16,-4
 8011234:	8c7fff04 	addi	r17,r17,-4
 8011238:	e5bff91e 	bne	fp,r22,8011220 <__alt_data_end+0xfc011220>
 801123c:	00800034 	movhi	r2,0
 8011240:	10800004 	addi	r2,r2,0
 8011244:	10000926 	beq	r2,zero,801126c <__call_exitprocs+0xd0>
 8011248:	98800117 	ldw	r2,4(r19)
 801124c:	1000311e 	bne	r2,zero,8011314 <__call_exitprocs+0x178>
 8011250:	98800017 	ldw	r2,0(r19)
 8011254:	10003426 	beq	r2,zero,8011328 <__call_exitprocs+0x18c>
 8011258:	9809883a 	mov	r4,r19
 801125c:	a8800015 	stw	r2,0(r21)
 8011260:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011264:	acc00017 	ldw	r19,0(r21)
 8011268:	983fe41e 	bne	r19,zero,80111fc <__alt_data_end+0xfc0111fc>
 801126c:	dfc00b17 	ldw	ra,44(sp)
 8011270:	df000a17 	ldw	fp,40(sp)
 8011274:	ddc00917 	ldw	r23,36(sp)
 8011278:	dd800817 	ldw	r22,32(sp)
 801127c:	dd400717 	ldw	r21,28(sp)
 8011280:	dd000617 	ldw	r20,24(sp)
 8011284:	dcc00517 	ldw	r19,20(sp)
 8011288:	dc800417 	ldw	r18,16(sp)
 801128c:	dc400317 	ldw	r17,12(sp)
 8011290:	dc000217 	ldw	r16,8(sp)
 8011294:	dec00c04 	addi	sp,sp,48
 8011298:	f800283a 	ret
 801129c:	98800117 	ldw	r2,4(r19)
 80112a0:	80c00017 	ldw	r3,0(r16)
 80112a4:	10bfffc4 	addi	r2,r2,-1
 80112a8:	17001526 	beq	r2,fp,8011300 <__call_exitprocs+0x164>
 80112ac:	80000015 	stw	zero,0(r16)
 80112b0:	183fde26 	beq	r3,zero,801122c <__alt_data_end+0xfc01122c>
 80112b4:	00800044 	movi	r2,1
 80112b8:	1708983a 	sll	r4,r2,fp
 80112bc:	98806217 	ldw	r2,392(r19)
 80112c0:	9dc00117 	ldw	r23,4(r19)
 80112c4:	2084703a 	and	r2,r4,r2
 80112c8:	1000061e 	bne	r2,zero,80112e4 <__call_exitprocs+0x148>
 80112cc:	183ee83a 	callr	r3
 80112d0:	98800117 	ldw	r2,4(r19)
 80112d4:	15ffc51e 	bne	r2,r23,80111ec <__alt_data_end+0xfc0111ec>
 80112d8:	a8800017 	ldw	r2,0(r21)
 80112dc:	14ffd326 	beq	r2,r19,801122c <__alt_data_end+0xfc01122c>
 80112e0:	003fc206 	br	80111ec <__alt_data_end+0xfc0111ec>
 80112e4:	98806317 	ldw	r2,396(r19)
 80112e8:	2084703a 	and	r2,r4,r2
 80112ec:	1000061e 	bne	r2,zero,8011308 <__call_exitprocs+0x16c>
 80112f0:	89400017 	ldw	r5,0(r17)
 80112f4:	9009883a 	mov	r4,r18
 80112f8:	183ee83a 	callr	r3
 80112fc:	003ff406 	br	80112d0 <__alt_data_end+0xfc0112d0>
 8011300:	9f000115 	stw	fp,4(r19)
 8011304:	003fea06 	br	80112b0 <__alt_data_end+0xfc0112b0>
 8011308:	89000017 	ldw	r4,0(r17)
 801130c:	183ee83a 	callr	r3
 8011310:	003fef06 	br	80112d0 <__alt_data_end+0xfc0112d0>
 8011314:	98800017 	ldw	r2,0(r19)
 8011318:	982b883a 	mov	r21,r19
 801131c:	1027883a 	mov	r19,r2
 8011320:	983fb61e 	bne	r19,zero,80111fc <__alt_data_end+0xfc0111fc>
 8011324:	003fd106 	br	801126c <__alt_data_end+0xfc01126c>
 8011328:	0005883a 	mov	r2,zero
 801132c:	003ffa06 	br	8011318 <__alt_data_end+0xfc011318>

08011330 <_exit>:
 8011330:	defffd04 	addi	sp,sp,-12
 8011334:	df000215 	stw	fp,8(sp)
 8011338:	df000204 	addi	fp,sp,8
 801133c:	e13fff15 	stw	r4,-4(fp)
 8011340:	0001883a 	nop
 8011344:	e0bfff17 	ldw	r2,-4(fp)
 8011348:	e0bffe15 	stw	r2,-8(fp)
 801134c:	e0bffe17 	ldw	r2,-8(fp)
 8011350:	10000226 	beq	r2,zero,801135c <_exit+0x2c>
 8011354:	002af070 	cmpltui	zero,zero,43969
 8011358:	00000106 	br	8011360 <_exit+0x30>
 801135c:	002af0b0 	cmpltui	zero,zero,43970
 8011360:	003fff06 	br	8011360 <__alt_data_end+0xfc011360>
