import part2
import numpy as np

#check affine functions
def check_affine():
    a = np.array([[0.0976270078546, 0.430378732745, 0.205526752143, 0.0897663659938, -0.152690401322, 0.291788226133, -0.124825577475, 0.783546001564], 
[0.927325521002, -0.233116962348, 0.583450076165, 0.0577898395058, 0.136089122188, 0.851193276585, -0.857927883604, -0.825741400597], 
[-0.959563205119, 0.665239691096, 0.5563135019, 0.740024296494, 0.957236684466, 0.598317128433, -0.0770412754941, 0.561058352573], 
[-0.763451148262, 0.279842042655, -0.713293425182, 0.889337834099, 0.0436966435001, -0.170676120019, -0.470888775791, 0.548467378868], 
[-0.0876993355669, 0.136867897737, -0.962420399127, 0.235270994152, 0.224191445445, 0.23386799375, 0.887496157029, 0.363640598207], 
[-0.280984198852, -0.125936092401, 0.395262391855, -0.879549056741, 0.333533430891, 0.341275739236, -0.579234877852, -0.74214740469], 
[-0.369143298152, -0.272578458115, 0.140393540836, -0.122796973075, 0.976747676118, -0.795910378504, -0.58224648781, -0.67738096423], 
[0.306216650931, -0.49341679492, -0.0673784542874, -0.511148815997, -0.682060832709, -0.779249717671, 0.312659178931, -0.723634097303], 
[-0.60683527664, -0.262549658678, 0.641986459696, -0.805797448414, 0.675889814998, -0.807803184212, 0.952918930027, -0.0626975967046], 
[0.953522176381, 0.20969103949, 0.478527158797, -0.921624415491, -0.434386074847, -0.759606877574, -0.407719604956, -0.762544562092]])

    w = np.array([[0.317983179394, 0.414262994515, 0.0641474963488, 0.69247211937], 
[0.566601454207, 0.265389490939, 0.523248053467, 0.0939405107584],
[0.575946495556, 0.929296197576, 0.318568952451, 0.667410379964],
[0.131797862404, 0.716327204119, 0.289406092947, 0.183191362007],
[0.58651293481, 0.0201075461875, 0.828940029217, 0.00469547619255],
[0.677816536796, 0.270007973192, 0.735194022123, 0.962188545117],
[0.24875314352, 0.576157334418, 0.592041931272, 0.572251905791],
[0.223081632641, 0.952749011517, 0.447125378618, 0.846408672471]]) 

    b = np.array([0.699479275318, 0.297436950855, 0.813797819702, 0.396505740847])

    z, acache, wcache, bcache = part2.affine_forward(a, w, b)
    
    z_expected = np.array([[1.3565476213, 1.45771394424, 1.50109965789, 1.52996162149],
[1.46507229855, 0.154860821512, 0.815361956687, 1.04652279418],
[2.26219902, 1.79451057522, 2.93034410997, 1.3123696034],
[0.236827022288, 0.235670995932, 0.818587410666, -0.388271700598], 
[0.817747243124, 0.497036862725, 1.68708708207, 0.79114179937], 
[0.767800816841, -1.05707251906, 0.453867861946, -0.336912607238], 
[0.229776388413, -1.06142232183, 0.233607024277, -1.48127943772], 
[-0.600774727804, -0.868839796371, -0.870867878022, -0.762964836374], 
[0.693232976094, 0.280523916818, 1.11132084879, -0.0493649852366], 
[0.234454074768, -0.642654040537, -0.630474086786, -0.384635229845]]) 

    error = np.mean(z - z_expected)
    if acache.all() == a.all() and wcache.all() == w.all() and bcache.all() == b.all() and error < 0.000001:
	print "affine_forward test: passed"
    else:
	print "affine_forward test: failed"

    dz = np.array([[0.762206394222, 0.162545745272, 0.76347072371, 0.385063180156], 
[0.450508559639, 0.0026487638534, 0.912167269446, 0.287980398459], 
[-0.152289902884, 0.212786428256, -0.961613603381, -0.396850366651], 
[0.320347074985, -0.419844785579, 0.236030857998, -0.142462598108], 
[-0.729051871555, -0.403435348088, 0.139929821403, 0.181745522496], 
[0.148650497699, 0.306401639714, 0.304206540003, -0.137163129132], 
[0.793093191702, -0.264876259904, -0.128270149469, 0.783846710031], 
[0.612387978092, 0.407777167081, -0.799546225375, 0.838965227489], 
[0.428482599098, 0.997694013136, -0.701103390684, 0.736252114736], 
[-0.675014130647, 0.231119128568, -0.752360034301, 0.696016458644]])

    da, dw, db = part2.affine_backward(dz, acache, wcache, bcache)
    
    da_expected = np.array([[0.625325751686, 0.910662785842, 1.09025647671, 0.508386440381, 1.0849918043, 1.49232723892, 0.955612980319, 0.992187496501],
[0.402283072428, 0.760304533008, 0.744719590965, 0.378015733751, 1.0217665257, 1.25378870334, 0.818430128809, 0.754626034617], 
[-0.296769004127, -0.570259170855, -0.461171509488, -0.218643171498, -0.884024794879, -1.13458803206, -0.711698084277, -0.597100459487], 
[-0.155571765333, 0.180206402394, -0.225546301167, -0.216314330662, 0.374432151277, 0.140227701159, -0.103993638871, -0.343589347746], 
[-0.264124712596, -0.429858078389, -0.6289296606, -0.311288440488, -0.318863635694, -0.325345147289, -0.22694763628, -0.33061355009], 
[0.0987316638538, 0.311831668852, 0.375719274577, 0.301987773504, 0.34487135674, 0.275162689303, 0.315123995987, 0.345007457421], 
[0.677025645661, 0.385590234231, 0.692915286681, 0.0212617002752, 0.35718567593, 1.12595785689, 0.417290491331, 0.530665743355], 
[0.89332720721, 0.115651509609, 1.03687197853, 0.295110937957, -0.291463661677, 0.744610911219, 0.394011799137, 0.877731838523], 
[1.01441800376, 0.209869285262, 1.44196883502, 0.703119888263, -0.306343845719, 0.752784259148, 0.687654187001, 1.3558276386], 
[0.314810942572, -0.649414181991, 0.0508561654992, -0.0136418753051, -1.01165050036, -0.278563268835, -0.0818828486686, 0.322330368551]]) 

    dw_expected = np.array([[-0.592989557085, -0.0784521830563, 1.07577136055, 1.00124882857],
[-0.679535740446, -0.342887010295, -0.0210864481907, -0.838102423816], 
[0.888841849797, 1.64862537856, -0.802889784174, 0.758121864649], 
[-0.169187817234, -1.75843755655, 1.06767757975, -1.96559300121], 
[0.639070883001, 0.209721081747, -0.496784874478, -0.0220314371997], 
[-0.601510127786, -0.829570939293, 2.38310023411, -2.26103035451], 
[-0.940677557596, 0.761426964959, -1.50359799071, 0.267001077495], 
[-0.552464364886, -0.71426232183, 0.543184325033, -1.78396110142]])

    db_expected = np.array([1.95932039035, 1.23281649231, -0.987088190651, 3.23339351812])

    da_error = np.mean(da - da_expected)
    dw_error = np.mean(dw - dw_expected)
    db_error = np.mean(db - db_expected)
    if da_error < 0.000001 and dw_error < 0.000001 and db_error < 0.000001:
	print "affine_backward test: passed"
    else:
	print "affine_backward test: failed"

#check relu functions
def check_relu():
    z = np.array([[1.3565476213, 1.45771394424, 1.50109965789, 1.52996162149], 
[1.46507229855, 0.154860821512, 0.815361956687, 1.04652279418], 
[2.26219902, 1.79451057522, 2.93034410997, 1.3123696034], 
[0.236827022288, 0.235670995932, 0.818587410666, -0.388271700598], 
[0.817747243124, 0.497036862725, 1.68708708207, 0.79114179937], 
[0.767800816841, -1.05707251906, 0.453867861946, -0.336912607238], 
[0.229776388413, -1.06142232183, 0.233607024277, -1.48127943772], 
[-0.600774727804, -0.868839796371, -0.870867878022, -0.762964836374], 
[0.693232976094, 0.280523916818, 1.11132084879, -0.0493649852366], 
[0.234454074768, -0.642654040537, -0.630474086786, -0.384635229845]])

    a, cache = part2.relu_forward(z)

    a_expected = np.array([[1.3565476213, 1.45771394424, 1.50109965789, 1.52996162149], 
[1.46507229855, 0.154860821512, 0.815361956687, 1.04652279418], 
[2.26219902, 1.79451057522, 2.93034410997, 1.3123696034], 
[0.236827022288, 0.235670995932, 0.818587410666, 0.0], 
[0.817747243124, 0.497036862725, 1.68708708207, 0.79114179937], 
[0.767800816841, 0.0, 0.453867861946, 0.0], 
[0.229776388413, 0.0, 0.233607024277, 0.0], 
[0.0, 0.0, 0.0, 0.0], 
[0.693232976094, 0.280523916818, 1.11132084879, 0.0], 
[0.234454074768, 0.0, 0.0, 0.0]])

    error = np.mean(a - a_expected)
    if cache.all() == z.all() and error < 0.000001:
	print "relu_forward test: passed"	
    else:
	print "relu_forward test: failed"

    da = np.array([[0.61463791745, 0.138201477229, -0.185633405548, -0.86166600909], 
[0.394857546289, -0.0929146346439, 0.444111198941, 0.732764651857], 
[0.951043010006, 0.711606684785, -0.97657183163, -0.280043871043], 
[0.459981124848, -0.656740645477, 0.0420732124083, -0.891324023321], 
[-0.600006950207, -0.962956411079, 0.587395406715, -0.552150623879], 
[-0.309296638606, 0.856162586931, 0.408828803847, -0.936322140937], 
[-0.670611687004, 0.242956803, 0.154457177208, -0.524214357251], 
[0.86842799585, 0.227931911932, 0.0712656060499, 0.179819952709], 
[0.460244059034, -0.376110009041, -0.203557875568, -0.58031250205], 
[-0.627613988239, 0.888744779968, 0.479101590099, -0.0190823827649]])    

    dz = part2.relu_backward(da, cache)

    dz_expected = np.array([[0.61463791745, 0.138201477229, -0.185633405548, -0.86166600909], 
[0.394857546289, -0.0929146346439, 0.444111198941, 0.732764651857], 
[0.951043010006, 0.711606684785, -0.97657183163, -0.280043871043], 
[0.459981124848, -0.656740645477, 0.0420732124083, -0.0], 
[-0.600006950207, -0.962956411079, 0.587395406715, -0.552150623879], 
[-0.309296638606, 0.0, 0.408828803847, -0.0], 
[-0.670611687004, 0.0, 0.154457177208, -0.0], 
[0.0, 0.0, 0.0, 0.0], 
[0.460244059034, -0.376110009041, -0.203557875568, -0.0], 
[-0.627613988239, 0.0, 0.0, -0.0]])

    error = np.mean(dz - dz_expected)
    if error < 0.000001:
	print "relu_backward test: passed"
    else:
	print "relu_backward test: failed"

def check_cross_entropy():
    f = np.array([[-0.5451707440533535, -0.4912870364592141, -0.8839416793522488], 
[-0.13116674888375845, -0.37640823601179485, 0.392686977630919], 
[-0.2444963214150382, -0.6407926448807304, -0.9506425432173375], 
[-0.8655007370735028, 0.3587855469971346, -0.09260631088790938], 
[0.0731584222174444, 0.7933425860806842, 0.9806778947934087], 
[-0.5662060312030521, 0.3261564062002016, -0.4733552465256987], 
[-0.9586980010685426, 0.5167573076722829, -0.3599656983550643], 
[-0.23307221165620406, 0.17663422710721144, 0.6620969104723808], 
[0.25796368718229745, 0.7453013108947906, -0.45291593036872846], 
[0.5960936678251274, -0.6287281113880956, 0.9055833139438891]])

    y = np.array([0, 0, 0, 1, 0, 2, 2, 2, 0, 0])

    l, df = part2.cross_entropy(f, y)

    l_expected = 1.1017917382125568

    df_expected = np.array([[-0.06387293073803002, 0.038127131173362486, 0.025745799564667528], 
[-0.07119017239654866, 0.022544138034643897, 0.048646034361904775], 
[-0.05383940385681183, 0.03105718595618684, 0.02278221790062499], 
[0.015225882200079824, -0.048205547954335404, 0.03297966575425558], 
[-0.08192655459288231, 0.037137525235514765, 0.04478902935736755], 
[0.022035229876909465, 0.05378555668367215, -0.07582078656058161], 
[0.01390272061738675, 0.060796964248050436, -0.07469968486543718], 
[0.020185198266204348, 0.03040648826693359, -0.05059168653313793], 
[-0.06794037513724646, 0.052192304973749507, 0.015748070163496938], 
[-0.062357044114543084, 0.011059879079008048, 0.05129716503553502]]) 

    l_error = l - l_expected
    df_error = np.mean(df - df_expected)
    if l_error < 0.000001 and df_error < 0.000001:
	print "cross_entropy test: passed"
    else:
	print "cross_entropy test: failed"

check_affine()
check_relu()
check_cross_entropy()
